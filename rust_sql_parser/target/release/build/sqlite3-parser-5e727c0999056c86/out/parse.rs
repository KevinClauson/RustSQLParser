/* This file is automatically generated by Lemon from input grammar
** source file "src/parser/parse.y" with these options:
**
**   -DSQLITE_ENABLE_UPDATE_DELETE_LIMIT
*/
/*
** 2001-09-15
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
** This file contains SQLite's SQL parser.
**
** The canonical source code to this file ("parse.y") is a Lemon grammar
** file that specifies the input grammar and actions to take while parsing.
** That input file is processed by Lemon to generate a C-language
** implementation of a parser for the given grammar.  You might be reading
** this comment as part of the translated C-code.  Edits should be made
** to the original parse.y sources.
*/
//line 59 "src/parser/parse.y"

use crate::custom_err;
use crate::parser::ast::*;
use crate::parser::{Context, ParserError};
use crate::dialect::{from_token, Token, TokenType};
use indexmap::IndexMap;
use log::{debug, error, log_enabled};

#[allow(non_camel_case_types)]
type sqlite3ParserError = crate::parser::ParserError;
//line 499 "src/parser/parse.y"

//line 891 "src/parser/parse.y"

//line 980 "src/parser/parse.y"

//line 1110 "src/parser/parse.y"

/**************** End of %include directives **********************************/
/* These constants specify the various numeric values for terminal symbols.
***************** Begin token definitions *************************************/
/**************** End token definitions ***************************************/

/* The next sections is a series of control #defines.
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used to store the integer codes
**                       that represent terminal and non-terminal symbols.
**                       "unsigned char" is used if there are fewer than
**                       256 symbols.  Larger types otherwise.
**    YYNOCODE           is a number of type YYCODETYPE that is not used for
**                       any terminal or nonterminal symbol.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       (also known as: "terminal symbols") have fall-back
**                       values which should be used if the original symbol
**                       would not parse.  This permits keywords to sometimes
**                       be used as identifiers, for example.
**    YYACTIONTYPE       is the data type used for "action codes" - numbers
**                       that indicate what to do in response to the next
**                       token.
**    sqlite3ParserTOKENTYPE     is the data type used for minor type for terminal
**                       symbols.  Background: A "minor type" is a semantic
**                       value associated with a terminal or non-terminal
**                       symbols.  For example, for an "ID" terminal symbol,
**                       the minor type might be the name of the identifier.
**                       Each non-terminal can have a different minor type.
**                       Terminal symbols all have the same minor type, though.
**                       This macros defines the minor type for terminal
**                       symbols.
**    YYMINORTYPE        is the data type used for all minor types.
**                       This is typically a union of many types, one of
**                       which is sqlite3ParserTOKENTYPE.  The entry in the union
**                       for terminal symbols is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYNTOKEN           Number of terminal symbols
**    YY_MAX_SHIFT       Maximum value for shift actions
**    YY_MIN_SHIFTREDUCE Minimum value for shift-reduce actions
**    YY_MAX_SHIFTREDUCE Maximum value for shift-reduce actions
**    YY_ERROR_ACTION    The yy_action[] code for syntax error
**    YY_ACCEPT_ACTION   The yy_action[] code for accept
**    YY_NO_ACTION       The yy_action[] code for no-op
**    YY_MIN_REDUCE      Minimum value for reduce actions
**    YY_MAX_REDUCE      Maximum value for reduce actions
*/
/************* Begin control #defines *****************************************/
#[allow(non_camel_case_types)]
pub type YYCODETYPE = u16; // unsigned
const YYNOCODE: YYCODETYPE = 294;
#[allow(non_camel_case_types)]
type YYACTIONTYPE = u16; // unsigned
const YYWILDCARD: YYCODETYPE = 102;
#[allow(non_camel_case_types)]
type sqlite3ParserTOKENTYPE = Token;
#[allow(non_camel_case_types)]
enum YYMINORTYPE {
    yyinit(),
    yy0(sqlite3ParserTOKENTYPE),
    yy4(Option<FrameClause>),
    yy13(Window),
    yy18(Option<DistinctNames>),
    yy19(Option<Vec<SortedColumn>>),
    yy33(Vec<TriggerCmd>),
    yy47(TriggerEvent),
    yy59(Option<TriggerTime>),
    yy68(Option<GroupBy>),
    yy77(Stmt),
    yy84(ColumnConstraint),
    yy85(Option<DeferSubclause>),
    yy97(Vec<CommonTableExpr>),
    yy105(Option<FrameExclude>),
    yy106(Vec<ResultColumn>),
    yy113(Over),
    yy143(Option<Vec<IndexedColumn>>),
    yy166(CompoundOperator),
    yy173(bool),
    yy181(Option<Indexed>),
    yy182(Option<Vec<NamedTableConstraint>>),
    yy201(TableOptions),
    yy203(CreateTableBody),
    yy207(ResolveType),
    yy213(Select),
    yy214(FrameExclude),
    yy216(FrameBound),
    yy220(String),
    yy221(FrameMode),
    yy222(Name),
    yy238(RefAct),
    yy254(Option<ResolveType>),
    yy256(WindowDef),
    yy265(Option<Vec<ResultColumn>>),
    yy276(Option<TransactionType>),
    yy277(NamedColumnConstraint),
    yy279(DistinctNames),
    yy280(Option<With>),
    yy285(IndexMap<Name,ColumnDefinition>),
    yy296(Option<SortOrder>),
    yy300(Option<InitDeferredPred>),
    yy305(Vec<NamedColumnConstraint>),
    yy312(Vec<Expr>),
    yy314(FromClause),
    yy322(Option<NullsOrder>),
    yy329(Option<Name>),
    yy331(Option<Limit>),
    yy343((bool, LikeOperator)),
    yy353(FunctionTail),
    yy360(Vec<IndexedColumn>),
    yy362(Option<Type>),
    yy364(Option<As>),
    yy394(DeferSubclause),
    yy404(Vec<RefArg>),
    yy415(Option<Distinctness>),
    yy419(Option<Vec<Expr>>),
    yy432(RefArg),
    yy439(NamedTableConstraint),
    yy444((Name, Option<Type>)),
    yy463(OneSelect),
    yy468(Vec<Vec<Expr>>),
    yy472(Vec<WindowDef>),
    yy473(Vec<(Expr, Expr)>),
    yy474(QualifiedName),
    yy479(Option<Expr>),
    yy480(Expr),
    yy485(Option<FromClause>),
    yy496((Option<Expr>, Option<Vec<ResultColumn>>)),
    yy503(SelectBody),
    yy504((Option<Upsert>, Option<Vec<ResultColumn>>)),
    yy517(Vec<Set>),
    yy520(Materialized),
    yy536(Vec<SortedColumn>),
    yy557(CommonTableExpr),
    yy559(Vec<NamedTableConstraint>),
    yy569(TriggerCmd),
    yy577(JoinOperator),
    yy578(Option<JoinConstraint>),
}
impl Default for YYMINORTYPE {
    fn default() -> YYMINORTYPE {
        YYMINORTYPE::yyinit()
    }
}
impl yyStackEntry {
    fn yy0(self) -> sqlite3ParserTOKENTYPE {
        if let YYMINORTYPE::yy0(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy4(self) -> Option<FrameClause> {
        if let YYMINORTYPE::yy4(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy4_ref(&mut self) -> &mut Option<FrameClause> {
        if let YYMINORTYPE::yy4(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy13(self) -> Window {
        if let YYMINORTYPE::yy13(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy13_ref(&mut self) -> &mut Window {
        if let YYMINORTYPE::yy13(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy18(self) -> Option<DistinctNames> {
        if let YYMINORTYPE::yy18(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy18_ref(&mut self) -> &mut Option<DistinctNames> {
        if let YYMINORTYPE::yy18(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy19(self) -> Option<Vec<SortedColumn>> {
        if let YYMINORTYPE::yy19(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy19_ref(&mut self) -> &mut Option<Vec<SortedColumn>> {
        if let YYMINORTYPE::yy19(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy33(self) -> Vec<TriggerCmd> {
        if let YYMINORTYPE::yy33(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy33_ref(&mut self) -> &mut Vec<TriggerCmd> {
        if let YYMINORTYPE::yy33(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy47(self) -> TriggerEvent {
        if let YYMINORTYPE::yy47(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy47_ref(&mut self) -> &mut TriggerEvent {
        if let YYMINORTYPE::yy47(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy59(self) -> Option<TriggerTime> {
        if let YYMINORTYPE::yy59(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy59_ref(&mut self) -> &mut Option<TriggerTime> {
        if let YYMINORTYPE::yy59(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy68(self) -> Option<GroupBy> {
        if let YYMINORTYPE::yy68(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy68_ref(&mut self) -> &mut Option<GroupBy> {
        if let YYMINORTYPE::yy68(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy77(self) -> Stmt {
        if let YYMINORTYPE::yy77(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy77_ref(&mut self) -> &mut Stmt {
        if let YYMINORTYPE::yy77(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy84(self) -> ColumnConstraint {
        if let YYMINORTYPE::yy84(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy84_ref(&mut self) -> &mut ColumnConstraint {
        if let YYMINORTYPE::yy84(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy85(self) -> Option<DeferSubclause> {
        if let YYMINORTYPE::yy85(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy85_ref(&mut self) -> &mut Option<DeferSubclause> {
        if let YYMINORTYPE::yy85(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy97(self) -> Vec<CommonTableExpr> {
        if let YYMINORTYPE::yy97(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy97_ref(&mut self) -> &mut Vec<CommonTableExpr> {
        if let YYMINORTYPE::yy97(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy105(self) -> Option<FrameExclude> {
        if let YYMINORTYPE::yy105(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy105_ref(&mut self) -> &mut Option<FrameExclude> {
        if let YYMINORTYPE::yy105(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy106(self) -> Vec<ResultColumn> {
        if let YYMINORTYPE::yy106(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy106_ref(&mut self) -> &mut Vec<ResultColumn> {
        if let YYMINORTYPE::yy106(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy113(self) -> Over {
        if let YYMINORTYPE::yy113(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy113_ref(&mut self) -> &mut Over {
        if let YYMINORTYPE::yy113(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy143(self) -> Option<Vec<IndexedColumn>> {
        if let YYMINORTYPE::yy143(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy143_ref(&mut self) -> &mut Option<Vec<IndexedColumn>> {
        if let YYMINORTYPE::yy143(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy166(self) -> CompoundOperator {
        if let YYMINORTYPE::yy166(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy166_ref(&mut self) -> &mut CompoundOperator {
        if let YYMINORTYPE::yy166(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy173(self) -> bool {
        if let YYMINORTYPE::yy173(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy173_ref(&mut self) -> &mut bool {
        if let YYMINORTYPE::yy173(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy181(self) -> Option<Indexed> {
        if let YYMINORTYPE::yy181(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy181_ref(&mut self) -> &mut Option<Indexed> {
        if let YYMINORTYPE::yy181(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy182(self) -> Option<Vec<NamedTableConstraint>> {
        if let YYMINORTYPE::yy182(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy182_ref(&mut self) -> &mut Option<Vec<NamedTableConstraint>> {
        if let YYMINORTYPE::yy182(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy201(self) -> TableOptions {
        if let YYMINORTYPE::yy201(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy201_ref(&mut self) -> &mut TableOptions {
        if let YYMINORTYPE::yy201(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy203(self) -> CreateTableBody {
        if let YYMINORTYPE::yy203(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy203_ref(&mut self) -> &mut CreateTableBody {
        if let YYMINORTYPE::yy203(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy207(self) -> ResolveType {
        if let YYMINORTYPE::yy207(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy207_ref(&mut self) -> &mut ResolveType {
        if let YYMINORTYPE::yy207(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy213(self) -> Select {
        if let YYMINORTYPE::yy213(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy213_ref(&mut self) -> &mut Select {
        if let YYMINORTYPE::yy213(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy214(self) -> FrameExclude {
        if let YYMINORTYPE::yy214(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy214_ref(&mut self) -> &mut FrameExclude {
        if let YYMINORTYPE::yy214(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy216(self) -> FrameBound {
        if let YYMINORTYPE::yy216(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy216_ref(&mut self) -> &mut FrameBound {
        if let YYMINORTYPE::yy216(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy220(self) -> String {
        if let YYMINORTYPE::yy220(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy220_ref(&mut self) -> &mut String {
        if let YYMINORTYPE::yy220(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy221(self) -> FrameMode {
        if let YYMINORTYPE::yy221(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy221_ref(&mut self) -> &mut FrameMode {
        if let YYMINORTYPE::yy221(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy222(self) -> Name {
        if let YYMINORTYPE::yy222(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy222_ref(&mut self) -> &mut Name {
        if let YYMINORTYPE::yy222(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy238(self) -> RefAct {
        if let YYMINORTYPE::yy238(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy238_ref(&mut self) -> &mut RefAct {
        if let YYMINORTYPE::yy238(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy254(self) -> Option<ResolveType> {
        if let YYMINORTYPE::yy254(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy254_ref(&mut self) -> &mut Option<ResolveType> {
        if let YYMINORTYPE::yy254(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy256(self) -> WindowDef {
        if let YYMINORTYPE::yy256(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy256_ref(&mut self) -> &mut WindowDef {
        if let YYMINORTYPE::yy256(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy265(self) -> Option<Vec<ResultColumn>> {
        if let YYMINORTYPE::yy265(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy265_ref(&mut self) -> &mut Option<Vec<ResultColumn>> {
        if let YYMINORTYPE::yy265(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy276(self) -> Option<TransactionType> {
        if let YYMINORTYPE::yy276(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy276_ref(&mut self) -> &mut Option<TransactionType> {
        if let YYMINORTYPE::yy276(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy277(self) -> NamedColumnConstraint {
        if let YYMINORTYPE::yy277(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy277_ref(&mut self) -> &mut NamedColumnConstraint {
        if let YYMINORTYPE::yy277(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy279(self) -> DistinctNames {
        if let YYMINORTYPE::yy279(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy279_ref(&mut self) -> &mut DistinctNames {
        if let YYMINORTYPE::yy279(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy280(self) -> Option<With> {
        if let YYMINORTYPE::yy280(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy280_ref(&mut self) -> &mut Option<With> {
        if let YYMINORTYPE::yy280(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy285(self) -> IndexMap<Name,ColumnDefinition> {
        if let YYMINORTYPE::yy285(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy285_ref(&mut self) -> &mut IndexMap<Name,ColumnDefinition> {
        if let YYMINORTYPE::yy285(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy296(self) -> Option<SortOrder> {
        if let YYMINORTYPE::yy296(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy296_ref(&mut self) -> &mut Option<SortOrder> {
        if let YYMINORTYPE::yy296(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy300(self) -> Option<InitDeferredPred> {
        if let YYMINORTYPE::yy300(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy300_ref(&mut self) -> &mut Option<InitDeferredPred> {
        if let YYMINORTYPE::yy300(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy305(self) -> Vec<NamedColumnConstraint> {
        if let YYMINORTYPE::yy305(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy305_ref(&mut self) -> &mut Vec<NamedColumnConstraint> {
        if let YYMINORTYPE::yy305(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy312(self) -> Vec<Expr> {
        if let YYMINORTYPE::yy312(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy312_ref(&mut self) -> &mut Vec<Expr> {
        if let YYMINORTYPE::yy312(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy314(self) -> FromClause {
        if let YYMINORTYPE::yy314(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy314_ref(&mut self) -> &mut FromClause {
        if let YYMINORTYPE::yy314(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy322(self) -> Option<NullsOrder> {
        if let YYMINORTYPE::yy322(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy322_ref(&mut self) -> &mut Option<NullsOrder> {
        if let YYMINORTYPE::yy322(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy329(self) -> Option<Name> {
        if let YYMINORTYPE::yy329(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy329_ref(&mut self) -> &mut Option<Name> {
        if let YYMINORTYPE::yy329(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy331(self) -> Option<Limit> {
        if let YYMINORTYPE::yy331(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy331_ref(&mut self) -> &mut Option<Limit> {
        if let YYMINORTYPE::yy331(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy343(self) -> (bool, LikeOperator) {
        if let YYMINORTYPE::yy343(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy343_ref(&mut self) -> &mut (bool, LikeOperator) {
        if let YYMINORTYPE::yy343(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy353(self) -> FunctionTail {
        if let YYMINORTYPE::yy353(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy353_ref(&mut self) -> &mut FunctionTail {
        if let YYMINORTYPE::yy353(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy360(self) -> Vec<IndexedColumn> {
        if let YYMINORTYPE::yy360(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy360_ref(&mut self) -> &mut Vec<IndexedColumn> {
        if let YYMINORTYPE::yy360(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy362(self) -> Option<Type> {
        if let YYMINORTYPE::yy362(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy362_ref(&mut self) -> &mut Option<Type> {
        if let YYMINORTYPE::yy362(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy364(self) -> Option<As> {
        if let YYMINORTYPE::yy364(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy364_ref(&mut self) -> &mut Option<As> {
        if let YYMINORTYPE::yy364(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy394(self) -> DeferSubclause {
        if let YYMINORTYPE::yy394(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy394_ref(&mut self) -> &mut DeferSubclause {
        if let YYMINORTYPE::yy394(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy404(self) -> Vec<RefArg> {
        if let YYMINORTYPE::yy404(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy404_ref(&mut self) -> &mut Vec<RefArg> {
        if let YYMINORTYPE::yy404(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy415(self) -> Option<Distinctness> {
        if let YYMINORTYPE::yy415(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy415_ref(&mut self) -> &mut Option<Distinctness> {
        if let YYMINORTYPE::yy415(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy419(self) -> Option<Vec<Expr>> {
        if let YYMINORTYPE::yy419(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy419_ref(&mut self) -> &mut Option<Vec<Expr>> {
        if let YYMINORTYPE::yy419(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy432(self) -> RefArg {
        if let YYMINORTYPE::yy432(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy432_ref(&mut self) -> &mut RefArg {
        if let YYMINORTYPE::yy432(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy439(self) -> NamedTableConstraint {
        if let YYMINORTYPE::yy439(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy439_ref(&mut self) -> &mut NamedTableConstraint {
        if let YYMINORTYPE::yy439(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy444(self) -> (Name, Option<Type>) {
        if let YYMINORTYPE::yy444(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy444_ref(&mut self) -> &mut (Name, Option<Type>) {
        if let YYMINORTYPE::yy444(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy463(self) -> OneSelect {
        if let YYMINORTYPE::yy463(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy463_ref(&mut self) -> &mut OneSelect {
        if let YYMINORTYPE::yy463(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy468(self) -> Vec<Vec<Expr>> {
        if let YYMINORTYPE::yy468(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy468_ref(&mut self) -> &mut Vec<Vec<Expr>> {
        if let YYMINORTYPE::yy468(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy472(self) -> Vec<WindowDef> {
        if let YYMINORTYPE::yy472(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy472_ref(&mut self) -> &mut Vec<WindowDef> {
        if let YYMINORTYPE::yy472(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy473(self) -> Vec<(Expr, Expr)> {
        if let YYMINORTYPE::yy473(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy473_ref(&mut self) -> &mut Vec<(Expr, Expr)> {
        if let YYMINORTYPE::yy473(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy474(self) -> QualifiedName {
        if let YYMINORTYPE::yy474(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy474_ref(&mut self) -> &mut QualifiedName {
        if let YYMINORTYPE::yy474(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy479(self) -> Option<Expr> {
        if let YYMINORTYPE::yy479(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy479_ref(&mut self) -> &mut Option<Expr> {
        if let YYMINORTYPE::yy479(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy480(self) -> Expr {
        if let YYMINORTYPE::yy480(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy480_ref(&mut self) -> &mut Expr {
        if let YYMINORTYPE::yy480(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy485(self) -> Option<FromClause> {
        if let YYMINORTYPE::yy485(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy485_ref(&mut self) -> &mut Option<FromClause> {
        if let YYMINORTYPE::yy485(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy496(self) -> (Option<Expr>, Option<Vec<ResultColumn>>) {
        if let YYMINORTYPE::yy496(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy496_ref(&mut self) -> &mut (Option<Expr>, Option<Vec<ResultColumn>>) {
        if let YYMINORTYPE::yy496(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy503(self) -> SelectBody {
        if let YYMINORTYPE::yy503(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy503_ref(&mut self) -> &mut SelectBody {
        if let YYMINORTYPE::yy503(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy504(self) -> (Option<Upsert>, Option<Vec<ResultColumn>>) {
        if let YYMINORTYPE::yy504(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy504_ref(&mut self) -> &mut (Option<Upsert>, Option<Vec<ResultColumn>>) {
        if let YYMINORTYPE::yy504(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy517(self) -> Vec<Set> {
        if let YYMINORTYPE::yy517(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy517_ref(&mut self) -> &mut Vec<Set> {
        if let YYMINORTYPE::yy517(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy520(self) -> Materialized {
        if let YYMINORTYPE::yy520(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy520_ref(&mut self) -> &mut Materialized {
        if let YYMINORTYPE::yy520(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy536(self) -> Vec<SortedColumn> {
        if let YYMINORTYPE::yy536(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy536_ref(&mut self) -> &mut Vec<SortedColumn> {
        if let YYMINORTYPE::yy536(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy557(self) -> CommonTableExpr {
        if let YYMINORTYPE::yy557(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy557_ref(&mut self) -> &mut CommonTableExpr {
        if let YYMINORTYPE::yy557(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy559(self) -> Vec<NamedTableConstraint> {
        if let YYMINORTYPE::yy559(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy559_ref(&mut self) -> &mut Vec<NamedTableConstraint> {
        if let YYMINORTYPE::yy559(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy569(self) -> TriggerCmd {
        if let YYMINORTYPE::yy569(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy569_ref(&mut self) -> &mut TriggerCmd {
        if let YYMINORTYPE::yy569(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy577(self) -> JoinOperator {
        if let YYMINORTYPE::yy577(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy577_ref(&mut self) -> &mut JoinOperator {
        if let YYMINORTYPE::yy577(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    fn yy578(self) -> Option<JoinConstraint> {
        if let YYMINORTYPE::yy578(v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
    #[allow(dead_code)]
    fn yy578_ref(&mut self) -> &mut Option<JoinConstraint> {
        if let YYMINORTYPE::yy578(ref mut v) = self.minor {
            v
        } else {
            unreachable!()
        }
    }
}
const YYERRORSYMBOL: YYCODETYPE = 0; // No error symbol
const YYFALLBACK: bool = true;
const YYNSTATE: YYACTIONTYPE =             560;
const YYNRULE: usize =             405;
const YYNRULE_WITH_ACTION: YYACTIONTYPE =  376;
const YYNTOKEN: YYACTIONTYPE =             168;
const YY_MAX_SHIFT: YYACTIONTYPE =         559;
const YY_MIN_SHIFTREDUCE: YYACTIONTYPE =   826;
const YY_MAX_SHIFTREDUCE: YYACTIONTYPE =  1230;
const YY_ERROR_ACTION: YYACTIONTYPE =      1231;
const YY_ACCEPT_ACTION: YYACTIONTYPE =     1232;
//const YY_NO_ACTION: YYACTIONTYPE =         1233;
const YY_MIN_REDUCE: YYACTIONTYPE =       1234;
//const YY_MAX_REDUCE: YYACTIONTYPE =        1638;
/************* End control #defines *******************************************/

/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N <= YY_MAX_SHIFT             Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   N between YY_MIN_SHIFTREDUCE       Shift to an arbitrary state then
**     and YY_MAX_SHIFTREDUCE           reduce by rule N-YY_MIN_SHIFTREDUCE.
**
**   N == YY_ERROR_ACTION               A syntax error has occurred.
**
**   N == YY_ACCEPT_ACTION              The parser accepts its input.
**
**   N == YY_NO_ACTION                  No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
**   N between YY_MIN_REDUCE            Reduce by rule N-YY_MIN_REDUCE
**     and YY_MAX_REDUCE
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as either:
**
**    (A)   N = yy_action[ yy_shift_ofst[S] + X ]
**    (B)   N = yy_default[S]
**
** The (A) formula is preferred.  The B formula is used instead if
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X.
**
** The formulas above are for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
**
*********** Begin parsing tables **********************************************/
macro_rules! YY_ACTTAB_COUNT {() => {2155}}
#[rustfmt::skip]
#[allow(non_upper_case_globals)]
static yy_action: [YYACTIONTYPE; 2155] = [
 /*     0 */  1260, 1260,  553,  122,  119,  179,  553, 1272,  471,  555,
 /*    10 */   553,  555, 1258,  553,  469, 1286,  553, 1325, 1325,  395,
 /*    20 */  1352, 1312,   43,   43,  263,  368,   43,   43,  263,  515,
 /*    30 */    43,   43, 1583,   75,   75,    8,   75,   75,  368,  122,
 /*    40 */   119,  179,   32,  129,  130,   83,  553, 1048, 1048, 1062,
 /*    50 */  1065, 1052, 1052,  127,  127,  128,  128,  128,  128, 1275,
 /*    60 */   948,  215, 1337,  395,  948,  553,   15,   15,  516,  156,
 /*    70 */  1278,  516,  372,  541,   33,  979,  510,  260,  177,  517,
 /*    80 */   321,  406,  159,  980,  287,   75,   75,  129,  130,   83,
 /*    90 */   469, 1048, 1048, 1062, 1065, 1052, 1052,  127,  127,  128,
 /*   100 */   128,  128,  128,  126,  126,  126,  126,  125,  125,  124,
 /*   110 */   124,  124,  123,  120,  432, 1590,  371,  368,  948, 1592,
 /*   120 */   516,  370,  948, 1590,  529,  122,  119,  179,  421, 1573,
 /*   130 */   432,  128,  128,  128,  128,  121, 1323, 1323,  395,  122,
 /*   140 */   119,  179, 1573,  128,  128,  128,  128,  126,  126,  126,
 /*   150 */   126,  125,  125,  124,  124,  124,  123,  120,  432, 1547,
 /*   160 */   292,  155,  129,  130,   83, 1503, 1048, 1048, 1062, 1065,
 /*   170 */  1052, 1052,  127,  127,  128,  128,  128,  128,  146,  126,
 /*   180 */   126,  126,  126,  125,  125,  124,  124,  124,  123,  120,
 /*   190 */   432,  126,  126,  126,  126,  125,  125,  124,  124,  124,
 /*   200 */   123,  120,  432,  178,  236,  501, 1188,  271, 1186,  126,
 /*   210 */   126,  126,  126,  125,  125,  124,  124,  124,  123,  120,
 /*   220 */   432, 1573,  126,  126,  126,  126,  125,  125,  124,  124,
 /*   230 */   124,  123,  120,  432,  253,  315,  535,  490,  487,  486,
 /*   240 */   553,  856,  395,  553,  544,  544,  544,  485,  100,  856,
 /*   250 */   511,  125,  125,  124,  124,  124,  123,  120,  432,  368,
 /*   260 */    75,   75,  856,   73,   73, 1277,  129,  130,   83,  894,
 /*   270 */  1048, 1048, 1062, 1065, 1052, 1052,  127,  127,  128,  128,
 /*   280 */   128,  128,  215, 1337, 1111,  124,  124,  124,  123,  120,
 /*   290 */   432, 1338,  469,  131,  541,  516,  430,  429,  856,  857,
 /*   300 */   856,  494,  541,  512,  553, 1105,  856,  857,  856,  895,
 /*   310 */  1107,  502, 1582, 1635,  388,    8,  549,   19, 1106,  856,
 /*   320 */   857,  856,  201,  374,   75,   75,  126,  126,  126,  126,
 /*   330 */   125,  125,  124,  124,  124,  123,  120,  432, 1232,    1,
 /*   340 */     1,  559,    3, 1236, 1109, 1109,  395, 1016,  218,  845,
 /*   350 */  1611,  559,    3, 1236,   88,  146, 1333,  407,  218,  310,
 /*   360 */   856, 1540,  295, 1574, 1540,  417, 1333,  387, 1229,  856,
 /*   370 */   129,  130,   83, 1512, 1048, 1048, 1062, 1065, 1052, 1052,
 /*   380 */   127,  127,  128,  128,  128,  128,  553,  332,  215, 1337,
 /*   390 */   440,  439,  405,  215, 1337,   85,  215, 1337,  215, 1337,
 /*   400 */   541,  343,  460,  342,  856,  541,   15,   15,  541,  450,
 /*   410 */   541,  551,  315,  535,  247,  419,  264,  856,  857,  856,
 /*   420 */   354,  409,  467, 1576,  247,  467,  856,  857,  856,  366,
 /*   430 */   126,  126,  126,  126,  125,  125,  124,  124,  124,  123,
 /*   440 */   120,  432,    6,  459,  436,  469,  476, 1230, 1608,  329,
 /*   450 */   395,  331, 1086,  967,  436,   86,  323,  552, 1016,  440,
 /*   460 */   178,  856,  857,  856,  253,  414,  146,  490,  487,  486,
 /*   470 */   395, 1016,  442,  402,  129,  130,   83,  485, 1048, 1048,
 /*   480 */  1062, 1065, 1052, 1052,  127,  127,  128,  128,  128,  128,
 /*   490 */  1495,  152,  493,  856,  129,  130,   83,  964, 1048, 1048,
 /*   500 */  1062, 1065, 1052, 1052,  127,  127,  128,  128,  128,  128,
 /*   510 */   416,  553,  343,  460,  342,  297,  270,  231,  362,  496,
 /*   520 */   357,  495,  258,  315,  535,  343,  447,  326,  353,  863,
 /*   530 */   106,   75,   75,  330,  126,  126,  126,  126,  125,  125,
 /*   540 */   124,  124,  124,  123,  120,  432, 1049, 1049, 1063, 1066,
 /*   550 */   856,  857,  856,  453,  126,  126,  126,  126,  125,  125,
 /*   560 */   124,  124,  124,  123,  120,  432,  311,  444,  547, 1582,
 /*   570 */   856, 1038,    8,  856,   82,  395,  553,  966,  221,  350,
 /*   580 */     7, 1580, 1180,  148,    8,  380,  150,  863, 1027,  482,
 /*   590 */   391,  239, 1025,  430,  429, 1179,  137,  137, 1181,  129,
 /*   600 */   130,   83,  226, 1048, 1048, 1062, 1065, 1052, 1052,  127,
 /*   610 */   127,  128,  128,  128,  128,  521,  965,  257,  856,  395,
 /*   620 */   210, 1053, 1180,  491, 1026, 1028, 1028,  856,  857,  856,
 /*   630 */   856,  857,  856,  525,  238, 1179,  133, 1445, 1181,  373,
 /*   640 */   856, 1109, 1109,  129,  130,   83,  285, 1048, 1048, 1062,
 /*   650 */  1065, 1052, 1052,  127,  127,  128,  128,  128,  128,  126,
 /*   660 */   126,  126,  126,  125,  125,  124,  124,  124,  123,  120,
 /*   670 */   432,  856,  363, 1605,  871,  856,  857,  856,  215, 1337,
 /*   680 */     2,  431,  431,  431,  116,  542,  400,    4,  475,  946,
 /*   690 */   541,  524,  122,  119,  179,  551,  514,  856,  857,  856,
 /*   700 */   369,  545,  353,  126,  126,  126,  126,  125,  125,  124,
 /*   710 */   124,  124,  123,  120,  432, 1038,   14,   14,  856,  553,
 /*   720 */  1558,  233,  232,  395,  553,  433,  221,  876,  856,  857,
 /*   730 */   856,  871, 1027,  549,  315,  535, 1025,  538,  390,  139,
 /*   740 */   139,  202, 1557,  553,   58,   58, 1299,  129,  130,   83,
 /*   750 */   437, 1048, 1048, 1062, 1065, 1052, 1052,  127,  127,  128,
 /*   760 */   128,  128,  128,   15,   15,  553, 1038,  395, 1026, 1028,
 /*   770 */  1028,  868,  114,  114,  945,  856,  857,  856,  532,  856,
 /*   780 */   115,  291,  433,  554,  433,   59,   59, 1025,  123,  120,
 /*   790 */   432,  129,  130,   83, 1555, 1048, 1048, 1062, 1065, 1052,
 /*   800 */  1052,  127,  127,  128,  128,  128,  128,  126,  126,  126,
 /*   810 */   126,  125,  125,  124,  124,  124,  123,  120,  432, 1026,
 /*   820 */  1028, 1028, 1029,   29,  553, 1428,  553,   34, 1117, 1116,
 /*   830 */   456,  146,  116,  542,  503,    4,  856,  857,  856,  550,
 /*   840 */  1575, 1263,  401,  553,   53,   53,   75,   75,  553,  545,
 /*   850 */   296,  126,  126,  126,  126,  125,  125,  124,  124,  124,
 /*   860 */   123,  120,  432,   75,   75,  856,  215, 1337,   17,   17,
 /*   870 */   441,  395,  551,  433, 1321, 1201, 1295,  399,  541,  504,
 /*   880 */  1298,  427,  215, 1337, 1319,  538,  498,  551,  315,  535,
 /*   890 */   455,  553, 1554,  106,  541,  129,  130,   83,  428, 1048,
 /*   900 */  1048, 1062, 1065, 1052, 1052,  127,  127,  128,  128,  128,
 /*   910 */   128,   15,   15,  941, 1038,  395,  862,  553,  940, 1039,
 /*   920 */   114,  114,  856,  857,  856,  979,  415,  364,  115,  223,
 /*   930 */   433,  554,  433,  980,   12, 1025,  263,   45,   45,  129,
 /*   940 */   130,   83, 1444, 1048, 1048, 1062, 1065, 1052, 1052,  127,
 /*   950 */   127,  128,  128,  128,  128,  126,  126,  126,  126,  125,
 /*   960 */   125,  124,  124,  124,  123,  120,  432, 1026, 1028, 1028,
 /*   970 */  1029,   29,  948, 1512,  862,  234,  553,  363, 1605, 1581,
 /*   980 */  1157, 1633,    8, 1633, 1331, 1371,  221,  368,  366, 1256,
 /*   990 */  1508, 1510,  553,  505,  553,  885,   15,   15,  394,  126,
 /*  1000 */   126,  126,  126,  125,  125,  124,  124,  124,  123,  120,
 /*  1010 */   432,  299,   15,   15,   15,   15,  215, 1337,  300,  395,
 /*  1020 */  1313,  215, 1337, 1021,  424,  215, 1337,  420,  541,  212,
 /*  1030 */   948,  157,  284,  541,  834,  835,  836,  541,  461,  395,
 /*  1040 */   279,  551,  964,  129,  130,   83, 1552, 1048, 1048, 1062,
 /*  1050 */  1065, 1052, 1052,  127,  127,  128,  128,  128,  128, 1508,
 /*  1060 */  1155,  338,  856,  129,  130,   83,  317, 1048, 1048, 1062,
 /*  1070 */  1065, 1052, 1052,  127,  127,  128,  128,  128,  128, 1180,
 /*  1080 */  1428,  553,  405, 1157, 1634, 1135, 1634,  208, 1337,  551,
 /*  1090 */   546, 1573, 1179,  229,  404, 1181,  318,  553,  381,  541,
 /*  1100 */  1136,   15,   15,  126,  126,  126,  126,  125,  125,  124,
 /*  1110 */   124,  124,  123,  120,  432, 1137,  213,   75,   75,  856,
 /*  1120 */   857,  856,  534,  126,  126,  126,  126,  125,  125,  124,
 /*  1130 */   124,  124,  123,  120,  432, 1370,  239,  918,  513,  531,
 /*  1140 */   933,  934,  387, 1156, 1135,  411,  288,  919,  523,  533,
 /*  1150 */   553,  234,  312,  395,  215, 1337, 1180, 1134,  530, 1136,
 /*  1160 */   346,  965,  348, 1155,  216, 1337,  541, 1194,  405, 1179,
 /*  1170 */    60,   60, 1181,  395, 1137,  113,  541,  129,  130,   83,
 /*  1180 */   107, 1048, 1048, 1062, 1065, 1052, 1052,  127,  127,  128,
 /*  1190 */   128,  128,  128,  378,  553,  223,  537,  129,  130,   83,
 /*  1200 */   553, 1048, 1048, 1062, 1065, 1052, 1052,  127,  127,  128,
 /*  1210 */   128,  128,  128,  446,   46,   46,  256,  255,  254, 1193,
 /*  1220 */    61,   61, 1230,  551, 1579,  551,  879,    8, 1546,  553,
 /*  1230 */  1502,  553,  290,  553,  282,  553, 1443,  126,  126,  126,
 /*  1240 */   126,  125,  125,  124,  124,  124,  123,  120,  432,   62,
 /*  1250 */    62,   63,   63,   64,   64,   65,   65,  126,  126,  126,
 /*  1260 */   126,  125,  125,  124,  124,  124,  123,  120,  432,  553,
 /*  1270 */  1216,  363, 1605,  551,  553,  551,  104,  553, 1332,  553,
 /*  1280 */  1328,  553,  243,  553,  879,  553,  551,  395,  553,   47,
 /*  1290 */    47,  449,  222,  475,   48,   48,  533,   49,   49,   51,
 /*  1300 */    51,   52,   52,   66,   66,  135,  135,  395,  136,  136,
 /*  1310 */  1297,  129,  130,   83,  111, 1048, 1048, 1062, 1065, 1052,
 /*  1320 */  1052,  127,  127,  128,  128,  128,  128,  395, 1224,  553,
 /*  1330 */  1360,  129,  130,   83, 1561, 1048, 1048, 1062, 1065, 1052,
 /*  1340 */  1052,  127,  127,  128,  128,  128,  128,  553,  475,   67,
 /*  1350 */    67,  129,  118,   83, 1264, 1048, 1048, 1062, 1065, 1052,
 /*  1360 */  1052,  127,  127,  128,  128,  128,  128,   68,   68,  553,
 /*  1370 */   451,  126,  126,  126,  126,  125,  125,  124,  124,  124,
 /*  1380 */   123,  120,  432,  553, 1535,  553,  340,  553,  229,   69,
 /*  1390 */    69,  126,  126,  126,  126,  125,  125,  124,  124,  124,
 /*  1400 */   123,  120,  432,   16,   16,   70,   70,   54,   54, 1534,
 /*  1410 */  1428,  126,  126,  126,  126,  125,  125,  124,  124,  124,
 /*  1420 */   123,  120,  432,  553,  379,  553,  223,  553,  551,  553,
 /*  1430 */   349,  395,  553,  452,  553, 1113, 1428,  551, 1428, 1112,
 /*  1440 */  1598,  298,  345,   71,   71,   55,   55,   72,   72,   56,
 /*  1450 */    56,  395,   74,   74,  165,  165,  130,   83,  465, 1048,
 /*  1460 */  1048, 1062, 1065, 1052, 1052,  127,  127,  128,  128,  128,
 /*  1470 */   128,  553,  454, 1315,  553,  412,  553,   83,  553, 1048,
 /*  1480 */  1048, 1062, 1065, 1052, 1052,  127,  127,  128,  128,  128,
 /*  1490 */   128,  166,  166,  228,   79,   79,   57,   57,  138,  138,
 /*  1500 */   551,  413,  551,  425,  551,  277, 1296,  347,  553,  316,
 /*  1510 */   116,  542,  553,    4,  113,  126,  126,  126,  126,  125,
 /*  1520 */   125,  124,  124,  124,  123,  120,  432,  545,   76,   76,
 /*  1530 */   543,  401,  163,  163,  553,  126,  126,  126,  126,  125,
 /*  1540 */   125,  124,  124,  124,  123,  120,  432,  257,  553, 1578,
 /*  1550 */   445,  433,    8,  518,  140,  140,  553,   82,  553,  473,
 /*  1560 */   553,  244,  553,  538,  553, 1311,  553,  906,  134,  134,
 /*  1570 */   553,  116,  542,  146,    4,  553,  164,  164,  158,  158,
 /*  1580 */   144,  144,  143,  143,  141,  141,  142,  142,  545,  356,
 /*  1590 */    78,   78, 1038,  507,  553,   80,   80,  553,  114,  114,
 /*  1600 */   553,   10,  315,  535,  462,  112,  115,  109,  433,  554,
 /*  1610 */   433,   82,  433, 1025,   77,   77,  400,   44,   44,  162,
 /*  1620 */    50,   50,  403,  181,  538,  466,  281,  177,  314,  103,
 /*  1630 */   315,  535,   82,   89,  225,   82, 1093,  105,  527,  941,
 /*  1640 */   154,  463,   40,  526,  940, 1026, 1028, 1028, 1029,   29,
 /*  1650 */  1152,  519,  389, 1038,  334,  361,  106,  474,  520,  114,
 /*  1660 */   114,  339, 1030,  106,  293,  360, 1018,  115,  262,  433,
 /*  1670 */   554,  433, 1162,  468, 1025,  262,  470,  367,  262,  246,
 /*  1680 */   483,  351,  259,  106,  893,  892,  900,  901,  161, 1089,
 /*  1690 */   106,  259, 1381,  970, 1093,  262,  982,  983,  938,  939,
 /*  1700 */   113,  113, 1110, 1110, 1108, 1108, 1026, 1028, 1028, 1029,
 /*  1710 */    29, 1610, 1205,  435, 1427,  860,  283,  151,  309, 1355,
 /*  1720 */  1030,  385,  385,  384,  273,  382,  536, 1367, 1210, 1432,
 /*  1730 */  1274,  116,  542, 1259,    4, 1248, 1247, 1249, 1240,  478,
 /*  1740 */   276,  185,  499,  320,  116,  542,   13,    4,  545,  386,
 /*  1750 */   305,  319,  306,  307,  242, 1413,  286,  325,  443,  328,
 /*  1760 */   289,  545,  336,  337, 1418,  472,  294, 1417,  488, 1295,
 /*  1770 */   341,  359,  433, 1538,  235, 1394, 1499, 1498, 1224, 1364,
 /*  1780 */   230, 1250,  187, 1365,  538,  433, 1363,  219, 1362,  539,
 /*  1790 */   170,  220,  308,  145, 1221,  377,   84,  538,  527,  240,
 /*  1800 */   183,   88,  227,  528,  199,  132,   87, 1504, 1414, 1408,
 /*  1810 */   186,  527,  324, 1038,  533,   37,  526,  175,  189,  114,
 /*  1820 */   114,  448, 1401,  191,  327,  192, 1038,  115,  193,  433,
 /*  1830 */   554,  433,  114,  114, 1025,  195,  116,  542,  194,    4,
 /*  1840 */   115,  481,  433,  554,  433,  396,  104, 1025, 1420, 1493,
 /*  1850 */   315,  535,  196,  545,  203, 1539,  464, 1419,   38, 1537,
 /*  1860 */  1423,   90,  458,  477,  205,  209, 1026, 1028, 1028, 1029,
 /*  1870 */    29,  206,  479,  497,  438,  392, 1318,  433,  344, 1026,
 /*  1880 */  1028, 1028, 1029,   29, 1205,  435, 1317, 1316,  283,  538,
 /*  1890 */   418,   96, 1306,  385,  385,  384,  273,  382, 1289, 1288,
 /*  1900 */  1210,  393,  283,   81,  542, 1283,    4,  385,  385,  384,
 /*  1910 */   273,  382,  885,  185, 1210,  320, 1282,  358, 1038, 1281,
 /*  1920 */   545, 1305, 1280,  319,  114,  114,  236,  185, 1604,  320,
 /*  1930 */  1335,  422,  115,  506,  433,  554,  433,  319,  423, 1025,
 /*  1940 */   303,  304,  365,   11,  433, 1478,  265,  426, 1386,  108,
 /*  1950 */   313, 1586, 1585,  153,  187, 1385,  538, 1344,  509,  522,
 /*  1960 */   375,  376,  170,   36, 1336,  145, 1334,  556,  187,  217,
 /*  1970 */  1208, 1026, 1028, 1028, 1029,   29,  170,  272,  274,  145,
 /*  1980 */   275,  557,  186, 1245, 1237, 1038,  167,  168,  397,  398,
 /*  1990 */   827,  114,  114,  149,  182,  301,  186,  434,  224,  115,
 /*  2000 */   169,  433,  554,  433,  241,  558, 1025, 1236,  184,  188,
 /*  2010 */  1103, 1101,  218,  322,  190, 1216,  171,  396,  921,  245,
 /*  2020 */  1333,  248,  315,  535,  333,  508,   18,  249,  335, 1114,
 /*  2030 */   262,  396,  197, 1125, 1121,  198,  315,  535, 1026, 1028,
 /*  2040 */  1028, 1029,   29,  457,  172,  173,  438,  408,  410,  174,
 /*  2050 */   200,   91,  215, 1337,   92,   93, 1128,   94,  250,  251,
 /*  2060 */   438, 1124,    5,  204,  541,   39,  844,  480,  360,  252,
 /*  2070 */   352,  207,   95,   20,  484,   21,  883,  489,  247,  355,
 /*  2080 */   492,   97,  896,  302,  160,   98,  500,   99, 1199,  176,
 /*  2090 */    22, 1068, 1164,   41, 1163,  101,  102, 1084, 1069, 1067,
 /*  2100 */   932,  237,  278,  113,  280,  211,  261,   23,  436,  968,
 /*  2110 */   974,   24, 1183, 1187,   25, 1185,   26,  106, 1192, 1191,
 /*  2120 */    27, 1071,   28,  266,  110, 1133, 1072,   30,    9,  540,
 /*  2130 */    42,   31, 1031,  861,  117,  548, 1169,  383,   35,  214,
 /*  2140 */  1207,  267,  180,  147, 1206, 1233, 1233, 1233, 1233,  268,
 /*  2150 */  1233, 1233,  269, 1233, 1265,
];
#[rustfmt::skip]
#[allow(non_upper_case_globals)]
static yy_lookahead: [YYCODETYPE; 2323] = [
 /*     0 */   176,  176,  176,  252,  253,  254,  176,  195,  176,  185,
 /*    10 */   176,  187,  187,  176,  176,  203,  176,  215,  216,   19,
 /*    20 */   233,  210,  196,  197,   24,  176,  196,  197,   24,  186,
 /*    30 */   196,  197,  285,  196,  197,  288,  196,  197,  176,  252,
 /*    40 */   253,  254,   22,   43,   44,   45,  176,   47,   48,   49,
 /*    50 */    50,   51,   52,   53,   54,   55,   56,   57,   58,  196,
 /*    60 */    60,  218,  219,   19,   60,  176,  196,  197,  231,  220,
 /*    70 */   196,  231,  199,  230,   54,   31,  239,  234,  235,  239,
 /*    80 */   176,  211,  220,   39,  246,  196,  197,   43,   44,   45,
 /*    90 */   176,   47,   48,   49,   50,   51,   52,   53,   54,   55,
 /*   100 */    56,   57,   58,  103,  104,  105,  106,  107,  108,  109,
 /*   110 */   110,  111,  112,  113,  114,  289,  290,  176,  118,  289,
 /*   120 */   231,  291,  118,  289,  290,  252,  253,  254,  239,  280,
 /*   130 */   114,   55,   56,   57,   58,   59,  215,  216,   19,  252,
 /*   140 */   253,  254,  280,   55,   56,   57,   58,  103,  104,  105,
 /*   150 */   106,  107,  108,  109,  110,  111,  112,  113,  114,  272,
 /*   160 */   246,  220,   43,   44,   45,  261,   47,   48,   49,   50,
 /*   170 */    51,   52,   53,   54,   55,   56,   57,   58,   82,  103,
 /*   180 */   104,  105,  106,  107,  108,  109,  110,  111,  112,  113,
 /*   190 */   114,  103,  104,  105,  106,  107,  108,  109,  110,  111,
 /*   200 */   112,  113,  114,  176,  166,  167,   87,   26,   89,  103,
 /*   210 */   104,  105,  106,  107,  108,  109,  110,  111,  112,  113,
 /*   220 */   114,  280,  103,  104,  105,  106,  107,  108,  109,  110,
 /*   230 */   111,  112,  113,  114,  120,  139,  140,  123,  124,  125,
 /*   240 */   176,   60,   19,  176,  192,  193,  194,  133,   25,   60,
 /*   250 */   186,  107,  108,  109,  110,  111,  112,  113,  114,  176,
 /*   260 */   196,  197,   60,  196,  197,  196,   43,   44,   45,   35,
 /*   270 */    47,   48,   49,   50,   51,   52,   53,   54,   55,   56,
 /*   280 */    57,   58,  218,  219,   11,  109,  110,  111,  112,  113,
 /*   290 */   114,  219,  176,   70,  230,  231,  107,  108,  117,  118,
 /*   300 */   119,   67,  230,  239,  176,  116,  117,  118,  119,   75,
 /*   310 */   121,  284,  285,  277,  278,  288,  176,   22,  129,  117,
 /*   320 */   118,  119,   22,  256,  196,  197,  103,  104,  105,  106,
 /*   330 */   107,  108,  109,  110,  111,  112,  113,  114,  168,  169,
 /*   340 */   170,  171,  172,  173,  155,  156,   19,   74,  178,   21,
 /*   350 */   170,  171,  172,  173,  152,   82,  186,   62,  178,  231,
 /*   360 */    60,  186,  246,  280,  186,  131,  186,   22,   23,   60,
 /*   370 */    43,   44,   45,  176,   47,   48,   49,   50,   51,   52,
 /*   380 */    53,   54,   55,   56,   57,   58,  176,   16,  218,  219,
 /*   390 */   193,  194,  176,  218,  219,   68,  218,  219,  218,  219,
 /*   400 */   230,  128,  129,  130,   60,  230,  196,  197,  230,   81,
 /*   410 */   230,  176,  139,  140,  244,   19,  181,  117,  118,  119,
 /*   420 */    24,  211,  247,  283,  244,  247,  117,  118,  119,  176,
 /*   430 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*   440 */   113,  114,  267,  268,  274,  176,  268,  102,  176,   78,
 /*   450 */    19,   80,  124,  144,  274,   24,  240,  176,   74,  262,
 /*   460 */   176,  117,  118,  119,  120,  212,   82,  123,  124,  125,
 /*   470 */    19,   74,  247,  179,   43,   44,   45,  133,   47,   48,
 /*   480 */    49,   50,   51,   52,   53,   54,   55,   56,   57,   58,
 /*   490 */   162,   22,   96,   60,   43,   44,   45,   25,   47,   48,
 /*   500 */    49,   50,   51,   52,   53,   54,   55,   56,   57,   58,
 /*   510 */   114,  176,  128,  129,  130,  246,  120,  121,  122,  123,
 /*   520 */   124,  125,  126,  139,  140,  128,  129,  130,  132,   60,
 /*   530 */    25,  196,  197,  162,  103,  104,  105,  106,  107,  108,
 /*   540 */   109,  110,  111,  112,  113,  114,   47,   48,   49,   50,
 /*   550 */   117,  118,  119,  259,  103,  104,  105,  106,  107,  108,
 /*   560 */   109,  110,  111,  112,  113,  114,  231,  225,  284,  285,
 /*   570 */    60,  101,  288,   60,  232,   19,  176,  144,  176,   23,
 /*   580 */    22,  285,   77,   73,  288,  183,   73,  118,  118,   19,
 /*   590 */   188,  119,  122,  107,  108,   90,  196,  197,   93,   43,
 /*   600 */    44,   45,  151,   47,   48,   49,   50,   51,   52,   53,
 /*   610 */    54,   55,   56,   57,   58,  176,  144,   47,   60,   19,
 /*   620 */    25,  122,   77,   23,  154,  155,  156,  117,  118,  119,
 /*   630 */   117,  118,  119,   88,  176,   90,   22,  251,   93,  199,
 /*   640 */    60,  155,  156,   43,   44,   45,  186,   47,   48,   49,
 /*   650 */    50,   51,   52,   53,   54,   55,   56,   57,   58,  103,
 /*   660 */   104,  105,  106,  107,  108,  109,  110,  111,  112,  113,
 /*   670 */   114,   60,  286,  287,   60,  117,  118,  119,  218,  219,
 /*   680 */    22,  192,  193,  194,   19,   20,  116,   22,  176,  109,
 /*   690 */   230,  146,  252,  253,  254,  176,  176,  117,  118,  119,
 /*   700 */   181,   36,  132,  103,  104,  105,  106,  107,  108,  109,
 /*   710 */   110,  111,  112,  113,  114,  101,  196,  197,   60,  176,
 /*   720 */   176,  107,  108,   19,  176,   60,  176,   23,  117,  118,
 /*   730 */   119,  117,  118,  176,  139,  140,  122,   72,  188,  196,
 /*   740 */   197,   22,  176,  176,  196,  197,  206,   43,   44,   45,
 /*   750 */   176,   47,   48,   49,   50,   51,   52,   53,   54,   55,
 /*   760 */    56,   57,   58,  196,  197,  176,  101,   19,  154,  155,
 /*   770 */   156,   23,  107,  108,  109,  117,  118,  119,  211,   60,
 /*   780 */   115,  269,  117,  118,  119,  196,  197,  122,  112,  113,
 /*   790 */   114,   43,   44,   45,  176,   47,   48,   49,   50,   51,
 /*   800 */    52,   53,   54,   55,   56,   57,   58,  103,  104,  105,
 /*   810 */   106,  107,  108,  109,  110,  111,  112,  113,  114,  154,
 /*   820 */   155,  156,  157,  158,  176,  176,  176,   22,  128,  129,
 /*   830 */   130,   82,   19,   20,  186,   22,  117,  118,  119,  282,
 /*   840 */   283,  190,  191,  176,  196,  197,  196,  197,  176,   36,
 /*   850 */   186,  103,  104,  105,  106,  107,  108,  109,  110,  111,
 /*   860 */   112,  113,  114,  196,  197,   60,  218,  219,  196,  197,
 /*   870 */   121,   19,  176,   60,  203,   23,  205,  181,  230,  231,
 /*   880 */   206,  231,  218,  219,  213,   72,  109,  176,  139,  140,
 /*   890 */   241,  176,  181,   25,  230,   43,   44,   45,  231,   47,
 /*   900 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*   910 */    58,  196,  197,  136,  101,   19,   60,  176,  141,   23,
 /*   920 */   107,  108,  117,  118,  119,   31,  211,  221,  115,  223,
 /*   930 */   117,  118,  119,   39,   22,  122,   24,  196,  197,   43,
 /*   940 */    44,   45,  251,   47,   48,   49,   50,   51,   52,   53,
 /*   950 */    54,   55,   56,   57,   58,  103,  104,  105,  106,  107,
 /*   960 */   108,  109,  110,  111,  112,  113,  114,  154,  155,  156,
 /*   970 */   157,  158,   60,  176,  118,   25,  176,  286,  287,  285,
 /*   980 */    22,   23,  288,   25,  186,  176,  176,  176,  176,  186,
 /*   990 */   193,  194,  176,  186,  176,  127,  196,  197,  188,  103,
 /*  1000 */   104,  105,  106,  107,  108,  109,  110,  111,  112,  113,
 /*  1010 */   114,  211,  196,  197,  196,  197,  218,  219,  208,   19,
 /*  1020 */   210,  218,  219,   23,  212,  218,  219,  211,  230,  211,
 /*  1030 */   118,  220,  100,  230,    7,    8,    9,  230,  130,   19,
 /*  1040 */    23,  176,   25,   43,   44,   45,  181,   47,   48,   49,
 /*  1050 */    50,   51,   52,   53,   54,   55,   56,   57,   58,  262,
 /*  1060 */   102,  153,   60,   43,   44,   45,  134,   47,   48,   49,
 /*  1070 */    50,   51,   52,   53,   54,   55,   56,   57,   58,   77,
 /*  1080 */   176,  176,  176,   22,   23,   12,   25,  218,  219,  176,
 /*  1090 */    88,  280,   90,  143,  181,   93,  164,  176,   16,  230,
 /*  1100 */    27,  196,  197,  103,  104,  105,  106,  107,  108,  109,
 /*  1110 */   110,  111,  112,  113,  114,   42,  211,  196,  197,  117,
 /*  1120 */   118,  119,  186,  103,  104,  105,  106,  107,  108,  109,
 /*  1130 */   110,  111,  112,  113,  114,  176,  119,   64,  135,   67,
 /*  1140 */   137,  138,   22,   23,   12,  241,  240,   74,  146,  146,
 /*  1150 */   176,   25,  231,   19,  218,  219,   77,   23,   86,   27,
 /*  1160 */    78,  144,   80,  102,  218,  219,  230,   95,  176,   90,
 /*  1170 */   196,  197,   93,   19,   42,   25,  230,   43,   44,   45,
 /*  1180 */   160,   47,   48,   49,   50,   51,   52,   53,   54,   55,
 /*  1190 */    56,   57,   58,  221,  176,  223,   64,   43,   44,   45,
 /*  1200 */   176,   47,   48,   49,   50,   51,   52,   53,   54,   55,
 /*  1210 */    56,   57,   58,  176,  196,  197,  128,  129,  130,  147,
 /*  1220 */   196,  197,  102,  176,  285,  176,   60,  288,  181,  176,
 /*  1230 */   181,  176,  240,  176,   22,  176,  251,  103,  104,  105,
 /*  1240 */   106,  107,  108,  109,  110,  111,  112,  113,  114,  196,
 /*  1250 */   197,  196,  197,  196,  197,  196,  197,  103,  104,  105,
 /*  1260 */   106,  107,  108,  109,  110,  111,  112,  113,  114,  176,
 /*  1270 */    25,  286,  287,  176,  176,  176,  150,  176,  181,  176,
 /*  1280 */   181,  176,   15,  176,  118,  176,  176,   19,  176,  196,
 /*  1290 */   197,  181,   24,  176,  196,  197,  146,  196,  197,  196,
 /*  1300 */   197,  196,  197,  196,  197,  196,  197,   19,  196,  197,
 /*  1310 */   206,   43,   44,   45,  160,   47,   48,   49,   50,   51,
 /*  1320 */    52,   53,   54,   55,   56,   57,   58,   19,   61,  176,
 /*  1330 */   236,   43,   44,   45,  176,   47,   48,   49,   50,   51,
 /*  1340 */    52,   53,   54,   55,   56,   57,   58,  176,  176,  196,
 /*  1350 */   197,   43,   44,   45,  142,   47,   48,   49,   50,   51,
 /*  1360 */    52,   53,   54,   55,   56,   57,   58,  196,  197,  176,
 /*  1370 */   176,  103,  104,  105,  106,  107,  108,  109,  110,  111,
 /*  1380 */   112,  113,  114,  176,  176,  176,  269,  176,  143,  196,
 /*  1390 */   197,  103,  104,  105,  106,  107,  108,  109,  110,  111,
 /*  1400 */   112,  113,  114,  196,  197,  196,  197,  196,  197,  176,
 /*  1410 */   176,  103,  104,  105,  106,  107,  108,  109,  110,  111,
 /*  1420 */   112,  113,  114,  176,  221,  176,  223,  176,  176,  176,
 /*  1430 */   176,   19,  176,  181,  176,   29,  176,  176,  176,   33,
 /*  1440 */   293,  269,  181,  196,  197,  196,  197,  196,  197,  196,
 /*  1450 */   197,   19,  196,  197,  196,  197,   44,   45,  116,   47,
 /*  1460 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  1470 */    58,  176,   66,  176,  176,  241,  176,   45,  176,   47,
 /*  1480 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*  1490 */    58,  196,  197,  151,  196,  197,  196,  197,  196,  197,
 /*  1500 */   176,  241,  176,  241,  176,  181,  176,  181,  176,  181,
 /*  1510 */    19,   20,  176,   22,   25,  103,  104,  105,  106,  107,
 /*  1520 */   108,  109,  110,  111,  112,  113,  114,   36,  196,  197,
 /*  1530 */   190,  191,  196,  197,  176,  103,  104,  105,  106,  107,
 /*  1540 */   108,  109,  110,  111,  112,  113,  114,   47,  176,  285,
 /*  1550 */   225,   60,  288,   19,  196,  197,  176,  232,  176,   19,
 /*  1560 */   176,   24,  176,   72,  176,   23,  176,   25,  196,  197,
 /*  1570 */   176,   19,   20,   82,   22,  176,  196,  197,  196,  197,
 /*  1580 */   196,  197,  196,  197,  196,  197,  196,  197,   36,  176,
 /*  1590 */   196,  197,  101,   19,  176,  196,  197,  176,  107,  108,
 /*  1600 */   176,   49,  139,  140,  225,  159,  115,  161,  117,  118,
 /*  1610 */   119,  232,   60,  122,  196,  197,  116,  196,  197,   23,
 /*  1620 */   196,  197,  275,  276,   72,  225,  234,  235,  225,  116,
 /*  1630 */   139,  140,  232,  150,  151,  232,   60,  148,   86,  136,
 /*  1640 */    22,  130,   24,   91,  141,  154,  155,  156,  157,  158,
 /*  1650 */    23,  117,   25,  101,   23,  122,   25,  117,  145,  107,
 /*  1660 */   108,   23,   60,   25,  153,  132,   23,  115,   25,  117,
 /*  1670 */   118,  119,   98,   23,  122,   25,   23,  176,   25,  142,
 /*  1680 */    23,   23,   25,   25,  121,  122,    7,    8,   23,   23,
 /*  1690 */    25,   25,  176,   23,  118,   25,   84,   85,   23,   23,
 /*  1700 */    25,   25,  155,  156,  155,  156,  154,  155,  156,  157,
 /*  1710 */   158,    0,    1,    2,  176,   23,    5,   25,  233,  176,
 /*  1720 */   118,   10,   11,   12,   13,   14,  216,  176,   17,  176,
 /*  1730 */   176,   19,   20,  176,   22,  176,  176,  176,  176,  264,
 /*  1740 */   263,   30,  146,   32,   19,   20,  224,   22,   36,  174,
 /*  1750 */   233,   40,  233,  233,  273,  249,  226,  245,  237,  245,
 /*  1760 */   237,   36,  270,  227,  249,  270,  227,  249,  200,  205,
 /*  1770 */   226,  199,   60,  249,  209,  243,  199,  199,   61,  238,
 /*  1780 */   224,  182,   71,  238,   72,   60,  238,  221,  238,  258,
 /*  1790 */    79,  221,  237,   82,   38,  226,  271,   72,   86,  273,
 /*  1800 */   273,  152,  151,   91,   22,  149,  271,  261,  250,  222,
 /*  1810 */    99,   86,  221,  101,  146,  248,   91,   43,  214,  107,
 /*  1820 */   108,   18,  222,  217,  221,  217,  101,  115,  217,  117,
 /*  1830 */   118,  119,  107,  108,  122,  180,   19,   20,  217,   22,
 /*  1840 */   115,   18,  117,  118,  119,  134,  150,  122,  250,  227,
 /*  1850 */   139,  140,  180,   36,  214,  227,  227,  250,  248,  227,
 /*  1860 */   214,  159,   63,  266,  180,   22,  154,  155,  156,  157,
 /*  1870 */   158,  180,  201,  116,  163,  201,  198,   60,  265,  154,
 /*  1880 */   155,  156,  157,  158,    1,    2,  198,  198,    5,   72,
 /*  1890 */    65,   22,  207,   10,   11,   12,   13,   14,  204,  204,
 /*  1900 */    17,  201,    5,   19,   20,  198,   22,   10,   11,   12,
 /*  1910 */    13,   14,  127,   30,   17,   32,  200,  198,  101,  198,
 /*  1920 */    36,  207,  198,   40,  107,  108,  166,   30,  287,   32,
 /*  1930 */   222,   24,  115,  281,  117,  118,  119,   40,  114,  122,
 /*  1940 */   260,  260,  201,   22,   60,  255,   92,   83,  242,  159,
 /*  1950 */   257,  292,  292,  165,   71,  242,   72,  229,  141,  147,
 /*  1960 */   228,  227,   79,   25,  222,   82,  222,  184,   71,  180,
 /*  1970 */    13,  154,  155,  156,  157,  158,   79,  177,  177,   82,
 /*  1980 */     6,  175,   99,  175,  175,  101,  189,  189,  279,  279,
 /*  1990 */     4,  107,  108,  202,  276,  202,   99,    3,   22,  115,
 /*  2000 */   189,  117,  118,  119,   15,  171,  122,  173,   16,  152,
 /*  2010 */    23,   23,  178,  140,  143,   25,  131,  134,   20,   24,
 /*  2020 */   186,  145,  139,  140,   16,  141,   22,  116,  162,   69,
 /*  2030 */    25,  134,   69,    1,   76,  143,  139,  140,  154,  155,
 /*  2040 */   156,  157,  158,   41,  131,  131,  163,   62,   37,  131,
 /*  2050 */   152,   54,  218,  219,   54,   54,  117,   54,   34,  142,
 /*  2060 */   163,    1,    5,  116,  230,   24,   20,   19,  132,  126,
 /*  2070 */    23,   22,   22,   22,   68,   22,   60,   68,  244,   24,
 /*  2080 */    97,   22,   28,   68,   23,  150,   22,   25,   23,   37,
 /*  2090 */    34,   23,   23,   22,   98,  143,  143,   23,   23,   23,
 /*  2100 */   136,  142,   23,   25,   23,   22,   34,   34,  274,  144,
 /*  2110 */   117,   34,   89,   76,   34,   87,   34,   25,   76,   94,
 /*  2120 */    34,   23,   22,   22,   25,   23,   11,   22,   44,   25,
 /*  2130 */    22,   34,   23,   23,   22,   24,   23,   15,   22,   25,
 /*  2140 */     1,  142,   25,   23,    1,  294,  294,  294,  294,  142,
 /*  2150 */   294,  294,  142,  294,  142,  294,  294,  294,  294,  294,
 /*  2160 */   294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
 /*  2170 */   294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
 /*  2180 */   294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
 /*  2190 */   294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
 /*  2200 */   294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
 /*  2210 */   294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
 /*  2220 */   294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
 /*  2230 */   294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
 /*  2240 */   294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
 /*  2250 */   294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
 /*  2260 */   294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
 /*  2270 */   294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
 /*  2280 */   294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
 /*  2290 */   294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
 /*  2300 */   294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
 /*  2310 */   294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
 /*  2320 */   294,  294,  294,
];
#[allow(non_camel_case_types)]
type YY_SHIFT_TYPE = u16;
const YY_SHIFT_COUNT: YYACTIONTYPE =    559;
//const YY_SHIFT_MIN: YY_SHIFT_TYPE =      0;
//const YY_SHIFT_MAX: YY_SHIFT_TYPE =      2143;
#[rustfmt::skip]
#[allow(non_upper_case_globals)]
static yy_shift_ofst: [YY_SHIFT_TYPE; 560] = [
 /*     0 */  1883, 1711, 1491, 1897, 1491,  384,  273,   96, 1552, 1712,
 /*    10 */  1725,  813,  813,  813,    0,   44,   44,  327,  813,  813,
 /*    20 */   813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
 /*    30 */   813,  813,  189,  189, 1002, 1002,  344,  749,   96,   96,
 /*    40 */    96,   96,   96,  119,  223,  431,  451,  556,  600,  704,
 /*    50 */   748,  852,  896, 1000, 1020, 1134, 1154, 1268, 1288, 1288,
 /*    60 */  1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288,
 /*    70 */  1288, 1288, 1288, 1288, 1288, 1288, 1308, 1288, 1412, 1432,
 /*    80 */  1432, 1817,  665, 1884,  813,  813,  813,  813,  813,  813,
 /*    90 */   813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
 /*   100 */   813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
 /*   110 */   813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
 /*   120 */   813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
 /*   130 */   813,  813,  813,  813,   76,   88,   88,   88,   88,   88,
 /*   140 */    88,   88,  106,  144,  176,  510,  513,  181,  611,  570,
 /*   150 */   611,  486,  486,  611,  611,  595,  595,  595,  676,  595,
 /*   160 */    38,   38,   38,   16,   16, 2155, 2155,  396,  396,  396,
 /*   170 */   202,  300,  300,  300,  300, 1073, 1073,  558,  545,  658,
 /*   180 */   181,  958, 1061,  611,  611,  611,  611,  611,  611,  611,
 /*   190 */   611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
 /*   200 */   611,  611,  611,  611,  611,  611,  611,  611, 1003,  611,
 /*   210 */   611,  611,  505,  505,  611, 1003, 1003,  611,  328, 1079,
 /*   220 */  1079,  856,  856, 1463, 2155, 2155, 2155, 2155, 2155, 2155,
 /*   230 */  2155,  614,  470,  470,  719,  114,  805,  580,  309,  433,
 /*   240 */   611,  611,  611,  611,  611,  611,  611,  397,  611,  611,
 /*   250 */   611,  611,  611,  611,  234,  234,  234,  611,  611,  611,
 /*   260 */  1017,  611,  611,  611,  912, 1072, 1132,  611,  611,  611,
 /*   270 */   611,  611,  611,  611,  611,  611,  700, 1406,    4,    4,
 /*   280 */     4,  472,  777, 1027, 1267, 1342, 1483,  950, 1534, 1483,
 /*   290 */  1534, 1540, 1126, 1342, 1342, 1126, 1342,  950, 1540,  868,
 /*   300 */  1542, 1500,  894,  894,  894, 1513, 1513, 1513, 1513, 1534,
 /*   310 */  1489, 1150, 1150, 1446, 1245, 1503, 1618, 1717, 1717, 1756,
 /*   320 */  1756, 1649, 1651, 1782, 1656, 1668, 1774, 1656, 1668, 1803,
 /*   330 */  1803, 1803, 1803, 1823, 1696, 1823, 1696, 1651, 1651, 1696,
 /*   340 */  1782, 1696, 1774, 1774, 1702, 1799, 1823, 1843, 1823, 1843,
 /*   350 */  1757, 1757, 1757, 1825, 1869, 1869, 1843, 1757, 1785, 1757,
 /*   360 */  1825, 1757, 1757, 1760, 1656, 1907, 1824, 1824, 1843, 1921,
 /*   370 */  1854, 1854, 1864, 1864, 1790, 1788, 1812, 1696, 1656, 1656,
 /*   380 */  1938, 1823, 1957, 1957, 1974, 1974, 1974, 2155, 2155, 2155,
 /*   390 */  2155, 2155, 2155, 2155, 2155,  499,  371,  345, 1120,  932,
 /*   400 */  1088,  469, 1082, 1627,   20, 1537, 1631,  908, 1511, 1638,
 /*   410 */   295, 1643, 1650, 1653, 1657, 1658, 1166, 1563, 1679, 1533,
 /*   420 */  1665, 1596, 1574, 1576, 1666, 1670, 1612, 1675, 1676, 1547,
 /*   430 */  1549, 1692, 1602, 1212, 1986, 1994, 1976, 1989, 1992, 1987,
 /*   440 */  1988, 1873, 1857, 1885, 1990, 1990, 1995, 1871, 1998, 1876,
 /*   450 */  2008, 2004, 1911, 1866, 1960, 2005, 1963, 1958, 2002, 2032,
 /*   460 */  1892, 1913, 1990, 1914, 1985, 2011, 1990, 1898, 1997, 2000,
 /*   470 */  2001, 2003, 1918, 1939, 2024, 1917, 2060, 2057, 1947, 2041,
 /*   480 */  2046, 2048, 1936, 1943, 2049, 2006, 2050, 2051, 2047, 2053,
 /*   490 */  2009, 2016, 2055, 1983, 2054, 2059, 2015, 2052, 2061, 2056,
 /*   500 */  1935, 2064, 2065, 2068, 2062, 2069, 2071, 1996, 1952, 1953,
 /*   510 */  2074, 2075, 2076, 1964, 1959, 2079, 2078, 2081, 1993, 2072,
 /*   520 */  2083, 1965, 2073, 2077, 2080, 2082, 2023, 2037, 2028, 2084,
 /*   530 */  2042, 2025, 2092, 2086, 2098, 2100, 2099, 2102, 2101, 2115,
 /*   540 */  2105, 2104, 2108, 2109, 2110, 2112, 2097, 2113, 2116, 2111,
 /*   550 */  2114, 1999, 2007, 2010, 2012, 2117, 2120, 2122, 2139, 2143,
];
#[allow(non_camel_case_types)]
type YY_REDUCE_TYPE = i16;
const YY_REDUCE_COUNT: YYACTIONTYPE = 394;
//const YY_REDUCE_MIN: YY_REDUCE_TYPE =   -253;
//const YY_REDUCE_MAX: YY_REDUCE_TYPE =   1834;
#[rustfmt::skip]
#[allow(non_upper_case_globals)]
static yy_reduce_ofst: [YY_REDUCE_TYPE; 395] = [
 /*     0 */   170,  180,   64, 1834,  648,  175,  178, -157, -174, -170,
 /*    10 */  -166, -163, -160, -111, -213, -127,  440, -113, -130,  210,
 /*    20 */   715,  800,  816,  128,  818,  905,  335,  567,  650,   67,
 /*    30 */   667,  921,  197,  797,   27,  284,  810,  460,  664,  798,
 /*    40 */   803,  807,  936, -249, -249, -249, -249, -249, -249, -249,
 /*    50 */  -249, -249, -249, -249, -249, -249, -249, -249, -249, -249,
 /*    60 */  -249, -249, -249, -249, -249, -249, -249, -249, -249, -249,
 /*    70 */  -249, -249, -249, -249, -249, -249, -249, -249, -249, -249,
 /*    80 */  -249,  400,  520,  543,  548,  589,  672,  741,  974, 1018,
 /*    90 */  1024, 1053, 1055, 1057, 1059, 1093, 1098, 1101, 1103, 1105,
 /*   100 */  1107, 1109, 1112, 1153, 1171, 1193, 1207, 1209, 1211, 1247,
 /*   110 */  1249, 1251, 1253, 1256, 1258, 1295, 1298, 1300, 1302, 1332,
 /*   120 */  1336, 1358, 1372, 1380, 1382, 1384, 1386, 1388, 1390, 1394,
 /*   130 */  1399, 1418, 1421, 1424, -249, -249, -249, -249, -249, -249,
 /*   140 */  -249, -249, -249, -249, -249, -151, -138, -176,  -59,  671,
 /*   150 */   811,   52,  489,  557,  402,  869,  946,  869, -249,  946,
 /*   160 */   386,  691,  985, -249, -249, -249, -249, -188, -188, -188,
 /*   170 */   -96, -162,  -86,  116,  269, -198,  -79,  235, -253,  519,
 /*   180 */  -175,   36,   36,  550,  696,  711,  865,  913,  216,  906,
 /*   190 */   992, 1047, 1049, 1097, 1099, 1110, 1252,  649,  512,  904,
 /*   200 */  1117, 1234, 1260, 1172, 1261, 1324, 1326,  253,  706,  812,
 /*   210 */    83, 1262,  296,  694,  140,  972, 1203, 1328,  294,  939,
 /*   220 */  1264,  651, 1340,   72, 1347,  342, 1325, 1379, 1400, 1392,
 /*   230 */  1403, -137, -126,   69, -168, -189,  272,  281,  439,  458,
 /*   240 */   544,  566,  574,  618,  809,  959, 1037,  225, 1158, 1194,
 /*   250 */  1208, 1233, 1254, 1297,  540,  674, 1104, 1330, 1413, 1501,
 /*   260 */  1094, 1516, 1538, 1543, 1485, 1147, 1510, 1551, 1553,  281,
 /*   270 */  1554, 1557, 1559, 1560, 1561, 1562, 1475, 1477, 1517, 1519,
 /*   280 */  1520, 1094, 1522, 1575, 1481, 1506, 1512, 1530, 1521, 1514,
 /*   290 */  1523, 1492, 1536, 1515, 1518, 1539, 1524, 1544, 1495, 1568,
 /*   300 */  1565, 1564, 1572, 1577, 1578, 1541, 1545, 1548, 1550, 1555,
 /*   310 */  1532, 1566, 1570, 1531, 1569, 1556, 1599, 1526, 1527, 1525,
 /*   320 */  1535, 1546, 1558, 1567, 1587, 1591, 1604, 1600, 1603, 1606,
 /*   330 */  1608, 1611, 1621, 1655, 1622, 1672, 1628, 1598, 1607, 1629,
 /*   340 */  1610, 1632, 1640, 1646, 1597, 1613, 1684, 1671, 1691, 1674,
 /*   350 */  1678, 1688, 1689, 1685, 1694, 1695, 1700, 1707, 1716, 1719,
 /*   360 */  1714, 1721, 1724, 1641, 1708, 1652, 1680, 1681, 1741, 1690,
 /*   370 */  1659, 1660, 1706, 1713, 1693, 1728, 1732, 1734, 1742, 1744,
 /*   380 */  1783, 1789, 1800, 1801, 1806, 1808, 1809, 1709, 1710, 1718,
 /*   390 */  1797, 1798, 1791, 1793, 1811,
];
#[rustfmt::skip]
#[allow(non_upper_case_globals)]
static yy_default: [YYACTIONTYPE; 560] = [
 /*     0 */  1566, 1566, 1488, 1566, 1231, 1231, 1231, 1361, 1231, 1231,
 /*    10 */  1231, 1488, 1488, 1488, 1357, 1389, 1389, 1549, 1231, 1231,
 /*    20 */  1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1486,
 /*    30 */  1231, 1231, 1231, 1231, 1584, 1584, 1231, 1231, 1231, 1231,
 /*    40 */  1231, 1231, 1231, 1231, 1398, 1231, 1405, 1231, 1231, 1231,
 /*    50 */  1231, 1231, 1489, 1490, 1231, 1231, 1231, 1231, 1548, 1550,
 /*    60 */  1505, 1531, 1412, 1411, 1410, 1409, 1400, 1377, 1403, 1396,
 /*    70 */  1482, 1483, 1481, 1485, 1489, 1490, 1231, 1399, 1449, 1466,
 /*    80 */  1448, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
 /*    90 */  1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
 /*   100 */  1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
 /*   110 */  1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
 /*   120 */  1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
 /*   130 */  1231, 1231, 1231, 1231, 1458, 1465, 1464, 1463, 1472, 1462,
 /*   140 */  1459, 1451, 1450, 1452, 1453, 1231, 1231, 1257, 1231, 1320,
 /*   150 */  1231, 1231, 1231, 1231, 1231, 1568, 1567, 1231, 1454, 1231,
 /*   160 */  1442, 1441, 1440, 1469, 1455, 1468, 1467, 1556, 1262, 1261,
 /*   170 */  1506, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1584, 1231,
 /*   180 */  1231, 1231, 1231, 1231, 1231, 1553, 1551, 1231, 1231, 1231,
 /*   190 */  1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
 /*   200 */  1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1383, 1231,
 /*   210 */  1231, 1231, 1584, 1584, 1231, 1383, 1383, 1231, 1254, 1584,
 /*   220 */  1584, 1266, 1266, 1231, 1562, 1351, 1351, 1351, 1351, 1361,
 /*   230 */  1351, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
 /*   240 */  1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
 /*   250 */  1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
 /*   260 */  1231, 1231, 1231, 1231, 1357, 1231, 1231, 1231, 1231, 1231,
 /*   270 */  1231, 1231, 1231, 1231, 1231, 1239, 1231, 1523, 1357, 1357,
 /*   280 */  1357, 1359, 1350, 1241, 1631, 1415, 1404, 1358, 1380, 1404,
 /*   290 */  1380, 1628, 1402, 1415, 1415, 1402, 1415, 1358, 1628, 1292,
 /*   300 */  1622, 1285, 1389, 1389, 1389, 1379, 1379, 1379, 1379, 1380,
 /*   310 */  1395, 1383, 1383, 1484, 1358, 1350, 1231, 1631, 1631, 1630,
 /*   320 */  1630, 1506, 1422, 1425, 1397, 1383, 1324, 1397, 1383, 1330,
 /*   330 */  1330, 1330, 1330, 1251, 1402, 1251, 1402, 1422, 1422, 1402,
 /*   340 */  1425, 1402, 1324, 1324, 1530, 1528, 1251, 1496, 1251, 1496,
 /*   350 */  1322, 1322, 1322, 1307, 1231, 1231, 1496, 1322, 1292, 1322,
 /*   360 */  1307, 1322, 1322, 1606, 1397, 1231, 1500, 1500, 1496, 1491,
 /*   370 */  1597, 1597, 1392, 1392, 1231, 1343, 1393, 1402, 1397, 1397,
 /*   380 */  1310, 1251, 1617, 1617, 1238, 1238, 1238, 1636, 1636, 1562,
 /*   390 */  1273, 1273, 1294, 1294, 1273, 1231, 1231, 1231, 1231, 1231,
 /*   400 */  1231, 1267, 1231, 1231, 1507, 1368, 1231, 1231, 1231, 1231,
 /*   410 */  1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
 /*   420 */  1231, 1231, 1569, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
 /*   430 */  1231, 1231, 1231, 1430, 1231, 1234, 1559, 1231, 1231, 1231,
 /*   440 */  1231, 1231, 1231, 1231, 1406, 1407, 1369, 1231, 1231, 1231,
 /*   450 */  1231, 1231, 1231, 1231, 1231, 1527, 1526, 1231, 1231, 1231,
 /*   460 */  1231, 1231, 1421, 1231, 1231, 1231, 1416, 1231, 1231, 1231,
 /*   470 */  1231, 1231, 1231, 1231, 1231, 1627, 1231, 1231, 1231, 1231,
 /*   480 */  1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
 /*   490 */  1231, 1290, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
 /*   500 */  1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
 /*   510 */  1231, 1231, 1231, 1339, 1231, 1231, 1487, 1231, 1231, 1231,
 /*   520 */  1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
 /*   530 */  1231, 1231, 1384, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
 /*   540 */  1231, 1345, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
 /*   550 */  1603, 1366, 1431, 1231, 1435, 1255, 1231, 1246, 1231, 1231,
];
/********** End of lemon-generated parsing tables *****************************/

/* The next table maps tokens (terminal symbols) into fallback tokens.
** If a construct like the following:
**
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
**
** This feature can be used, for example, to cause some keywords in a language
** to revert to identifiers if they keyword does not apply in the context where
** it appears.
*/
#[allow(non_upper_case_globals)]
static yyFallback: [YYCODETYPE; 168] = [
    0,  /*          $ => nothing */
    0,  /*       SEMI => nothing */
   60,  /*    EXPLAIN => ID */
   60,  /*      QUERY => ID */
   60,  /*       PLAN => ID */
   60,  /*      BEGIN => ID */
    0,  /* TRANSACTION => nothing */
   60,  /*   DEFERRED => ID */
   60,  /*  IMMEDIATE => ID */
   60,  /*  EXCLUSIVE => ID */
    0,  /*     COMMIT => nothing */
   60,  /*        END => ID */
   60,  /*   ROLLBACK => ID */
   60,  /*  SAVEPOINT => ID */
   60,  /*    RELEASE => ID */
    0,  /*         TO => nothing */
    0,  /*      TABLE => nothing */
    0,  /*     CREATE => nothing */
   60,  /*         IF => ID */
    0,  /*        NOT => nothing */
    0,  /*     EXISTS => nothing */
   60,  /*       TEMP => ID */
    0,  /*         LP => nothing */
    0,  /*         RP => nothing */
    0,  /*         AS => nothing */
    0,  /*      COMMA => nothing */
   60,  /*    WITHOUT => ID */
   60,  /*      ABORT => ID */
   60,  /*     ACTION => ID */
   60,  /*      AFTER => ID */
   60,  /*    ANALYZE => ID */
   60,  /*        ASC => ID */
   60,  /*     ATTACH => ID */
   60,  /*     BEFORE => ID */
   60,  /*         BY => ID */
   60,  /*    CASCADE => ID */
   60,  /*       CAST => ID */
   60,  /*   CONFLICT => ID */
   60,  /*   DATABASE => ID */
   60,  /*       DESC => ID */
   60,  /*     DETACH => ID */
   60,  /*       EACH => ID */
   60,  /*       FAIL => ID */
    0,  /*         OR => nothing */
    0,  /*        AND => nothing */
    0,  /*         IS => nothing */
    0,  /*      ISNOT => nothing */
   60,  /*      MATCH => ID */
   60,  /*    LIKE_KW => ID */
    0,  /*    BETWEEN => nothing */
    0,  /*         IN => nothing */
    0,  /*     ISNULL => nothing */
    0,  /*    NOTNULL => nothing */
    0,  /*         NE => nothing */
    0,  /*         EQ => nothing */
    0,  /*         GT => nothing */
    0,  /*         LE => nothing */
    0,  /*         LT => nothing */
    0,  /*         GE => nothing */
    0,  /*     ESCAPE => nothing */
    0,  /*         ID => nothing */
   60,  /*   COLUMNKW => ID */
   60,  /*         DO => ID */
   60,  /*        FOR => ID */
   60,  /*     IGNORE => ID */
   60,  /*  INITIALLY => ID */
   60,  /*    INSTEAD => ID */
   60,  /*         NO => ID */
   60,  /*        KEY => ID */
   60,  /*         OF => ID */
   60,  /*     OFFSET => ID */
   60,  /*     PRAGMA => ID */
   60,  /*      RAISE => ID */
   60,  /*  RECURSIVE => ID */
   60,  /*    REPLACE => ID */
   60,  /*   RESTRICT => ID */
   60,  /*        ROW => ID */
   60,  /*       ROWS => ID */
   60,  /*    TRIGGER => ID */
   60,  /*     VACUUM => ID */
   60,  /*       VIEW => ID */
   60,  /*    VIRTUAL => ID */
   60,  /*       WITH => ID */
   60,  /*      NULLS => ID */
   60,  /*      FIRST => ID */
   60,  /*       LAST => ID */
   60,  /*    CURRENT => ID */
   60,  /*  FOLLOWING => ID */
   60,  /*  PARTITION => ID */
   60,  /*  PRECEDING => ID */
   60,  /*      RANGE => ID */
   60,  /*  UNBOUNDED => ID */
   60,  /*    EXCLUDE => ID */
   60,  /*     GROUPS => ID */
   60,  /*     OTHERS => ID */
   60,  /*       TIES => ID */
   60,  /*  GENERATED => ID */
   60,  /*     ALWAYS => ID */
   60,  /* MATERIALIZED => ID */
   60,  /*    REINDEX => ID */
   60,  /*     RENAME => ID */
   60,  /*   CTIME_KW => ID */
    0,  /*        ANY => nothing */
    0,  /*     BITAND => nothing */
    0,  /*      BITOR => nothing */
    0,  /*     LSHIFT => nothing */
    0,  /*     RSHIFT => nothing */
    0,  /*       PLUS => nothing */
    0,  /*      MINUS => nothing */
    0,  /*       STAR => nothing */
    0,  /*      SLASH => nothing */
    0,  /*        REM => nothing */
    0,  /*     CONCAT => nothing */
    0,  /*        PTR => nothing */
    0,  /*    COLLATE => nothing */
    0,  /*     BITNOT => nothing */
    0,  /*         ON => nothing */
    0,  /*    INDEXED => nothing */
    0,  /*     STRING => nothing */
    0,  /*    JOIN_KW => nothing */
    0,  /* CONSTRAINT => nothing */
    0,  /*    DEFAULT => nothing */
    0,  /*       NULL => nothing */
    0,  /*    PRIMARY => nothing */
    0,  /*     UNIQUE => nothing */
    0,  /*      CHECK => nothing */
    0,  /* REFERENCES => nothing */
    0,  /*   AUTOINCR => nothing */
    0,  /*     INSERT => nothing */
    0,  /*     DELETE => nothing */
    0,  /*     UPDATE => nothing */
    0,  /*        SET => nothing */
    0,  /* DEFERRABLE => nothing */
    0,  /*    FOREIGN => nothing */
    0,  /*       DROP => nothing */
    0,  /*      UNION => nothing */
    0,  /*        ALL => nothing */
    0,  /*     EXCEPT => nothing */
    0,  /*  INTERSECT => nothing */
    0,  /*     SELECT => nothing */
    0,  /*     VALUES => nothing */
    0,  /*   DISTINCT => nothing */
    0,  /*        DOT => nothing */
    0,  /*       FROM => nothing */
    0,  /*       JOIN => nothing */
    0,  /*      USING => nothing */
    0,  /*      ORDER => nothing */
    0,  /*      GROUP => nothing */
    0,  /*     HAVING => nothing */
    0,  /*      LIMIT => nothing */
    0,  /*      WHERE => nothing */
    0,  /*  RETURNING => nothing */
    0,  /*       INTO => nothing */
    0,  /*    NOTHING => nothing */
    0,  /*       BLOB => nothing */
    0,  /*      FLOAT => nothing */
    0,  /*    INTEGER => nothing */
    0,  /*   VARIABLE => nothing */
    0,  /*       CASE => nothing */
    0,  /*       WHEN => nothing */
    0,  /*       THEN => nothing */
    0,  /*       ELSE => nothing */
    0,  /*      INDEX => nothing */
    0,  /*      ALTER => nothing */
    0,  /*        ADD => nothing */
    0,  /*     WINDOW => nothing */
    0,  /*       OVER => nothing */
    0,  /*     FILTER => nothing */
];

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
**
** After the "shift" half of a SHIFTREDUCE action, the stateno field
** actually contains the reduce action for the second half of the
** SHIFTREDUCE.
*/
#[allow(non_camel_case_types)]
#[derive(Default)]
pub struct yyStackEntry {
    stateno: YYACTIONTYPE, /* The state-number, or reduce action in SHIFTREDUCE */
    major: YYCODETYPE,     /* The major token value.  This is the code
                            ** number for the token at this stack level */
    minor: YYMINORTYPE, /* The user-supplied minor token value.  This
                         ** is the value of the token  */
}

/* The state of the parser is completely contained in an instance of
** the following structure */
#[allow(non_camel_case_types)]
pub struct yyParser<'input> {
    yyidx: usize, /* Index to top element of the stack */
    #[cfg(feature = "YYTRACKMAXSTACKDEPTH")]
    yyhwm: usize, /* High-water mark of the stack */
    //#[cfg(not(feature = "YYNOERRORRECOVERY"))]
    yyerrcnt: i32, /* Shifts left before out of the error */
    pub ctx: Context<'input>,
    yystack: Vec<yyStackEntry>, /* The parser's stack */
}

use std::cmp::Ordering;
use std::ops::Neg;
impl yyParser<'_> {
    fn shift(&self, shift: i8) -> usize {
        assert!(shift <= 1);
        match shift.cmp(&0) {
            Ordering::Equal => self.yyidx,
            Ordering::Greater => self.yyidx + shift as usize,
            Ordering::Less => self.yyidx.checked_sub(shift.neg() as usize).unwrap(),
        }
    }

    fn yyidx_shift(&mut self, shift: i8) {
        match shift.cmp(&0) {
            Ordering::Greater => self.yyidx += shift as usize,
            Ordering::Less => self.yyidx = self.yyidx.checked_sub(shift.neg() as usize).unwrap(),
            Ordering::Equal => {}
        }
    }

    fn yy_move(&mut self, shift: i8) -> yyStackEntry {
        use std::mem::take;
        let idx = self.shift(shift);
        take(&mut self.yystack[idx])
    }

    fn push(&mut self, entry: yyStackEntry) {
        if self.yyidx == self.yystack.len() {
            self.yystack.push(entry);
        } else {
            self.yystack[self.yyidx] = entry;
        }
    }
}

use std::ops::{Index, IndexMut};
impl Index<i8> for yyParser<'_> {
    type Output = yyStackEntry;

    fn index(&self, shift: i8) -> &yyStackEntry {
        let idx = self.shift(shift);
        &self.yystack[idx]
    }
}
impl IndexMut<i8> for yyParser<'_> {
    fn index_mut(&mut self, shift: i8) -> &mut yyStackEntry {
        let idx = self.shift(shift);
        &mut self.yystack[idx]
    }
}

#[cfg(not(feature = "NDEBUG"))]
use log::Level::Debug;
#[cfg(not(feature = "NDEBUG"))]
static TARGET: &str = "sqlite3Parser";

/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
#[cfg(any(feature = "YYCOVERAGE", not(feature = "NDEBUG")))]
#[rustfmt::skip]
#[allow(non_upper_case_globals)]
static yyTokenName: [&str; 294] = [
  /*    0 */ "$",
  /*    1 */ "SEMI",
  /*    2 */ "EXPLAIN",
  /*    3 */ "QUERY",
  /*    4 */ "PLAN",
  /*    5 */ "BEGIN",
  /*    6 */ "TRANSACTION",
  /*    7 */ "DEFERRED",
  /*    8 */ "IMMEDIATE",
  /*    9 */ "EXCLUSIVE",
  /*   10 */ "COMMIT",
  /*   11 */ "END",
  /*   12 */ "ROLLBACK",
  /*   13 */ "SAVEPOINT",
  /*   14 */ "RELEASE",
  /*   15 */ "TO",
  /*   16 */ "TABLE",
  /*   17 */ "CREATE",
  /*   18 */ "IF",
  /*   19 */ "NOT",
  /*   20 */ "EXISTS",
  /*   21 */ "TEMP",
  /*   22 */ "LP",
  /*   23 */ "RP",
  /*   24 */ "AS",
  /*   25 */ "COMMA",
  /*   26 */ "WITHOUT",
  /*   27 */ "ABORT",
  /*   28 */ "ACTION",
  /*   29 */ "AFTER",
  /*   30 */ "ANALYZE",
  /*   31 */ "ASC",
  /*   32 */ "ATTACH",
  /*   33 */ "BEFORE",
  /*   34 */ "BY",
  /*   35 */ "CASCADE",
  /*   36 */ "CAST",
  /*   37 */ "CONFLICT",
  /*   38 */ "DATABASE",
  /*   39 */ "DESC",
  /*   40 */ "DETACH",
  /*   41 */ "EACH",
  /*   42 */ "FAIL",
  /*   43 */ "OR",
  /*   44 */ "AND",
  /*   45 */ "IS",
  /*   46 */ "ISNOT",
  /*   47 */ "MATCH",
  /*   48 */ "LIKE_KW",
  /*   49 */ "BETWEEN",
  /*   50 */ "IN",
  /*   51 */ "ISNULL",
  /*   52 */ "NOTNULL",
  /*   53 */ "NE",
  /*   54 */ "EQ",
  /*   55 */ "GT",
  /*   56 */ "LE",
  /*   57 */ "LT",
  /*   58 */ "GE",
  /*   59 */ "ESCAPE",
  /*   60 */ "ID",
  /*   61 */ "COLUMNKW",
  /*   62 */ "DO",
  /*   63 */ "FOR",
  /*   64 */ "IGNORE",
  /*   65 */ "INITIALLY",
  /*   66 */ "INSTEAD",
  /*   67 */ "NO",
  /*   68 */ "KEY",
  /*   69 */ "OF",
  /*   70 */ "OFFSET",
  /*   71 */ "PRAGMA",
  /*   72 */ "RAISE",
  /*   73 */ "RECURSIVE",
  /*   74 */ "REPLACE",
  /*   75 */ "RESTRICT",
  /*   76 */ "ROW",
  /*   77 */ "ROWS",
  /*   78 */ "TRIGGER",
  /*   79 */ "VACUUM",
  /*   80 */ "VIEW",
  /*   81 */ "VIRTUAL",
  /*   82 */ "WITH",
  /*   83 */ "NULLS",
  /*   84 */ "FIRST",
  /*   85 */ "LAST",
  /*   86 */ "CURRENT",
  /*   87 */ "FOLLOWING",
  /*   88 */ "PARTITION",
  /*   89 */ "PRECEDING",
  /*   90 */ "RANGE",
  /*   91 */ "UNBOUNDED",
  /*   92 */ "EXCLUDE",
  /*   93 */ "GROUPS",
  /*   94 */ "OTHERS",
  /*   95 */ "TIES",
  /*   96 */ "GENERATED",
  /*   97 */ "ALWAYS",
  /*   98 */ "MATERIALIZED",
  /*   99 */ "REINDEX",
  /*  100 */ "RENAME",
  /*  101 */ "CTIME_KW",
  /*  102 */ "ANY",
  /*  103 */ "BITAND",
  /*  104 */ "BITOR",
  /*  105 */ "LSHIFT",
  /*  106 */ "RSHIFT",
  /*  107 */ "PLUS",
  /*  108 */ "MINUS",
  /*  109 */ "STAR",
  /*  110 */ "SLASH",
  /*  111 */ "REM",
  /*  112 */ "CONCAT",
  /*  113 */ "PTR",
  /*  114 */ "COLLATE",
  /*  115 */ "BITNOT",
  /*  116 */ "ON",
  /*  117 */ "INDEXED",
  /*  118 */ "STRING",
  /*  119 */ "JOIN_KW",
  /*  120 */ "CONSTRAINT",
  /*  121 */ "DEFAULT",
  /*  122 */ "NULL",
  /*  123 */ "PRIMARY",
  /*  124 */ "UNIQUE",
  /*  125 */ "CHECK",
  /*  126 */ "REFERENCES",
  /*  127 */ "AUTOINCR",
  /*  128 */ "INSERT",
  /*  129 */ "DELETE",
  /*  130 */ "UPDATE",
  /*  131 */ "SET",
  /*  132 */ "DEFERRABLE",
  /*  133 */ "FOREIGN",
  /*  134 */ "DROP",
  /*  135 */ "UNION",
  /*  136 */ "ALL",
  /*  137 */ "EXCEPT",
  /*  138 */ "INTERSECT",
  /*  139 */ "SELECT",
  /*  140 */ "VALUES",
  /*  141 */ "DISTINCT",
  /*  142 */ "DOT",
  /*  143 */ "FROM",
  /*  144 */ "JOIN",
  /*  145 */ "USING",
  /*  146 */ "ORDER",
  /*  147 */ "GROUP",
  /*  148 */ "HAVING",
  /*  149 */ "LIMIT",
  /*  150 */ "WHERE",
  /*  151 */ "RETURNING",
  /*  152 */ "INTO",
  /*  153 */ "NOTHING",
  /*  154 */ "BLOB",
  /*  155 */ "FLOAT",
  /*  156 */ "INTEGER",
  /*  157 */ "VARIABLE",
  /*  158 */ "CASE",
  /*  159 */ "WHEN",
  /*  160 */ "THEN",
  /*  161 */ "ELSE",
  /*  162 */ "INDEX",
  /*  163 */ "ALTER",
  /*  164 */ "ADD",
  /*  165 */ "WINDOW",
  /*  166 */ "OVER",
  /*  167 */ "FILTER",
  /*  168 */ "input",
  /*  169 */ "cmdlist",
  /*  170 */ "ecmd",
  /*  171 */ "cmdx",
  /*  172 */ "explain",
  /*  173 */ "cmd",
  /*  174 */ "transtype",
  /*  175 */ "trans_opt",
  /*  176 */ "nm",
  /*  177 */ "savepoint_opt",
  /*  178 */ "createkw",
  /*  179 */ "temp",
  /*  180 */ "ifnotexists",
  /*  181 */ "fullname",
  /*  182 */ "create_table_args",
  /*  183 */ "columnlist",
  /*  184 */ "conslist_opt",
  /*  185 */ "table_option_set",
  /*  186 */ "select",
  /*  187 */ "table_option",
  /*  188 */ "columnname",
  /*  189 */ "carglist",
  /*  190 */ "typetoken",
  /*  191 */ "typename",
  /*  192 */ "signed",
  /*  193 */ "plus_num",
  /*  194 */ "minus_num",
  /*  195 */ "ccons",
  /*  196 */ "term",
  /*  197 */ "expr",
  /*  198 */ "onconf",
  /*  199 */ "sortorder",
  /*  200 */ "autoinc",
  /*  201 */ "eidlist_opt",
  /*  202 */ "refargs",
  /*  203 */ "defer_subclause",
  /*  204 */ "generated",
  /*  205 */ "refarg",
  /*  206 */ "refact",
  /*  207 */ "init_deferred_pred_opt",
  /*  208 */ "conslist",
  /*  209 */ "tconscomma",
  /*  210 */ "tcons",
  /*  211 */ "sortlist",
  /*  212 */ "eidlist",
  /*  213 */ "defer_subclause_opt",
  /*  214 */ "orconf",
  /*  215 */ "resolvetype",
  /*  216 */ "raisetype",
  /*  217 */ "ifexists",
  /*  218 */ "selectnowith",
  /*  219 */ "oneselect",
  /*  220 */ "wqlist",
  /*  221 */ "orderby_opt",
  /*  222 */ "limit_opt",
  /*  223 */ "multiselect_op",
  /*  224 */ "distinct",
  /*  225 */ "selcollist",
  /*  226 */ "from",
  /*  227 */ "where_opt",
  /*  228 */ "groupby_opt",
  /*  229 */ "window_clause",
  /*  230 */ "values",
  /*  231 */ "nexprlist",
  /*  232 */ "sclp",
  /*  233 */ "as",
  /*  234 */ "seltablist",
  /*  235 */ "stl_prefix",
  /*  236 */ "joinop",
  /*  237 */ "indexed_opt",
  /*  238 */ "on_using",
  /*  239 */ "exprlist",
  /*  240 */ "xfullname",
  /*  241 */ "idlist",
  /*  242 */ "nulls",
  /*  243 */ "having_opt",
  /*  244 */ "with",
  /*  245 */ "where_opt_ret",
  /*  246 */ "setlist",
  /*  247 */ "insert_cmd",
  /*  248 */ "idlist_opt",
  /*  249 */ "upsert",
  /*  250 */ "returning",
  /*  251 */ "filter_over",
  /*  252 */ "likeop",
  /*  253 */ "between_op",
  /*  254 */ "in_op",
  /*  255 */ "paren_exprlist",
  /*  256 */ "case_operand",
  /*  257 */ "case_exprlist",
  /*  258 */ "case_else",
  /*  259 */ "uniqueflag",
  /*  260 */ "collate",
  /*  261 */ "vinto",
  /*  262 */ "nmnum",
  /*  263 */ "trigger_time",
  /*  264 */ "trigger_event",
  /*  265 */ "foreach_clause",
  /*  266 */ "when_clause",
  /*  267 */ "trigger_cmd_list",
  /*  268 */ "trigger_cmd",
  /*  269 */ "trnm",
  /*  270 */ "tridxby",
  /*  271 */ "database_kw_opt",
  /*  272 */ "key_opt",
  /*  273 */ "kwcolumn_opt",
  /*  274 */ "create_vtab",
  /*  275 */ "vtabarglist",
  /*  276 */ "vtabarg",
  /*  277 */ "vtabargtoken",
  /*  278 */ "lp",
  /*  279 */ "anylist",
  /*  280 */ "wqitem",
  /*  281 */ "wqas",
  /*  282 */ "windowdefn_list",
  /*  283 */ "windowdefn",
  /*  284 */ "window",
  /*  285 */ "frame_opt",
  /*  286 */ "filter_clause",
  /*  287 */ "over_clause",
  /*  288 */ "range_or_rows",
  /*  289 */ "frame_bound",
  /*  290 */ "frame_bound_s",
  /*  291 */ "frame_bound_e",
  /*  292 */ "frame_exclude_opt",
  /*  293 */ "frame_exclude",

];

/* For tracing reduce actions, the names of all rules are required.
*/
#[cfg(not(feature = "NDEBUG"))]
#[rustfmt::skip]
#[allow(non_upper_case_globals)]
static yyRuleName: [&str; YYNRULE] = [
 /*   0 */ "explain ::= EXPLAIN",
 /*   1 */ "explain ::= EXPLAIN QUERY PLAN",
 /*   2 */ "cmdx ::= cmd",
 /*   3 */ "cmd ::= BEGIN transtype trans_opt",
 /*   4 */ "trans_opt ::=",
 /*   5 */ "trans_opt ::= TRANSACTION",
 /*   6 */ "trans_opt ::= TRANSACTION nm",
 /*   7 */ "transtype ::=",
 /*   8 */ "transtype ::= DEFERRED",
 /*   9 */ "transtype ::= IMMEDIATE",
 /*  10 */ "transtype ::= EXCLUSIVE",
 /*  11 */ "cmd ::= COMMIT|END trans_opt",
 /*  12 */ "cmd ::= ROLLBACK trans_opt",
 /*  13 */ "cmd ::= SAVEPOINT nm",
 /*  14 */ "cmd ::= RELEASE savepoint_opt nm",
 /*  15 */ "cmd ::= ROLLBACK trans_opt TO savepoint_opt nm",
 /*  16 */ "cmd ::= createkw temp TABLE ifnotexists fullname create_table_args",
 /*  17 */ "ifnotexists ::=",
 /*  18 */ "ifnotexists ::= IF NOT EXISTS",
 /*  19 */ "temp ::= TEMP",
 /*  20 */ "temp ::=",
 /*  21 */ "create_table_args ::= LP columnlist conslist_opt RP table_option_set",
 /*  22 */ "create_table_args ::= AS select",
 /*  23 */ "table_option_set ::=",
 /*  24 */ "table_option_set ::= table_option_set COMMA table_option",
 /*  25 */ "table_option ::= WITHOUT nm",
 /*  26 */ "table_option ::= nm",
 /*  27 */ "columnlist ::= columnlist COMMA columnname carglist",
 /*  28 */ "columnlist ::= columnname carglist",
 /*  29 */ "columnname ::= nm typetoken",
 /*  30 */ "nm ::= ID|INDEXED|JOIN_KW",
 /*  31 */ "nm ::= STRING",
 /*  32 */ "typetoken ::=",
 /*  33 */ "typetoken ::= typename",
 /*  34 */ "typetoken ::= typename LP signed RP",
 /*  35 */ "typetoken ::= typename LP signed COMMA signed RP",
 /*  36 */ "typename ::= ID|STRING",
 /*  37 */ "typename ::= typename ID|STRING",
 /*  38 */ "carglist ::= carglist ccons",
 /*  39 */ "carglist ::=",
 /*  40 */ "ccons ::= CONSTRAINT nm",
 /*  41 */ "ccons ::= DEFAULT term",
 /*  42 */ "ccons ::= DEFAULT LP expr RP",
 /*  43 */ "ccons ::= DEFAULT PLUS term",
 /*  44 */ "ccons ::= DEFAULT MINUS term",
 /*  45 */ "ccons ::= DEFAULT ID|INDEXED",
 /*  46 */ "ccons ::= NULL onconf",
 /*  47 */ "ccons ::= NOT NULL onconf",
 /*  48 */ "ccons ::= PRIMARY KEY sortorder onconf autoinc",
 /*  49 */ "ccons ::= UNIQUE onconf",
 /*  50 */ "ccons ::= CHECK LP expr RP",
 /*  51 */ "ccons ::= REFERENCES nm eidlist_opt refargs",
 /*  52 */ "ccons ::= defer_subclause",
 /*  53 */ "ccons ::= COLLATE ID|STRING",
 /*  54 */ "ccons ::= GENERATED ALWAYS AS generated",
 /*  55 */ "ccons ::= AS generated",
 /*  56 */ "generated ::= LP expr RP",
 /*  57 */ "generated ::= LP expr RP ID",
 /*  58 */ "autoinc ::=",
 /*  59 */ "autoinc ::= AUTOINCR",
 /*  60 */ "refargs ::=",
 /*  61 */ "refargs ::= refargs refarg",
 /*  62 */ "refarg ::= MATCH nm",
 /*  63 */ "refarg ::= ON INSERT refact",
 /*  64 */ "refarg ::= ON DELETE refact",
 /*  65 */ "refarg ::= ON UPDATE refact",
 /*  66 */ "refact ::= SET NULL",
 /*  67 */ "refact ::= SET DEFAULT",
 /*  68 */ "refact ::= CASCADE",
 /*  69 */ "refact ::= RESTRICT",
 /*  70 */ "refact ::= NO ACTION",
 /*  71 */ "defer_subclause ::= NOT DEFERRABLE init_deferred_pred_opt",
 /*  72 */ "defer_subclause ::= DEFERRABLE init_deferred_pred_opt",
 /*  73 */ "init_deferred_pred_opt ::=",
 /*  74 */ "init_deferred_pred_opt ::= INITIALLY DEFERRED",
 /*  75 */ "init_deferred_pred_opt ::= INITIALLY IMMEDIATE",
 /*  76 */ "conslist_opt ::=",
 /*  77 */ "conslist_opt ::= COMMA conslist",
 /*  78 */ "conslist ::= conslist tconscomma tcons",
 /*  79 */ "conslist ::= tcons",
 /*  80 */ "tconscomma ::= COMMA",
 /*  81 */ "tcons ::= CONSTRAINT nm",
 /*  82 */ "tcons ::= PRIMARY KEY LP sortlist autoinc RP onconf",
 /*  83 */ "tcons ::= UNIQUE LP sortlist RP onconf",
 /*  84 */ "tcons ::= CHECK LP expr RP onconf",
 /*  85 */ "tcons ::= FOREIGN KEY LP eidlist RP REFERENCES nm eidlist_opt refargs defer_subclause_opt",
 /*  86 */ "defer_subclause_opt ::=",
 /*  87 */ "defer_subclause_opt ::= defer_subclause",
 /*  88 */ "onconf ::=",
 /*  89 */ "onconf ::= ON CONFLICT resolvetype",
 /*  90 */ "orconf ::=",
 /*  91 */ "orconf ::= OR resolvetype",
 /*  92 */ "resolvetype ::= IGNORE",
 /*  93 */ "resolvetype ::= REPLACE",
 /*  94 */ "cmd ::= DROP TABLE ifexists fullname",
 /*  95 */ "ifexists ::= IF EXISTS",
 /*  96 */ "ifexists ::=",
 /*  97 */ "cmd ::= createkw temp VIEW ifnotexists fullname eidlist_opt AS select",
 /*  98 */ "cmd ::= DROP VIEW ifexists fullname",
 /*  99 */ "cmd ::= select",
 /* 100 */ "select ::= WITH wqlist selectnowith orderby_opt limit_opt",
 /* 101 */ "select ::= WITH RECURSIVE wqlist selectnowith orderby_opt limit_opt",
 /* 102 */ "select ::= selectnowith orderby_opt limit_opt",
 /* 103 */ "selectnowith ::= oneselect",
 /* 104 */ "selectnowith ::= selectnowith multiselect_op oneselect",
 /* 105 */ "multiselect_op ::= UNION",
 /* 106 */ "multiselect_op ::= UNION ALL",
 /* 107 */ "multiselect_op ::= EXCEPT",
 /* 108 */ "multiselect_op ::= INTERSECT",
 /* 109 */ "oneselect ::= SELECT distinct selcollist from where_opt groupby_opt",
 /* 110 */ "oneselect ::= SELECT distinct selcollist from where_opt groupby_opt window_clause",
 /* 111 */ "oneselect ::= values",
 /* 112 */ "values ::= VALUES LP nexprlist RP",
 /* 113 */ "values ::= values COMMA LP nexprlist RP",
 /* 114 */ "distinct ::= DISTINCT",
 /* 115 */ "distinct ::= ALL",
 /* 116 */ "distinct ::=",
 /* 117 */ "sclp ::=",
 /* 118 */ "selcollist ::= sclp expr as",
 /* 119 */ "selcollist ::= sclp STAR",
 /* 120 */ "selcollist ::= sclp nm DOT STAR",
 /* 121 */ "as ::= AS nm",
 /* 122 */ "as ::= ID|STRING",
 /* 123 */ "as ::=",
 /* 124 */ "from ::=",
 /* 125 */ "from ::= FROM seltablist",
 /* 126 */ "stl_prefix ::= seltablist joinop",
 /* 127 */ "stl_prefix ::=",
 /* 128 */ "seltablist ::= stl_prefix fullname as indexed_opt on_using",
 /* 129 */ "seltablist ::= stl_prefix fullname LP exprlist RP as on_using",
 /* 130 */ "seltablist ::= stl_prefix LP select RP as on_using",
 /* 131 */ "seltablist ::= stl_prefix LP seltablist RP as on_using",
 /* 132 */ "fullname ::= nm",
 /* 133 */ "fullname ::= nm DOT nm",
 /* 134 */ "xfullname ::= nm",
 /* 135 */ "xfullname ::= nm DOT nm",
 /* 136 */ "xfullname ::= nm DOT nm AS nm",
 /* 137 */ "xfullname ::= nm AS nm",
 /* 138 */ "joinop ::= COMMA",
 /* 139 */ "joinop ::= JOIN",
 /* 140 */ "joinop ::= JOIN_KW JOIN",
 /* 141 */ "joinop ::= JOIN_KW nm JOIN",
 /* 142 */ "joinop ::= JOIN_KW nm nm JOIN",
 /* 143 */ "on_using ::= ON expr",
 /* 144 */ "on_using ::= USING LP idlist RP",
 /* 145 */ "on_using ::=",
 /* 146 */ "indexed_opt ::=",
 /* 147 */ "indexed_opt ::= INDEXED BY nm",
 /* 148 */ "indexed_opt ::= NOT INDEXED",
 /* 149 */ "orderby_opt ::=",
 /* 150 */ "orderby_opt ::= ORDER BY sortlist",
 /* 151 */ "sortlist ::= sortlist COMMA expr sortorder nulls",
 /* 152 */ "sortlist ::= expr sortorder nulls",
 /* 153 */ "sortorder ::= ASC",
 /* 154 */ "sortorder ::= DESC",
 /* 155 */ "sortorder ::=",
 /* 156 */ "nulls ::= NULLS FIRST",
 /* 157 */ "nulls ::= NULLS LAST",
 /* 158 */ "nulls ::=",
 /* 159 */ "groupby_opt ::=",
 /* 160 */ "groupby_opt ::= GROUP BY nexprlist having_opt",
 /* 161 */ "having_opt ::=",
 /* 162 */ "having_opt ::= HAVING expr",
 /* 163 */ "limit_opt ::=",
 /* 164 */ "limit_opt ::= LIMIT expr",
 /* 165 */ "limit_opt ::= LIMIT expr OFFSET expr",
 /* 166 */ "limit_opt ::= LIMIT expr COMMA expr",
 /* 167 */ "cmd ::= with DELETE FROM xfullname indexed_opt where_opt_ret orderby_opt limit_opt",
 /* 168 */ "where_opt ::=",
 /* 169 */ "where_opt ::= WHERE expr",
 /* 170 */ "where_opt_ret ::=",
 /* 171 */ "where_opt_ret ::= WHERE expr",
 /* 172 */ "where_opt_ret ::= RETURNING selcollist",
 /* 173 */ "where_opt_ret ::= WHERE expr RETURNING selcollist",
 /* 174 */ "cmd ::= with UPDATE orconf xfullname indexed_opt SET setlist from where_opt_ret orderby_opt limit_opt",
 /* 175 */ "setlist ::= setlist COMMA nm EQ expr",
 /* 176 */ "setlist ::= setlist COMMA LP idlist RP EQ expr",
 /* 177 */ "setlist ::= nm EQ expr",
 /* 178 */ "setlist ::= LP idlist RP EQ expr",
 /* 179 */ "cmd ::= with insert_cmd INTO xfullname idlist_opt select upsert",
 /* 180 */ "cmd ::= with insert_cmd INTO xfullname idlist_opt DEFAULT VALUES returning",
 /* 181 */ "upsert ::=",
 /* 182 */ "upsert ::= RETURNING selcollist",
 /* 183 */ "upsert ::= ON CONFLICT LP sortlist RP where_opt DO UPDATE SET setlist where_opt upsert",
 /* 184 */ "upsert ::= ON CONFLICT LP sortlist RP where_opt DO NOTHING upsert",
 /* 185 */ "upsert ::= ON CONFLICT DO NOTHING returning",
 /* 186 */ "upsert ::= ON CONFLICT DO UPDATE SET setlist where_opt returning",
 /* 187 */ "returning ::= RETURNING selcollist",
 /* 188 */ "returning ::=",
 /* 189 */ "insert_cmd ::= INSERT orconf",
 /* 190 */ "insert_cmd ::= REPLACE",
 /* 191 */ "idlist_opt ::=",
 /* 192 */ "idlist_opt ::= LP idlist RP",
 /* 193 */ "idlist ::= idlist COMMA nm",
 /* 194 */ "idlist ::= nm",
 /* 195 */ "expr ::= LP expr RP",
 /* 196 */ "expr ::= ID|INDEXED|JOIN_KW",
 /* 197 */ "expr ::= nm DOT nm",
 /* 198 */ "expr ::= nm DOT nm DOT nm",
 /* 199 */ "term ::= NULL",
 /* 200 */ "term ::= BLOB",
 /* 201 */ "term ::= STRING",
 /* 202 */ "term ::= FLOAT|INTEGER",
 /* 203 */ "expr ::= VARIABLE",
 /* 204 */ "expr ::= expr COLLATE ID|STRING",
 /* 205 */ "expr ::= CAST LP expr AS typetoken RP",
 /* 206 */ "expr ::= ID|INDEXED|JOIN_KW LP distinct exprlist RP",
 /* 207 */ "expr ::= ID|INDEXED|JOIN_KW LP distinct exprlist ORDER BY sortlist RP",
 /* 208 */ "expr ::= ID|INDEXED|JOIN_KW LP STAR RP",
 /* 209 */ "expr ::= ID|INDEXED|JOIN_KW LP distinct exprlist RP filter_over",
 /* 210 */ "expr ::= ID|INDEXED|JOIN_KW LP distinct exprlist ORDER BY sortlist RP filter_over",
 /* 211 */ "expr ::= ID|INDEXED|JOIN_KW LP STAR RP filter_over",
 /* 212 */ "term ::= CTIME_KW",
 /* 213 */ "expr ::= LP nexprlist COMMA expr RP",
 /* 214 */ "expr ::= expr AND expr",
 /* 215 */ "expr ::= expr OR expr",
 /* 216 */ "expr ::= expr LT|GT|GE|LE expr",
 /* 217 */ "expr ::= expr EQ|NE expr",
 /* 218 */ "expr ::= expr BITAND|BITOR|LSHIFT|RSHIFT expr",
 /* 219 */ "expr ::= expr PLUS|MINUS expr",
 /* 220 */ "expr ::= expr STAR|SLASH|REM expr",
 /* 221 */ "expr ::= expr CONCAT expr",
 /* 222 */ "likeop ::= LIKE_KW|MATCH",
 /* 223 */ "likeop ::= NOT LIKE_KW|MATCH",
 /* 224 */ "expr ::= expr likeop expr",
 /* 225 */ "expr ::= expr likeop expr ESCAPE expr",
 /* 226 */ "expr ::= expr ISNULL|NOTNULL",
 /* 227 */ "expr ::= expr NOT NULL",
 /* 228 */ "expr ::= expr IS expr",
 /* 229 */ "expr ::= expr IS NOT expr",
 /* 230 */ "expr ::= expr IS NOT DISTINCT FROM expr",
 /* 231 */ "expr ::= expr IS DISTINCT FROM expr",
 /* 232 */ "expr ::= NOT expr",
 /* 233 */ "expr ::= BITNOT expr",
 /* 234 */ "expr ::= PLUS|MINUS expr",
 /* 235 */ "expr ::= expr PTR expr",
 /* 236 */ "between_op ::= BETWEEN",
 /* 237 */ "between_op ::= NOT BETWEEN",
 /* 238 */ "expr ::= expr between_op expr AND expr",
 /* 239 */ "in_op ::= IN",
 /* 240 */ "in_op ::= NOT IN",
 /* 241 */ "expr ::= expr in_op LP exprlist RP",
 /* 242 */ "expr ::= LP select RP",
 /* 243 */ "expr ::= expr in_op LP select RP",
 /* 244 */ "expr ::= expr in_op fullname paren_exprlist",
 /* 245 */ "expr ::= EXISTS LP select RP",
 /* 246 */ "expr ::= CASE case_operand case_exprlist case_else END",
 /* 247 */ "case_exprlist ::= case_exprlist WHEN expr THEN expr",
 /* 248 */ "case_exprlist ::= WHEN expr THEN expr",
 /* 249 */ "case_else ::= ELSE expr",
 /* 250 */ "case_else ::=",
 /* 251 */ "case_operand ::= expr",
 /* 252 */ "case_operand ::=",
 /* 253 */ "exprlist ::= nexprlist",
 /* 254 */ "exprlist ::=",
 /* 255 */ "nexprlist ::= nexprlist COMMA expr",
 /* 256 */ "nexprlist ::= expr",
 /* 257 */ "paren_exprlist ::=",
 /* 258 */ "paren_exprlist ::= LP exprlist RP",
 /* 259 */ "cmd ::= createkw uniqueflag INDEX ifnotexists fullname ON nm LP sortlist RP where_opt",
 /* 260 */ "uniqueflag ::= UNIQUE",
 /* 261 */ "uniqueflag ::=",
 /* 262 */ "eidlist_opt ::=",
 /* 263 */ "eidlist_opt ::= LP eidlist RP",
 /* 264 */ "eidlist ::= eidlist COMMA nm collate sortorder",
 /* 265 */ "eidlist ::= nm collate sortorder",
 /* 266 */ "collate ::=",
 /* 267 */ "collate ::= COLLATE ID|STRING",
 /* 268 */ "cmd ::= DROP INDEX ifexists fullname",
 /* 269 */ "cmd ::= VACUUM vinto",
 /* 270 */ "cmd ::= VACUUM nm vinto",
 /* 271 */ "vinto ::= INTO expr",
 /* 272 */ "vinto ::=",
 /* 273 */ "cmd ::= PRAGMA fullname",
 /* 274 */ "cmd ::= PRAGMA fullname EQ nmnum",
 /* 275 */ "cmd ::= PRAGMA fullname LP nmnum RP",
 /* 276 */ "cmd ::= PRAGMA fullname EQ minus_num",
 /* 277 */ "cmd ::= PRAGMA fullname LP minus_num RP",
 /* 278 */ "nmnum ::= nm",
 /* 279 */ "nmnum ::= ON",
 /* 280 */ "nmnum ::= DELETE",
 /* 281 */ "nmnum ::= DEFAULT",
 /* 282 */ "plus_num ::= PLUS INTEGER|FLOAT",
 /* 283 */ "plus_num ::= INTEGER|FLOAT",
 /* 284 */ "minus_num ::= MINUS INTEGER|FLOAT",
 /* 285 */ "cmd ::= createkw temp TRIGGER ifnotexists fullname trigger_time trigger_event ON fullname foreach_clause when_clause BEGIN trigger_cmd_list END",
 /* 286 */ "trigger_time ::= BEFORE",
 /* 287 */ "trigger_time ::= AFTER",
 /* 288 */ "trigger_time ::= INSTEAD OF",
 /* 289 */ "trigger_time ::=",
 /* 290 */ "trigger_event ::= DELETE",
 /* 291 */ "trigger_event ::= INSERT",
 /* 292 */ "trigger_event ::= UPDATE",
 /* 293 */ "trigger_event ::= UPDATE OF idlist",
 /* 294 */ "foreach_clause ::=",
 /* 295 */ "foreach_clause ::= FOR EACH ROW",
 /* 296 */ "when_clause ::=",
 /* 297 */ "when_clause ::= WHEN expr",
 /* 298 */ "trigger_cmd_list ::= trigger_cmd_list trigger_cmd SEMI",
 /* 299 */ "trigger_cmd_list ::= trigger_cmd SEMI",
 /* 300 */ "trnm ::= nm DOT nm",
 /* 301 */ "tridxby ::= INDEXED BY nm",
 /* 302 */ "tridxby ::= NOT INDEXED",
 /* 303 */ "trigger_cmd ::= UPDATE orconf trnm tridxby SET setlist from where_opt",
 /* 304 */ "trigger_cmd ::= insert_cmd INTO trnm idlist_opt select upsert",
 /* 305 */ "trigger_cmd ::= DELETE FROM trnm tridxby where_opt",
 /* 306 */ "trigger_cmd ::= select",
 /* 307 */ "expr ::= RAISE LP IGNORE RP",
 /* 308 */ "expr ::= RAISE LP raisetype COMMA expr RP",
 /* 309 */ "raisetype ::= ROLLBACK",
 /* 310 */ "raisetype ::= ABORT",
 /* 311 */ "raisetype ::= FAIL",
 /* 312 */ "cmd ::= DROP TRIGGER ifexists fullname",
 /* 313 */ "cmd ::= ATTACH database_kw_opt expr AS expr key_opt",
 /* 314 */ "cmd ::= DETACH database_kw_opt expr",
 /* 315 */ "key_opt ::=",
 /* 316 */ "key_opt ::= KEY expr",
 /* 317 */ "cmd ::= REINDEX",
 /* 318 */ "cmd ::= REINDEX fullname",
 /* 319 */ "cmd ::= ANALYZE",
 /* 320 */ "cmd ::= ANALYZE fullname",
 /* 321 */ "cmd ::= ALTER TABLE fullname RENAME TO nm",
 /* 322 */ "cmd ::= ALTER TABLE fullname ADD kwcolumn_opt columnname carglist",
 /* 323 */ "cmd ::= ALTER TABLE fullname RENAME kwcolumn_opt nm TO nm",
 /* 324 */ "cmd ::= ALTER TABLE fullname DROP kwcolumn_opt nm",
 /* 325 */ "cmd ::= create_vtab",
 /* 326 */ "cmd ::= create_vtab LP vtabarglist RP",
 /* 327 */ "create_vtab ::= createkw VIRTUAL TABLE ifnotexists fullname USING nm",
 /* 328 */ "vtabarg ::=",
 /* 329 */ "vtabargtoken ::= ANY",
 /* 330 */ "vtabargtoken ::= lp anylist RP",
 /* 331 */ "lp ::= LP",
 /* 332 */ "with ::=",
 /* 333 */ "with ::= WITH wqlist",
 /* 334 */ "with ::= WITH RECURSIVE wqlist",
 /* 335 */ "wqas ::= AS",
 /* 336 */ "wqas ::= AS MATERIALIZED",
 /* 337 */ "wqas ::= AS NOT MATERIALIZED",
 /* 338 */ "wqitem ::= nm eidlist_opt wqas LP select RP",
 /* 339 */ "wqlist ::= wqitem",
 /* 340 */ "wqlist ::= wqlist COMMA wqitem",
 /* 341 */ "windowdefn_list ::= windowdefn",
 /* 342 */ "windowdefn_list ::= windowdefn_list COMMA windowdefn",
 /* 343 */ "windowdefn ::= nm AS LP window RP",
 /* 344 */ "window ::= PARTITION BY nexprlist orderby_opt frame_opt",
 /* 345 */ "window ::= nm PARTITION BY nexprlist orderby_opt frame_opt",
 /* 346 */ "window ::= ORDER BY sortlist frame_opt",
 /* 347 */ "window ::= nm ORDER BY sortlist frame_opt",
 /* 348 */ "window ::= frame_opt",
 /* 349 */ "window ::= nm frame_opt",
 /* 350 */ "frame_opt ::=",
 /* 351 */ "frame_opt ::= range_or_rows frame_bound_s frame_exclude_opt",
 /* 352 */ "frame_opt ::= range_or_rows BETWEEN frame_bound_s AND frame_bound_e frame_exclude_opt",
 /* 353 */ "range_or_rows ::= RANGE",
 /* 354 */ "range_or_rows ::= ROWS",
 /* 355 */ "range_or_rows ::= GROUPS",
 /* 356 */ "frame_bound_s ::= frame_bound",
 /* 357 */ "frame_bound_s ::= UNBOUNDED PRECEDING",
 /* 358 */ "frame_bound_e ::= frame_bound",
 /* 359 */ "frame_bound_e ::= UNBOUNDED FOLLOWING",
 /* 360 */ "frame_bound ::= expr PRECEDING",
 /* 361 */ "frame_bound ::= CURRENT ROW",
 /* 362 */ "frame_bound ::= expr FOLLOWING",
 /* 363 */ "frame_exclude_opt ::=",
 /* 364 */ "frame_exclude_opt ::= EXCLUDE frame_exclude",
 /* 365 */ "frame_exclude ::= NO OTHERS",
 /* 366 */ "frame_exclude ::= CURRENT ROW",
 /* 367 */ "frame_exclude ::= GROUP",
 /* 368 */ "frame_exclude ::= TIES",
 /* 369 */ "window_clause ::= WINDOW windowdefn_list",
 /* 370 */ "filter_over ::= filter_clause over_clause",
 /* 371 */ "filter_over ::= over_clause",
 /* 372 */ "filter_over ::= filter_clause",
 /* 373 */ "over_clause ::= OVER LP window RP",
 /* 374 */ "over_clause ::= OVER nm",
 /* 375 */ "filter_clause ::= FILTER LP WHERE expr RP",
 /* 376 */ "input ::= cmdlist",
 /* 377 */ "cmdlist ::= cmdlist ecmd",
 /* 378 */ "cmdlist ::= ecmd",
 /* 379 */ "ecmd ::= SEMI",
 /* 380 */ "ecmd ::= cmdx SEMI",
 /* 381 */ "ecmd ::= explain cmdx SEMI",
 /* 382 */ "savepoint_opt ::= SAVEPOINT",
 /* 383 */ "savepoint_opt ::=",
 /* 384 */ "createkw ::= CREATE",
 /* 385 */ "table_option_set ::= table_option",
 /* 386 */ "signed ::= plus_num",
 /* 387 */ "signed ::= minus_num",
 /* 388 */ "tconscomma ::=",
 /* 389 */ "resolvetype ::= raisetype",
 /* 390 */ "sclp ::= selcollist COMMA",
 /* 391 */ "expr ::= term",
 /* 392 */ "nmnum ::= plus_num",
 /* 393 */ "trnm ::= nm",
 /* 394 */ "tridxby ::=",
 /* 395 */ "database_kw_opt ::= DATABASE",
 /* 396 */ "database_kw_opt ::=",
 /* 397 */ "kwcolumn_opt ::=",
 /* 398 */ "kwcolumn_opt ::= COLUMNKW",
 /* 399 */ "vtabarglist ::= vtabarg",
 /* 400 */ "vtabarglist ::= vtabarglist COMMA vtabarg",
 /* 401 */ "vtabarg ::= vtabarg vtabargtoken",
 /* 402 */ "anylist ::=",
 /* 403 */ "anylist ::= anylist LP anylist RP",
 /* 404 */ "anylist ::= anylist ANY",
];

/*
** Try to increase the size of the parser stack.  Return the number
** of errors.  Return 0 on success.
*/
impl yyParser<'_> {
    fn yy_grow_stack_if_needed(&mut self) -> bool {
        false
    }
    fn yy_grow_stack_for_push(&mut self) -> bool {
        // yystack is not prefilled with zero value like in C.
        if self.yyidx == self.yystack.len() {
            self.yystack.push(yyStackEntry::default());
        } else if self.yyidx + 1 == self.yystack.len() {
            self.yystack.push(yyStackEntry::default());
        }
        false
    }
}

/* Initialize a new parser.
*/
impl yyParser<'_> {
    pub fn new(
        ctx: Context,
    ) -> yyParser {
        let mut p = yyParser {
            yyidx: 0,
            #[cfg(feature = "YYTRACKMAXSTACKDEPTH")]
            yyhwm: 0,
            yystack: Vec::new(),
            //#[cfg(not(feature = "YYNOERRORRECOVERY"))]
            yyerrcnt: -1,
        ctx,
        };
        p.push(yyStackEntry::default());
        p
    }
}

/*
** Pop the parser's stack once.
*/
impl yyParser<'_> {
    fn yy_pop_parser_stack(&mut self) {
        use std::mem::take;
        let yytos = take(&mut self.yystack[self.yyidx]);
        self.yyidx = self.yyidx.checked_sub(1).unwrap();
        //assert_eq!(self.yyidx+1, self.yystack.len());
        #[cfg(not(feature = "NDEBUG"))]
        {
            debug!(
                target: TARGET,
                "Popping {}", yyTokenName[yytos.major as usize]
            );
        }
    }
}

/*
** Clear all secondary memory allocations from the parser
*/
impl yyParser<'_> {
    #[allow(non_snake_case)]
    pub fn sqlite3ParserFinalize(&mut self) {
        while self.yyidx > 0 {
            self.yy_pop_parser_stack();
        }
        // TODO check all elements remaining in yystack are yyinit()
    }
}

/*
** Return the peak depth of the stack for a parser.
*/
#[cfg(feature = "YYTRACKMAXSTACKDEPTH")]
impl yyParser<'_> {
    #[allow(non_snake_case)]
    pub fn sqlite3ParserStackPeak(&self) -> usize {
        self.yyhwm
    }
    fn yyhwm_incr(&mut self) {
        if self.yyidx > self.yyhwm {
            self.yyhwm += 1;
            assert_eq!(self.yyhwm, self.yyidx);
        }
    }
}
#[cfg(not(feature = "YYTRACKMAXSTACKDEPTH"))]
impl yyParser<'_> {
    #[inline]
    fn yyhwm_incr(&mut self) {}
}

/* This array of booleans keeps track of the parser statement
** coverage.  The element yycoverage[X][Y] is set when the parser
** is in state X and has a lookahead token Y.  In a well-tested
** systems, every element of this matrix should end up being set.
*/
#[cfg(feature = "YYCOVERAGE")]
static yycoverage: [[bool; YYNTOKEN]; YYNSTATE] = [];

/*
** Write into out a description of every state/lookahead combination that
**
**   (1)  has not been used by the parser, and
**   (2)  is not a syntax error.
**
** Return the number of missed state/lookahead combinations.
*/
#[cfg(feature = "YYCOVERAGE")]
fn sqlite3ParserCoverage(/*FILE *out*/) -> i32 {
    //int stateno, iLookAhead, i;
    let mut nMissed = 0;
    /*for(stateno=0; stateno<YYNSTATE; stateno++){
      i = yy_shift_ofst[stateno];
      for(iLookAhead=0; iLookAhead<YYNTOKEN; iLookAhead++){
        if( yy_lookahead[i+iLookAhead]!=iLookAhead ) continue;
        if( yycoverage[stateno][iLookAhead]==0 ) nMissed++;
        if( out ){
          fprintf(out,"State %d lookahead %s %s\n", stateno,
                  yyTokenName[iLookAhead],
                  yycoverage[stateno][iLookAhead] ? "ok" : "missed");
        }
      }
    }*/
    return nMissed;
}

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
*/
#[allow(non_snake_case)]
fn yy_find_shift_action(
    mut iLookAhead: YYCODETYPE, /* The look-ahead token */
    stateno: YYACTIONTYPE,      /* Current state number */
) -> YYACTIONTYPE {
    if stateno > YY_MAX_SHIFT {
        return stateno;
    }
    assert!(stateno <= YY_SHIFT_COUNT);
    #[cfg(feature = "YYCOVERAGE")]
    {
        //yycoverage[stateno][iLookAhead] = true;
    }
    loop {
        let mut i = yy_shift_ofst[stateno as usize] as usize;
        assert!(i <= YY_ACTTAB_COUNT!());
        assert!(i + usize::from(YYNTOKEN) <= yy_lookahead.len());
        assert_ne!(iLookAhead, YYNOCODE);
        assert!((iLookAhead as YYACTIONTYPE) < YYNTOKEN);
        i += iLookAhead as usize;
        if yy_lookahead[i] != iLookAhead {
            if YYFALLBACK {
                let iFallback = yyFallback[iLookAhead as usize]; /* Fallback token */
                if iFallback != 0 {
                    #[cfg(not(feature = "NDEBUG"))]
                    {
                        debug!(
                            target: TARGET,
                            "FALLBACK {} => {}",
                            yyTokenName[iLookAhead as usize],
                            yyTokenName[iFallback as usize]
                        );
                    }
                    assert_eq!(yyFallback[iFallback as usize], 0); /* Fallback loop must terminate */
                    iLookAhead = iFallback;
                    continue;
                }
            }
            if YYWILDCARD > 0 {
                let j = i - iLookAhead as usize + YYWILDCARD as usize;
                if yy_lookahead[j] == YYWILDCARD && iLookAhead > 0 {
                    #[cfg(not(feature = "NDEBUG"))]
                    {
                        debug!(
                            target: TARGET,
                            "WILDCARD {} => {}",
                            yyTokenName[iLookAhead as usize],
                            yyTokenName[YYWILDCARD as usize]
                        );
                    }
                    return yy_action[j];
                }
            } /* YYWILDCARD */
            return yy_default[stateno as usize];
        } else {
            return yy_action[i];
        }
    }
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
*/
#[allow(non_snake_case)]
fn yy_find_reduce_action(
    stateno: YYACTIONTYPE,  /* Current state number */
    iLookAhead: YYCODETYPE, /* The look-ahead token */
) -> YYACTIONTYPE {
    if YYERRORSYMBOL > 0 {
        if stateno > YY_REDUCE_COUNT {
            return yy_default[stateno as usize];
        }
    } else {
        assert!(stateno <= YY_REDUCE_COUNT);
    }
    let mut i: i32 = yy_reduce_ofst[stateno as usize].into();
    assert_ne!(iLookAhead, YYNOCODE);
    i += i32::from(iLookAhead);
    if YYERRORSYMBOL > 0 {
        if !(0..YY_ACTTAB_COUNT!()).contains(&i) || yy_lookahead[i as usize] != iLookAhead {
            return yy_default[stateno as usize];
        }
    } else {
        assert!((0..YY_ACTTAB_COUNT!()).contains(&i));
        assert_eq!(yy_lookahead[i as usize], iLookAhead);
    }
    yy_action[i as usize]
}

        /******** Begin %stack_overflow code ******************************************
        ******** End %stack_overflow code ********************************************/

/*
** Print tracing information for a SHIFT action
*/
impl yyParser<'_> {
    #[allow(non_snake_case)]
    fn yyTraceShift(&self, yyNewState: YYACTIONTYPE, zTag: &str) {
        #[cfg(not(feature = "NDEBUG"))]
        {
            let yytos = &self[0];
            if yyNewState < YYNSTATE {
                debug!(
                    target: TARGET,
                    "{} '{}', go to state {}", zTag, yyTokenName[yytos.major as usize], yyNewState
                );
            } else {
                debug!(
                    target: TARGET,
                    "{} '{}', pending reduce {:?}",
                    zTag,
                    yyTokenName[yytos.major as usize],
                    yyNewState.checked_sub(YY_MIN_REDUCE)
                );
            }
        }
    }
}

/*
** Perform a shift action.
*/
impl yyParser<'_> {
    #[allow(non_snake_case)]
    fn yy_shift(
        &mut self,
        mut yyNewState: YYACTIONTYPE,    /* The new state to shift in */
        yyMajor: YYCODETYPE,             /* The major token to shift in */
        yyMinor: sqlite3ParserTOKENTYPE, /* The minor token to shift in */
    ) {
        self.yyidx_shift(1);
        self.yyhwm_incr();
        if self.yy_grow_stack_if_needed() {
            return;
        }
        if yyNewState > YY_MAX_SHIFT {
            yyNewState += YY_MIN_REDUCE - YY_MIN_SHIFTREDUCE;
        }
        let yytos = yyStackEntry {
            stateno: yyNewState,
            major: yyMajor,
            minor: YYMINORTYPE::yy0(yyMinor),
        };
        self.push(yytos);
        self.yyTraceShift(yyNewState, "Shift");
    }
}

/* For rule J, yyRuleInfoLhs[J] contains the symbol on the left-hand side
** of that rule */
#[allow(non_upper_case_globals)]
static yyRuleInfoLhs: [YYCODETYPE; YYNRULE] = [
     172, /* (0)explain ::= EXPLAIN */
     172, /* (1)explain ::= EXPLAIN QUERY PLAN */
     171, /* (2)cmdx ::= cmd */
     173, /* (3)cmd ::= BEGIN transtype trans_opt */
     175, /* (4)trans_opt ::= */
     175, /* (5)trans_opt ::= TRANSACTION */
     175, /* (6)trans_opt ::= TRANSACTION nm */
     174, /* (7)transtype ::= */
     174, /* (8)transtype ::= DEFERRED */
     174, /* (9)transtype ::= IMMEDIATE */
     174, /* (10)transtype ::= EXCLUSIVE */
     173, /* (11)cmd ::= COMMIT|END trans_opt */
     173, /* (12)cmd ::= ROLLBACK trans_opt */
     173, /* (13)cmd ::= SAVEPOINT nm */
     173, /* (14)cmd ::= RELEASE savepoint_opt nm */
     173, /* (15)cmd ::= ROLLBACK trans_opt TO savepoint_opt nm */
     173, /* (16)cmd ::= createkw temp TABLE ifnotexists fullname create_table_args */
     180, /* (17)ifnotexists ::= */
     180, /* (18)ifnotexists ::= IF NOT EXISTS */
     179, /* (19)temp ::= TEMP */
     179, /* (20)temp ::= */
     182, /* (21)create_table_args ::= LP columnlist conslist_opt RP table_option_set */
     182, /* (22)create_table_args ::= AS select */
     185, /* (23)table_option_set ::= */
     185, /* (24)table_option_set ::= table_option_set COMMA table_option */
     187, /* (25)table_option ::= WITHOUT nm */
     187, /* (26)table_option ::= nm */
     183, /* (27)columnlist ::= columnlist COMMA columnname carglist */
     183, /* (28)columnlist ::= columnname carglist */
     188, /* (29)columnname ::= nm typetoken */
     176, /* (30)nm ::= ID|INDEXED|JOIN_KW */
     176, /* (31)nm ::= STRING */
     190, /* (32)typetoken ::= */
     190, /* (33)typetoken ::= typename */
     190, /* (34)typetoken ::= typename LP signed RP */
     190, /* (35)typetoken ::= typename LP signed COMMA signed RP */
     191, /* (36)typename ::= ID|STRING */
     191, /* (37)typename ::= typename ID|STRING */
     189, /* (38)carglist ::= carglist ccons */
     189, /* (39)carglist ::= */
     195, /* (40)ccons ::= CONSTRAINT nm */
     195, /* (41)ccons ::= DEFAULT term */
     195, /* (42)ccons ::= DEFAULT LP expr RP */
     195, /* (43)ccons ::= DEFAULT PLUS term */
     195, /* (44)ccons ::= DEFAULT MINUS term */
     195, /* (45)ccons ::= DEFAULT ID|INDEXED */
     195, /* (46)ccons ::= NULL onconf */
     195, /* (47)ccons ::= NOT NULL onconf */
     195, /* (48)ccons ::= PRIMARY KEY sortorder onconf autoinc */
     195, /* (49)ccons ::= UNIQUE onconf */
     195, /* (50)ccons ::= CHECK LP expr RP */
     195, /* (51)ccons ::= REFERENCES nm eidlist_opt refargs */
     195, /* (52)ccons ::= defer_subclause */
     195, /* (53)ccons ::= COLLATE ID|STRING */
     195, /* (54)ccons ::= GENERATED ALWAYS AS generated */
     195, /* (55)ccons ::= AS generated */
     204, /* (56)generated ::= LP expr RP */
     204, /* (57)generated ::= LP expr RP ID */
     200, /* (58)autoinc ::= */
     200, /* (59)autoinc ::= AUTOINCR */
     202, /* (60)refargs ::= */
     202, /* (61)refargs ::= refargs refarg */
     205, /* (62)refarg ::= MATCH nm */
     205, /* (63)refarg ::= ON INSERT refact */
     205, /* (64)refarg ::= ON DELETE refact */
     205, /* (65)refarg ::= ON UPDATE refact */
     206, /* (66)refact ::= SET NULL */
     206, /* (67)refact ::= SET DEFAULT */
     206, /* (68)refact ::= CASCADE */
     206, /* (69)refact ::= RESTRICT */
     206, /* (70)refact ::= NO ACTION */
     203, /* (71)defer_subclause ::= NOT DEFERRABLE init_deferred_pred_opt */
     203, /* (72)defer_subclause ::= DEFERRABLE init_deferred_pred_opt */
     207, /* (73)init_deferred_pred_opt ::= */
     207, /* (74)init_deferred_pred_opt ::= INITIALLY DEFERRED */
     207, /* (75)init_deferred_pred_opt ::= INITIALLY IMMEDIATE */
     184, /* (76)conslist_opt ::= */
     184, /* (77)conslist_opt ::= COMMA conslist */
     208, /* (78)conslist ::= conslist tconscomma tcons */
     208, /* (79)conslist ::= tcons */
     209, /* (80)tconscomma ::= COMMA */
     210, /* (81)tcons ::= CONSTRAINT nm */
     210, /* (82)tcons ::= PRIMARY KEY LP sortlist autoinc RP onconf */
     210, /* (83)tcons ::= UNIQUE LP sortlist RP onconf */
     210, /* (84)tcons ::= CHECK LP expr RP onconf */
     210, /* (85)tcons ::= FOREIGN KEY LP eidlist RP REFERENCES nm eidlist_opt refargs defer_subclause_opt */
     213, /* (86)defer_subclause_opt ::= */
     213, /* (87)defer_subclause_opt ::= defer_subclause */
     198, /* (88)onconf ::= */
     198, /* (89)onconf ::= ON CONFLICT resolvetype */
     214, /* (90)orconf ::= */
     214, /* (91)orconf ::= OR resolvetype */
     215, /* (92)resolvetype ::= IGNORE */
     215, /* (93)resolvetype ::= REPLACE */
     173, /* (94)cmd ::= DROP TABLE ifexists fullname */
     217, /* (95)ifexists ::= IF EXISTS */
     217, /* (96)ifexists ::= */
     173, /* (97)cmd ::= createkw temp VIEW ifnotexists fullname eidlist_opt AS select */
     173, /* (98)cmd ::= DROP VIEW ifexists fullname */
     173, /* (99)cmd ::= select */
     186, /* (100)select ::= WITH wqlist selectnowith orderby_opt limit_opt */
     186, /* (101)select ::= WITH RECURSIVE wqlist selectnowith orderby_opt limit_opt */
     186, /* (102)select ::= selectnowith orderby_opt limit_opt */
     218, /* (103)selectnowith ::= oneselect */
     218, /* (104)selectnowith ::= selectnowith multiselect_op oneselect */
     223, /* (105)multiselect_op ::= UNION */
     223, /* (106)multiselect_op ::= UNION ALL */
     223, /* (107)multiselect_op ::= EXCEPT */
     223, /* (108)multiselect_op ::= INTERSECT */
     219, /* (109)oneselect ::= SELECT distinct selcollist from where_opt groupby_opt */
     219, /* (110)oneselect ::= SELECT distinct selcollist from where_opt groupby_opt window_clause */
     219, /* (111)oneselect ::= values */
     230, /* (112)values ::= VALUES LP nexprlist RP */
     230, /* (113)values ::= values COMMA LP nexprlist RP */
     224, /* (114)distinct ::= DISTINCT */
     224, /* (115)distinct ::= ALL */
     224, /* (116)distinct ::= */
     232, /* (117)sclp ::= */
     225, /* (118)selcollist ::= sclp expr as */
     225, /* (119)selcollist ::= sclp STAR */
     225, /* (120)selcollist ::= sclp nm DOT STAR */
     233, /* (121)as ::= AS nm */
     233, /* (122)as ::= ID|STRING */
     233, /* (123)as ::= */
     226, /* (124)from ::= */
     226, /* (125)from ::= FROM seltablist */
     235, /* (126)stl_prefix ::= seltablist joinop */
     235, /* (127)stl_prefix ::= */
     234, /* (128)seltablist ::= stl_prefix fullname as indexed_opt on_using */
     234, /* (129)seltablist ::= stl_prefix fullname LP exprlist RP as on_using */
     234, /* (130)seltablist ::= stl_prefix LP select RP as on_using */
     234, /* (131)seltablist ::= stl_prefix LP seltablist RP as on_using */
     181, /* (132)fullname ::= nm */
     181, /* (133)fullname ::= nm DOT nm */
     240, /* (134)xfullname ::= nm */
     240, /* (135)xfullname ::= nm DOT nm */
     240, /* (136)xfullname ::= nm DOT nm AS nm */
     240, /* (137)xfullname ::= nm AS nm */
     236, /* (138)joinop ::= COMMA */
     236, /* (139)joinop ::= JOIN */
     236, /* (140)joinop ::= JOIN_KW JOIN */
     236, /* (141)joinop ::= JOIN_KW nm JOIN */
     236, /* (142)joinop ::= JOIN_KW nm nm JOIN */
     238, /* (143)on_using ::= ON expr */
     238, /* (144)on_using ::= USING LP idlist RP */
     238, /* (145)on_using ::= */
     237, /* (146)indexed_opt ::= */
     237, /* (147)indexed_opt ::= INDEXED BY nm */
     237, /* (148)indexed_opt ::= NOT INDEXED */
     221, /* (149)orderby_opt ::= */
     221, /* (150)orderby_opt ::= ORDER BY sortlist */
     211, /* (151)sortlist ::= sortlist COMMA expr sortorder nulls */
     211, /* (152)sortlist ::= expr sortorder nulls */
     199, /* (153)sortorder ::= ASC */
     199, /* (154)sortorder ::= DESC */
     199, /* (155)sortorder ::= */
     242, /* (156)nulls ::= NULLS FIRST */
     242, /* (157)nulls ::= NULLS LAST */
     242, /* (158)nulls ::= */
     228, /* (159)groupby_opt ::= */
     228, /* (160)groupby_opt ::= GROUP BY nexprlist having_opt */
     243, /* (161)having_opt ::= */
     243, /* (162)having_opt ::= HAVING expr */
     222, /* (163)limit_opt ::= */
     222, /* (164)limit_opt ::= LIMIT expr */
     222, /* (165)limit_opt ::= LIMIT expr OFFSET expr */
     222, /* (166)limit_opt ::= LIMIT expr COMMA expr */
     173, /* (167)cmd ::= with DELETE FROM xfullname indexed_opt where_opt_ret orderby_opt limit_opt */
     227, /* (168)where_opt ::= */
     227, /* (169)where_opt ::= WHERE expr */
     245, /* (170)where_opt_ret ::= */
     245, /* (171)where_opt_ret ::= WHERE expr */
     245, /* (172)where_opt_ret ::= RETURNING selcollist */
     245, /* (173)where_opt_ret ::= WHERE expr RETURNING selcollist */
     173, /* (174)cmd ::= with UPDATE orconf xfullname indexed_opt SET setlist from where_opt_ret orderby_opt limit_opt */
     246, /* (175)setlist ::= setlist COMMA nm EQ expr */
     246, /* (176)setlist ::= setlist COMMA LP idlist RP EQ expr */
     246, /* (177)setlist ::= nm EQ expr */
     246, /* (178)setlist ::= LP idlist RP EQ expr */
     173, /* (179)cmd ::= with insert_cmd INTO xfullname idlist_opt select upsert */
     173, /* (180)cmd ::= with insert_cmd INTO xfullname idlist_opt DEFAULT VALUES returning */
     249, /* (181)upsert ::= */
     249, /* (182)upsert ::= RETURNING selcollist */
     249, /* (183)upsert ::= ON CONFLICT LP sortlist RP where_opt DO UPDATE SET setlist where_opt upsert */
     249, /* (184)upsert ::= ON CONFLICT LP sortlist RP where_opt DO NOTHING upsert */
     249, /* (185)upsert ::= ON CONFLICT DO NOTHING returning */
     249, /* (186)upsert ::= ON CONFLICT DO UPDATE SET setlist where_opt returning */
     250, /* (187)returning ::= RETURNING selcollist */
     250, /* (188)returning ::= */
     247, /* (189)insert_cmd ::= INSERT orconf */
     247, /* (190)insert_cmd ::= REPLACE */
     248, /* (191)idlist_opt ::= */
     248, /* (192)idlist_opt ::= LP idlist RP */
     241, /* (193)idlist ::= idlist COMMA nm */
     241, /* (194)idlist ::= nm */
     197, /* (195)expr ::= LP expr RP */
     197, /* (196)expr ::= ID|INDEXED|JOIN_KW */
     197, /* (197)expr ::= nm DOT nm */
     197, /* (198)expr ::= nm DOT nm DOT nm */
     196, /* (199)term ::= NULL */
     196, /* (200)term ::= BLOB */
     196, /* (201)term ::= STRING */
     196, /* (202)term ::= FLOAT|INTEGER */
     197, /* (203)expr ::= VARIABLE */
     197, /* (204)expr ::= expr COLLATE ID|STRING */
     197, /* (205)expr ::= CAST LP expr AS typetoken RP */
     197, /* (206)expr ::= ID|INDEXED|JOIN_KW LP distinct exprlist RP */
     197, /* (207)expr ::= ID|INDEXED|JOIN_KW LP distinct exprlist ORDER BY sortlist RP */
     197, /* (208)expr ::= ID|INDEXED|JOIN_KW LP STAR RP */
     197, /* (209)expr ::= ID|INDEXED|JOIN_KW LP distinct exprlist RP filter_over */
     197, /* (210)expr ::= ID|INDEXED|JOIN_KW LP distinct exprlist ORDER BY sortlist RP filter_over */
     197, /* (211)expr ::= ID|INDEXED|JOIN_KW LP STAR RP filter_over */
     196, /* (212)term ::= CTIME_KW */
     197, /* (213)expr ::= LP nexprlist COMMA expr RP */
     197, /* (214)expr ::= expr AND expr */
     197, /* (215)expr ::= expr OR expr */
     197, /* (216)expr ::= expr LT|GT|GE|LE expr */
     197, /* (217)expr ::= expr EQ|NE expr */
     197, /* (218)expr ::= expr BITAND|BITOR|LSHIFT|RSHIFT expr */
     197, /* (219)expr ::= expr PLUS|MINUS expr */
     197, /* (220)expr ::= expr STAR|SLASH|REM expr */
     197, /* (221)expr ::= expr CONCAT expr */
     252, /* (222)likeop ::= LIKE_KW|MATCH */
     252, /* (223)likeop ::= NOT LIKE_KW|MATCH */
     197, /* (224)expr ::= expr likeop expr */
     197, /* (225)expr ::= expr likeop expr ESCAPE expr */
     197, /* (226)expr ::= expr ISNULL|NOTNULL */
     197, /* (227)expr ::= expr NOT NULL */
     197, /* (228)expr ::= expr IS expr */
     197, /* (229)expr ::= expr IS NOT expr */
     197, /* (230)expr ::= expr IS NOT DISTINCT FROM expr */
     197, /* (231)expr ::= expr IS DISTINCT FROM expr */
     197, /* (232)expr ::= NOT expr */
     197, /* (233)expr ::= BITNOT expr */
     197, /* (234)expr ::= PLUS|MINUS expr */
     197, /* (235)expr ::= expr PTR expr */
     253, /* (236)between_op ::= BETWEEN */
     253, /* (237)between_op ::= NOT BETWEEN */
     197, /* (238)expr ::= expr between_op expr AND expr */
     254, /* (239)in_op ::= IN */
     254, /* (240)in_op ::= NOT IN */
     197, /* (241)expr ::= expr in_op LP exprlist RP */
     197, /* (242)expr ::= LP select RP */
     197, /* (243)expr ::= expr in_op LP select RP */
     197, /* (244)expr ::= expr in_op fullname paren_exprlist */
     197, /* (245)expr ::= EXISTS LP select RP */
     197, /* (246)expr ::= CASE case_operand case_exprlist case_else END */
     257, /* (247)case_exprlist ::= case_exprlist WHEN expr THEN expr */
     257, /* (248)case_exprlist ::= WHEN expr THEN expr */
     258, /* (249)case_else ::= ELSE expr */
     258, /* (250)case_else ::= */
     256, /* (251)case_operand ::= expr */
     256, /* (252)case_operand ::= */
     239, /* (253)exprlist ::= nexprlist */
     239, /* (254)exprlist ::= */
     231, /* (255)nexprlist ::= nexprlist COMMA expr */
     231, /* (256)nexprlist ::= expr */
     255, /* (257)paren_exprlist ::= */
     255, /* (258)paren_exprlist ::= LP exprlist RP */
     173, /* (259)cmd ::= createkw uniqueflag INDEX ifnotexists fullname ON nm LP sortlist RP where_opt */
     259, /* (260)uniqueflag ::= UNIQUE */
     259, /* (261)uniqueflag ::= */
     201, /* (262)eidlist_opt ::= */
     201, /* (263)eidlist_opt ::= LP eidlist RP */
     212, /* (264)eidlist ::= eidlist COMMA nm collate sortorder */
     212, /* (265)eidlist ::= nm collate sortorder */
     260, /* (266)collate ::= */
     260, /* (267)collate ::= COLLATE ID|STRING */
     173, /* (268)cmd ::= DROP INDEX ifexists fullname */
     173, /* (269)cmd ::= VACUUM vinto */
     173, /* (270)cmd ::= VACUUM nm vinto */
     261, /* (271)vinto ::= INTO expr */
     261, /* (272)vinto ::= */
     173, /* (273)cmd ::= PRAGMA fullname */
     173, /* (274)cmd ::= PRAGMA fullname EQ nmnum */
     173, /* (275)cmd ::= PRAGMA fullname LP nmnum RP */
     173, /* (276)cmd ::= PRAGMA fullname EQ minus_num */
     173, /* (277)cmd ::= PRAGMA fullname LP minus_num RP */
     262, /* (278)nmnum ::= nm */
     262, /* (279)nmnum ::= ON */
     262, /* (280)nmnum ::= DELETE */
     262, /* (281)nmnum ::= DEFAULT */
     193, /* (282)plus_num ::= PLUS INTEGER|FLOAT */
     193, /* (283)plus_num ::= INTEGER|FLOAT */
     194, /* (284)minus_num ::= MINUS INTEGER|FLOAT */
     173, /* (285)cmd ::= createkw temp TRIGGER ifnotexists fullname trigger_time trigger_event ON fullname foreach_clause when_clause BEGIN trigger_cmd_list END */
     263, /* (286)trigger_time ::= BEFORE */
     263, /* (287)trigger_time ::= AFTER */
     263, /* (288)trigger_time ::= INSTEAD OF */
     263, /* (289)trigger_time ::= */
     264, /* (290)trigger_event ::= DELETE */
     264, /* (291)trigger_event ::= INSERT */
     264, /* (292)trigger_event ::= UPDATE */
     264, /* (293)trigger_event ::= UPDATE OF idlist */
     265, /* (294)foreach_clause ::= */
     265, /* (295)foreach_clause ::= FOR EACH ROW */
     266, /* (296)when_clause ::= */
     266, /* (297)when_clause ::= WHEN expr */
     267, /* (298)trigger_cmd_list ::= trigger_cmd_list trigger_cmd SEMI */
     267, /* (299)trigger_cmd_list ::= trigger_cmd SEMI */
     269, /* (300)trnm ::= nm DOT nm */
     270, /* (301)tridxby ::= INDEXED BY nm */
     270, /* (302)tridxby ::= NOT INDEXED */
     268, /* (303)trigger_cmd ::= UPDATE orconf trnm tridxby SET setlist from where_opt */
     268, /* (304)trigger_cmd ::= insert_cmd INTO trnm idlist_opt select upsert */
     268, /* (305)trigger_cmd ::= DELETE FROM trnm tridxby where_opt */
     268, /* (306)trigger_cmd ::= select */
     197, /* (307)expr ::= RAISE LP IGNORE RP */
     197, /* (308)expr ::= RAISE LP raisetype COMMA expr RP */
     216, /* (309)raisetype ::= ROLLBACK */
     216, /* (310)raisetype ::= ABORT */
     216, /* (311)raisetype ::= FAIL */
     173, /* (312)cmd ::= DROP TRIGGER ifexists fullname */
     173, /* (313)cmd ::= ATTACH database_kw_opt expr AS expr key_opt */
     173, /* (314)cmd ::= DETACH database_kw_opt expr */
     272, /* (315)key_opt ::= */
     272, /* (316)key_opt ::= KEY expr */
     173, /* (317)cmd ::= REINDEX */
     173, /* (318)cmd ::= REINDEX fullname */
     173, /* (319)cmd ::= ANALYZE */
     173, /* (320)cmd ::= ANALYZE fullname */
     173, /* (321)cmd ::= ALTER TABLE fullname RENAME TO nm */
     173, /* (322)cmd ::= ALTER TABLE fullname ADD kwcolumn_opt columnname carglist */
     173, /* (323)cmd ::= ALTER TABLE fullname RENAME kwcolumn_opt nm TO nm */
     173, /* (324)cmd ::= ALTER TABLE fullname DROP kwcolumn_opt nm */
     173, /* (325)cmd ::= create_vtab */
     173, /* (326)cmd ::= create_vtab LP vtabarglist RP */
     274, /* (327)create_vtab ::= createkw VIRTUAL TABLE ifnotexists fullname USING nm */
     276, /* (328)vtabarg ::= */
     277, /* (329)vtabargtoken ::= ANY */
     277, /* (330)vtabargtoken ::= lp anylist RP */
     278, /* (331)lp ::= LP */
     244, /* (332)with ::= */
     244, /* (333)with ::= WITH wqlist */
     244, /* (334)with ::= WITH RECURSIVE wqlist */
     281, /* (335)wqas ::= AS */
     281, /* (336)wqas ::= AS MATERIALIZED */
     281, /* (337)wqas ::= AS NOT MATERIALIZED */
     280, /* (338)wqitem ::= nm eidlist_opt wqas LP select RP */
     220, /* (339)wqlist ::= wqitem */
     220, /* (340)wqlist ::= wqlist COMMA wqitem */
     282, /* (341)windowdefn_list ::= windowdefn */
     282, /* (342)windowdefn_list ::= windowdefn_list COMMA windowdefn */
     283, /* (343)windowdefn ::= nm AS LP window RP */
     284, /* (344)window ::= PARTITION BY nexprlist orderby_opt frame_opt */
     284, /* (345)window ::= nm PARTITION BY nexprlist orderby_opt frame_opt */
     284, /* (346)window ::= ORDER BY sortlist frame_opt */
     284, /* (347)window ::= nm ORDER BY sortlist frame_opt */
     284, /* (348)window ::= frame_opt */
     284, /* (349)window ::= nm frame_opt */
     285, /* (350)frame_opt ::= */
     285, /* (351)frame_opt ::= range_or_rows frame_bound_s frame_exclude_opt */
     285, /* (352)frame_opt ::= range_or_rows BETWEEN frame_bound_s AND frame_bound_e frame_exclude_opt */
     288, /* (353)range_or_rows ::= RANGE */
     288, /* (354)range_or_rows ::= ROWS */
     288, /* (355)range_or_rows ::= GROUPS */
     290, /* (356)frame_bound_s ::= frame_bound */
     290, /* (357)frame_bound_s ::= UNBOUNDED PRECEDING */
     291, /* (358)frame_bound_e ::= frame_bound */
     291, /* (359)frame_bound_e ::= UNBOUNDED FOLLOWING */
     289, /* (360)frame_bound ::= expr PRECEDING */
     289, /* (361)frame_bound ::= CURRENT ROW */
     289, /* (362)frame_bound ::= expr FOLLOWING */
     292, /* (363)frame_exclude_opt ::= */
     292, /* (364)frame_exclude_opt ::= EXCLUDE frame_exclude */
     293, /* (365)frame_exclude ::= NO OTHERS */
     293, /* (366)frame_exclude ::= CURRENT ROW */
     293, /* (367)frame_exclude ::= GROUP */
     293, /* (368)frame_exclude ::= TIES */
     229, /* (369)window_clause ::= WINDOW windowdefn_list */
     251, /* (370)filter_over ::= filter_clause over_clause */
     251, /* (371)filter_over ::= over_clause */
     251, /* (372)filter_over ::= filter_clause */
     287, /* (373)over_clause ::= OVER LP window RP */
     287, /* (374)over_clause ::= OVER nm */
     286, /* (375)filter_clause ::= FILTER LP WHERE expr RP */
     168, /* (376)input ::= cmdlist */
     169, /* (377)cmdlist ::= cmdlist ecmd */
     169, /* (378)cmdlist ::= ecmd */
     170, /* (379)ecmd ::= SEMI */
     170, /* (380)ecmd ::= cmdx SEMI */
     170, /* (381)ecmd ::= explain cmdx SEMI */
     177, /* (382)savepoint_opt ::= SAVEPOINT */
     177, /* (383)savepoint_opt ::= */
     178, /* (384)createkw ::= CREATE */
     185, /* (385)table_option_set ::= table_option */
     192, /* (386)signed ::= plus_num */
     192, /* (387)signed ::= minus_num */
     209, /* (388)tconscomma ::= */
     215, /* (389)resolvetype ::= raisetype */
     232, /* (390)sclp ::= selcollist COMMA */
     197, /* (391)expr ::= term */
     262, /* (392)nmnum ::= plus_num */
     269, /* (393)trnm ::= nm */
     270, /* (394)tridxby ::= */
     271, /* (395)database_kw_opt ::= DATABASE */
     271, /* (396)database_kw_opt ::= */
     273, /* (397)kwcolumn_opt ::= */
     273, /* (398)kwcolumn_opt ::= COLUMNKW */
     275, /* (399)vtabarglist ::= vtabarg */
     275, /* (400)vtabarglist ::= vtabarglist COMMA vtabarg */
     276, /* (401)vtabarg ::= vtabarg vtabargtoken */
     279, /* (402)anylist ::= */
     279, /* (403)anylist ::= anylist LP anylist RP */
     279, /* (404)anylist ::= anylist ANY */
];

/* For rule J, yyRuleInfoNRhs[J] contains the negative of the number
** of symbols on the right-hand side of that rule. */
#[allow(non_upper_case_globals)]
static yyRuleInfoNRhs: [i8; YYNRULE] = [
     -1,  /* (0)explain ::= EXPLAIN */
     -3,  /* (1)explain ::= EXPLAIN QUERY PLAN */
     -1,  /* (2)cmdx ::= cmd */
     -3,  /* (3)cmd ::= BEGIN transtype trans_opt */
      0,  /* (4)trans_opt ::= */
     -1,  /* (5)trans_opt ::= TRANSACTION */
     -2,  /* (6)trans_opt ::= TRANSACTION nm */
      0,  /* (7)transtype ::= */
     -1,  /* (8)transtype ::= DEFERRED */
     -1,  /* (9)transtype ::= IMMEDIATE */
     -1,  /* (10)transtype ::= EXCLUSIVE */
     -2,  /* (11)cmd ::= COMMIT|END trans_opt */
     -2,  /* (12)cmd ::= ROLLBACK trans_opt */
     -2,  /* (13)cmd ::= SAVEPOINT nm */
     -3,  /* (14)cmd ::= RELEASE savepoint_opt nm */
     -5,  /* (15)cmd ::= ROLLBACK trans_opt TO savepoint_opt nm */
     -6,  /* (16)cmd ::= createkw temp TABLE ifnotexists fullname create_table_args */
      0,  /* (17)ifnotexists ::= */
     -3,  /* (18)ifnotexists ::= IF NOT EXISTS */
     -1,  /* (19)temp ::= TEMP */
      0,  /* (20)temp ::= */
     -5,  /* (21)create_table_args ::= LP columnlist conslist_opt RP table_option_set */
     -2,  /* (22)create_table_args ::= AS select */
      0,  /* (23)table_option_set ::= */
     -3,  /* (24)table_option_set ::= table_option_set COMMA table_option */
     -2,  /* (25)table_option ::= WITHOUT nm */
     -1,  /* (26)table_option ::= nm */
     -4,  /* (27)columnlist ::= columnlist COMMA columnname carglist */
     -2,  /* (28)columnlist ::= columnname carglist */
     -2,  /* (29)columnname ::= nm typetoken */
     -1,  /* (30)nm ::= ID|INDEXED|JOIN_KW */
     -1,  /* (31)nm ::= STRING */
      0,  /* (32)typetoken ::= */
     -1,  /* (33)typetoken ::= typename */
     -4,  /* (34)typetoken ::= typename LP signed RP */
     -6,  /* (35)typetoken ::= typename LP signed COMMA signed RP */
     -1,  /* (36)typename ::= ID|STRING */
     -2,  /* (37)typename ::= typename ID|STRING */
     -2,  /* (38)carglist ::= carglist ccons */
      0,  /* (39)carglist ::= */
     -2,  /* (40)ccons ::= CONSTRAINT nm */
     -2,  /* (41)ccons ::= DEFAULT term */
     -4,  /* (42)ccons ::= DEFAULT LP expr RP */
     -3,  /* (43)ccons ::= DEFAULT PLUS term */
     -3,  /* (44)ccons ::= DEFAULT MINUS term */
     -2,  /* (45)ccons ::= DEFAULT ID|INDEXED */
     -2,  /* (46)ccons ::= NULL onconf */
     -3,  /* (47)ccons ::= NOT NULL onconf */
     -5,  /* (48)ccons ::= PRIMARY KEY sortorder onconf autoinc */
     -2,  /* (49)ccons ::= UNIQUE onconf */
     -4,  /* (50)ccons ::= CHECK LP expr RP */
     -4,  /* (51)ccons ::= REFERENCES nm eidlist_opt refargs */
     -1,  /* (52)ccons ::= defer_subclause */
     -2,  /* (53)ccons ::= COLLATE ID|STRING */
     -4,  /* (54)ccons ::= GENERATED ALWAYS AS generated */
     -2,  /* (55)ccons ::= AS generated */
     -3,  /* (56)generated ::= LP expr RP */
     -4,  /* (57)generated ::= LP expr RP ID */
      0,  /* (58)autoinc ::= */
     -1,  /* (59)autoinc ::= AUTOINCR */
      0,  /* (60)refargs ::= */
     -2,  /* (61)refargs ::= refargs refarg */
     -2,  /* (62)refarg ::= MATCH nm */
     -3,  /* (63)refarg ::= ON INSERT refact */
     -3,  /* (64)refarg ::= ON DELETE refact */
     -3,  /* (65)refarg ::= ON UPDATE refact */
     -2,  /* (66)refact ::= SET NULL */
     -2,  /* (67)refact ::= SET DEFAULT */
     -1,  /* (68)refact ::= CASCADE */
     -1,  /* (69)refact ::= RESTRICT */
     -2,  /* (70)refact ::= NO ACTION */
     -3,  /* (71)defer_subclause ::= NOT DEFERRABLE init_deferred_pred_opt */
     -2,  /* (72)defer_subclause ::= DEFERRABLE init_deferred_pred_opt */
      0,  /* (73)init_deferred_pred_opt ::= */
     -2,  /* (74)init_deferred_pred_opt ::= INITIALLY DEFERRED */
     -2,  /* (75)init_deferred_pred_opt ::= INITIALLY IMMEDIATE */
      0,  /* (76)conslist_opt ::= */
     -2,  /* (77)conslist_opt ::= COMMA conslist */
     -3,  /* (78)conslist ::= conslist tconscomma tcons */
     -1,  /* (79)conslist ::= tcons */
     -1,  /* (80)tconscomma ::= COMMA */
     -2,  /* (81)tcons ::= CONSTRAINT nm */
     -7,  /* (82)tcons ::= PRIMARY KEY LP sortlist autoinc RP onconf */
     -5,  /* (83)tcons ::= UNIQUE LP sortlist RP onconf */
     -5,  /* (84)tcons ::= CHECK LP expr RP onconf */
    -10,  /* (85)tcons ::= FOREIGN KEY LP eidlist RP REFERENCES nm eidlist_opt refargs defer_subclause_opt */
      0,  /* (86)defer_subclause_opt ::= */
     -1,  /* (87)defer_subclause_opt ::= defer_subclause */
      0,  /* (88)onconf ::= */
     -3,  /* (89)onconf ::= ON CONFLICT resolvetype */
      0,  /* (90)orconf ::= */
     -2,  /* (91)orconf ::= OR resolvetype */
     -1,  /* (92)resolvetype ::= IGNORE */
     -1,  /* (93)resolvetype ::= REPLACE */
     -4,  /* (94)cmd ::= DROP TABLE ifexists fullname */
     -2,  /* (95)ifexists ::= IF EXISTS */
      0,  /* (96)ifexists ::= */
     -8,  /* (97)cmd ::= createkw temp VIEW ifnotexists fullname eidlist_opt AS select */
     -4,  /* (98)cmd ::= DROP VIEW ifexists fullname */
     -1,  /* (99)cmd ::= select */
     -5,  /* (100)select ::= WITH wqlist selectnowith orderby_opt limit_opt */
     -6,  /* (101)select ::= WITH RECURSIVE wqlist selectnowith orderby_opt limit_opt */
     -3,  /* (102)select ::= selectnowith orderby_opt limit_opt */
     -1,  /* (103)selectnowith ::= oneselect */
     -3,  /* (104)selectnowith ::= selectnowith multiselect_op oneselect */
     -1,  /* (105)multiselect_op ::= UNION */
     -2,  /* (106)multiselect_op ::= UNION ALL */
     -1,  /* (107)multiselect_op ::= EXCEPT */
     -1,  /* (108)multiselect_op ::= INTERSECT */
     -6,  /* (109)oneselect ::= SELECT distinct selcollist from where_opt groupby_opt */
     -7,  /* (110)oneselect ::= SELECT distinct selcollist from where_opt groupby_opt window_clause */
     -1,  /* (111)oneselect ::= values */
     -4,  /* (112)values ::= VALUES LP nexprlist RP */
     -5,  /* (113)values ::= values COMMA LP nexprlist RP */
     -1,  /* (114)distinct ::= DISTINCT */
     -1,  /* (115)distinct ::= ALL */
      0,  /* (116)distinct ::= */
      0,  /* (117)sclp ::= */
     -3,  /* (118)selcollist ::= sclp expr as */
     -2,  /* (119)selcollist ::= sclp STAR */
     -4,  /* (120)selcollist ::= sclp nm DOT STAR */
     -2,  /* (121)as ::= AS nm */
     -1,  /* (122)as ::= ID|STRING */
      0,  /* (123)as ::= */
      0,  /* (124)from ::= */
     -2,  /* (125)from ::= FROM seltablist */
     -2,  /* (126)stl_prefix ::= seltablist joinop */
      0,  /* (127)stl_prefix ::= */
     -5,  /* (128)seltablist ::= stl_prefix fullname as indexed_opt on_using */
     -7,  /* (129)seltablist ::= stl_prefix fullname LP exprlist RP as on_using */
     -6,  /* (130)seltablist ::= stl_prefix LP select RP as on_using */
     -6,  /* (131)seltablist ::= stl_prefix LP seltablist RP as on_using */
     -1,  /* (132)fullname ::= nm */
     -3,  /* (133)fullname ::= nm DOT nm */
     -1,  /* (134)xfullname ::= nm */
     -3,  /* (135)xfullname ::= nm DOT nm */
     -5,  /* (136)xfullname ::= nm DOT nm AS nm */
     -3,  /* (137)xfullname ::= nm AS nm */
     -1,  /* (138)joinop ::= COMMA */
     -1,  /* (139)joinop ::= JOIN */
     -2,  /* (140)joinop ::= JOIN_KW JOIN */
     -3,  /* (141)joinop ::= JOIN_KW nm JOIN */
     -4,  /* (142)joinop ::= JOIN_KW nm nm JOIN */
     -2,  /* (143)on_using ::= ON expr */
     -4,  /* (144)on_using ::= USING LP idlist RP */
      0,  /* (145)on_using ::= */
      0,  /* (146)indexed_opt ::= */
     -3,  /* (147)indexed_opt ::= INDEXED BY nm */
     -2,  /* (148)indexed_opt ::= NOT INDEXED */
      0,  /* (149)orderby_opt ::= */
     -3,  /* (150)orderby_opt ::= ORDER BY sortlist */
     -5,  /* (151)sortlist ::= sortlist COMMA expr sortorder nulls */
     -3,  /* (152)sortlist ::= expr sortorder nulls */
     -1,  /* (153)sortorder ::= ASC */
     -1,  /* (154)sortorder ::= DESC */
      0,  /* (155)sortorder ::= */
     -2,  /* (156)nulls ::= NULLS FIRST */
     -2,  /* (157)nulls ::= NULLS LAST */
      0,  /* (158)nulls ::= */
      0,  /* (159)groupby_opt ::= */
     -4,  /* (160)groupby_opt ::= GROUP BY nexprlist having_opt */
      0,  /* (161)having_opt ::= */
     -2,  /* (162)having_opt ::= HAVING expr */
      0,  /* (163)limit_opt ::= */
     -2,  /* (164)limit_opt ::= LIMIT expr */
     -4,  /* (165)limit_opt ::= LIMIT expr OFFSET expr */
     -4,  /* (166)limit_opt ::= LIMIT expr COMMA expr */
     -8,  /* (167)cmd ::= with DELETE FROM xfullname indexed_opt where_opt_ret orderby_opt limit_opt */
      0,  /* (168)where_opt ::= */
     -2,  /* (169)where_opt ::= WHERE expr */
      0,  /* (170)where_opt_ret ::= */
     -2,  /* (171)where_opt_ret ::= WHERE expr */
     -2,  /* (172)where_opt_ret ::= RETURNING selcollist */
     -4,  /* (173)where_opt_ret ::= WHERE expr RETURNING selcollist */
    -11,  /* (174)cmd ::= with UPDATE orconf xfullname indexed_opt SET setlist from where_opt_ret orderby_opt limit_opt */
     -5,  /* (175)setlist ::= setlist COMMA nm EQ expr */
     -7,  /* (176)setlist ::= setlist COMMA LP idlist RP EQ expr */
     -3,  /* (177)setlist ::= nm EQ expr */
     -5,  /* (178)setlist ::= LP idlist RP EQ expr */
     -7,  /* (179)cmd ::= with insert_cmd INTO xfullname idlist_opt select upsert */
     -8,  /* (180)cmd ::= with insert_cmd INTO xfullname idlist_opt DEFAULT VALUES returning */
      0,  /* (181)upsert ::= */
     -2,  /* (182)upsert ::= RETURNING selcollist */
    -12,  /* (183)upsert ::= ON CONFLICT LP sortlist RP where_opt DO UPDATE SET setlist where_opt upsert */
     -9,  /* (184)upsert ::= ON CONFLICT LP sortlist RP where_opt DO NOTHING upsert */
     -5,  /* (185)upsert ::= ON CONFLICT DO NOTHING returning */
     -8,  /* (186)upsert ::= ON CONFLICT DO UPDATE SET setlist where_opt returning */
     -2,  /* (187)returning ::= RETURNING selcollist */
      0,  /* (188)returning ::= */
     -2,  /* (189)insert_cmd ::= INSERT orconf */
     -1,  /* (190)insert_cmd ::= REPLACE */
      0,  /* (191)idlist_opt ::= */
     -3,  /* (192)idlist_opt ::= LP idlist RP */
     -3,  /* (193)idlist ::= idlist COMMA nm */
     -1,  /* (194)idlist ::= nm */
     -3,  /* (195)expr ::= LP expr RP */
     -1,  /* (196)expr ::= ID|INDEXED|JOIN_KW */
     -3,  /* (197)expr ::= nm DOT nm */
     -5,  /* (198)expr ::= nm DOT nm DOT nm */
     -1,  /* (199)term ::= NULL */
     -1,  /* (200)term ::= BLOB */
     -1,  /* (201)term ::= STRING */
     -1,  /* (202)term ::= FLOAT|INTEGER */
     -1,  /* (203)expr ::= VARIABLE */
     -3,  /* (204)expr ::= expr COLLATE ID|STRING */
     -6,  /* (205)expr ::= CAST LP expr AS typetoken RP */
     -5,  /* (206)expr ::= ID|INDEXED|JOIN_KW LP distinct exprlist RP */
     -8,  /* (207)expr ::= ID|INDEXED|JOIN_KW LP distinct exprlist ORDER BY sortlist RP */
     -4,  /* (208)expr ::= ID|INDEXED|JOIN_KW LP STAR RP */
     -6,  /* (209)expr ::= ID|INDEXED|JOIN_KW LP distinct exprlist RP filter_over */
     -9,  /* (210)expr ::= ID|INDEXED|JOIN_KW LP distinct exprlist ORDER BY sortlist RP filter_over */
     -5,  /* (211)expr ::= ID|INDEXED|JOIN_KW LP STAR RP filter_over */
     -1,  /* (212)term ::= CTIME_KW */
     -5,  /* (213)expr ::= LP nexprlist COMMA expr RP */
     -3,  /* (214)expr ::= expr AND expr */
     -3,  /* (215)expr ::= expr OR expr */
     -3,  /* (216)expr ::= expr LT|GT|GE|LE expr */
     -3,  /* (217)expr ::= expr EQ|NE expr */
     -3,  /* (218)expr ::= expr BITAND|BITOR|LSHIFT|RSHIFT expr */
     -3,  /* (219)expr ::= expr PLUS|MINUS expr */
     -3,  /* (220)expr ::= expr STAR|SLASH|REM expr */
     -3,  /* (221)expr ::= expr CONCAT expr */
     -1,  /* (222)likeop ::= LIKE_KW|MATCH */
     -2,  /* (223)likeop ::= NOT LIKE_KW|MATCH */
     -3,  /* (224)expr ::= expr likeop expr */
     -5,  /* (225)expr ::= expr likeop expr ESCAPE expr */
     -2,  /* (226)expr ::= expr ISNULL|NOTNULL */
     -3,  /* (227)expr ::= expr NOT NULL */
     -3,  /* (228)expr ::= expr IS expr */
     -4,  /* (229)expr ::= expr IS NOT expr */
     -6,  /* (230)expr ::= expr IS NOT DISTINCT FROM expr */
     -5,  /* (231)expr ::= expr IS DISTINCT FROM expr */
     -2,  /* (232)expr ::= NOT expr */
     -2,  /* (233)expr ::= BITNOT expr */
     -2,  /* (234)expr ::= PLUS|MINUS expr */
     -3,  /* (235)expr ::= expr PTR expr */
     -1,  /* (236)between_op ::= BETWEEN */
     -2,  /* (237)between_op ::= NOT BETWEEN */
     -5,  /* (238)expr ::= expr between_op expr AND expr */
     -1,  /* (239)in_op ::= IN */
     -2,  /* (240)in_op ::= NOT IN */
     -5,  /* (241)expr ::= expr in_op LP exprlist RP */
     -3,  /* (242)expr ::= LP select RP */
     -5,  /* (243)expr ::= expr in_op LP select RP */
     -4,  /* (244)expr ::= expr in_op fullname paren_exprlist */
     -4,  /* (245)expr ::= EXISTS LP select RP */
     -5,  /* (246)expr ::= CASE case_operand case_exprlist case_else END */
     -5,  /* (247)case_exprlist ::= case_exprlist WHEN expr THEN expr */
     -4,  /* (248)case_exprlist ::= WHEN expr THEN expr */
     -2,  /* (249)case_else ::= ELSE expr */
      0,  /* (250)case_else ::= */
     -1,  /* (251)case_operand ::= expr */
      0,  /* (252)case_operand ::= */
     -1,  /* (253)exprlist ::= nexprlist */
      0,  /* (254)exprlist ::= */
     -3,  /* (255)nexprlist ::= nexprlist COMMA expr */
     -1,  /* (256)nexprlist ::= expr */
      0,  /* (257)paren_exprlist ::= */
     -3,  /* (258)paren_exprlist ::= LP exprlist RP */
    -11,  /* (259)cmd ::= createkw uniqueflag INDEX ifnotexists fullname ON nm LP sortlist RP where_opt */
     -1,  /* (260)uniqueflag ::= UNIQUE */
      0,  /* (261)uniqueflag ::= */
      0,  /* (262)eidlist_opt ::= */
     -3,  /* (263)eidlist_opt ::= LP eidlist RP */
     -5,  /* (264)eidlist ::= eidlist COMMA nm collate sortorder */
     -3,  /* (265)eidlist ::= nm collate sortorder */
      0,  /* (266)collate ::= */
     -2,  /* (267)collate ::= COLLATE ID|STRING */
     -4,  /* (268)cmd ::= DROP INDEX ifexists fullname */
     -2,  /* (269)cmd ::= VACUUM vinto */
     -3,  /* (270)cmd ::= VACUUM nm vinto */
     -2,  /* (271)vinto ::= INTO expr */
      0,  /* (272)vinto ::= */
     -2,  /* (273)cmd ::= PRAGMA fullname */
     -4,  /* (274)cmd ::= PRAGMA fullname EQ nmnum */
     -5,  /* (275)cmd ::= PRAGMA fullname LP nmnum RP */
     -4,  /* (276)cmd ::= PRAGMA fullname EQ minus_num */
     -5,  /* (277)cmd ::= PRAGMA fullname LP minus_num RP */
     -1,  /* (278)nmnum ::= nm */
     -1,  /* (279)nmnum ::= ON */
     -1,  /* (280)nmnum ::= DELETE */
     -1,  /* (281)nmnum ::= DEFAULT */
     -2,  /* (282)plus_num ::= PLUS INTEGER|FLOAT */
     -1,  /* (283)plus_num ::= INTEGER|FLOAT */
     -2,  /* (284)minus_num ::= MINUS INTEGER|FLOAT */
    -14,  /* (285)cmd ::= createkw temp TRIGGER ifnotexists fullname trigger_time trigger_event ON fullname foreach_clause when_clause BEGIN trigger_cmd_list END */
     -1,  /* (286)trigger_time ::= BEFORE */
     -1,  /* (287)trigger_time ::= AFTER */
     -2,  /* (288)trigger_time ::= INSTEAD OF */
      0,  /* (289)trigger_time ::= */
     -1,  /* (290)trigger_event ::= DELETE */
     -1,  /* (291)trigger_event ::= INSERT */
     -1,  /* (292)trigger_event ::= UPDATE */
     -3,  /* (293)trigger_event ::= UPDATE OF idlist */
      0,  /* (294)foreach_clause ::= */
     -3,  /* (295)foreach_clause ::= FOR EACH ROW */
      0,  /* (296)when_clause ::= */
     -2,  /* (297)when_clause ::= WHEN expr */
     -3,  /* (298)trigger_cmd_list ::= trigger_cmd_list trigger_cmd SEMI */
     -2,  /* (299)trigger_cmd_list ::= trigger_cmd SEMI */
     -3,  /* (300)trnm ::= nm DOT nm */
     -3,  /* (301)tridxby ::= INDEXED BY nm */
     -2,  /* (302)tridxby ::= NOT INDEXED */
     -8,  /* (303)trigger_cmd ::= UPDATE orconf trnm tridxby SET setlist from where_opt */
     -6,  /* (304)trigger_cmd ::= insert_cmd INTO trnm idlist_opt select upsert */
     -5,  /* (305)trigger_cmd ::= DELETE FROM trnm tridxby where_opt */
     -1,  /* (306)trigger_cmd ::= select */
     -4,  /* (307)expr ::= RAISE LP IGNORE RP */
     -6,  /* (308)expr ::= RAISE LP raisetype COMMA expr RP */
     -1,  /* (309)raisetype ::= ROLLBACK */
     -1,  /* (310)raisetype ::= ABORT */
     -1,  /* (311)raisetype ::= FAIL */
     -4,  /* (312)cmd ::= DROP TRIGGER ifexists fullname */
     -6,  /* (313)cmd ::= ATTACH database_kw_opt expr AS expr key_opt */
     -3,  /* (314)cmd ::= DETACH database_kw_opt expr */
      0,  /* (315)key_opt ::= */
     -2,  /* (316)key_opt ::= KEY expr */
     -1,  /* (317)cmd ::= REINDEX */
     -2,  /* (318)cmd ::= REINDEX fullname */
     -1,  /* (319)cmd ::= ANALYZE */
     -2,  /* (320)cmd ::= ANALYZE fullname */
     -6,  /* (321)cmd ::= ALTER TABLE fullname RENAME TO nm */
     -7,  /* (322)cmd ::= ALTER TABLE fullname ADD kwcolumn_opt columnname carglist */
     -8,  /* (323)cmd ::= ALTER TABLE fullname RENAME kwcolumn_opt nm TO nm */
     -6,  /* (324)cmd ::= ALTER TABLE fullname DROP kwcolumn_opt nm */
     -1,  /* (325)cmd ::= create_vtab */
     -4,  /* (326)cmd ::= create_vtab LP vtabarglist RP */
     -7,  /* (327)create_vtab ::= createkw VIRTUAL TABLE ifnotexists fullname USING nm */
      0,  /* (328)vtabarg ::= */
     -1,  /* (329)vtabargtoken ::= ANY */
     -3,  /* (330)vtabargtoken ::= lp anylist RP */
     -1,  /* (331)lp ::= LP */
      0,  /* (332)with ::= */
     -2,  /* (333)with ::= WITH wqlist */
     -3,  /* (334)with ::= WITH RECURSIVE wqlist */
     -1,  /* (335)wqas ::= AS */
     -2,  /* (336)wqas ::= AS MATERIALIZED */
     -3,  /* (337)wqas ::= AS NOT MATERIALIZED */
     -6,  /* (338)wqitem ::= nm eidlist_opt wqas LP select RP */
     -1,  /* (339)wqlist ::= wqitem */
     -3,  /* (340)wqlist ::= wqlist COMMA wqitem */
     -1,  /* (341)windowdefn_list ::= windowdefn */
     -3,  /* (342)windowdefn_list ::= windowdefn_list COMMA windowdefn */
     -5,  /* (343)windowdefn ::= nm AS LP window RP */
     -5,  /* (344)window ::= PARTITION BY nexprlist orderby_opt frame_opt */
     -6,  /* (345)window ::= nm PARTITION BY nexprlist orderby_opt frame_opt */
     -4,  /* (346)window ::= ORDER BY sortlist frame_opt */
     -5,  /* (347)window ::= nm ORDER BY sortlist frame_opt */
     -1,  /* (348)window ::= frame_opt */
     -2,  /* (349)window ::= nm frame_opt */
      0,  /* (350)frame_opt ::= */
     -3,  /* (351)frame_opt ::= range_or_rows frame_bound_s frame_exclude_opt */
     -6,  /* (352)frame_opt ::= range_or_rows BETWEEN frame_bound_s AND frame_bound_e frame_exclude_opt */
     -1,  /* (353)range_or_rows ::= RANGE */
     -1,  /* (354)range_or_rows ::= ROWS */
     -1,  /* (355)range_or_rows ::= GROUPS */
     -1,  /* (356)frame_bound_s ::= frame_bound */
     -2,  /* (357)frame_bound_s ::= UNBOUNDED PRECEDING */
     -1,  /* (358)frame_bound_e ::= frame_bound */
     -2,  /* (359)frame_bound_e ::= UNBOUNDED FOLLOWING */
     -2,  /* (360)frame_bound ::= expr PRECEDING */
     -2,  /* (361)frame_bound ::= CURRENT ROW */
     -2,  /* (362)frame_bound ::= expr FOLLOWING */
      0,  /* (363)frame_exclude_opt ::= */
     -2,  /* (364)frame_exclude_opt ::= EXCLUDE frame_exclude */
     -2,  /* (365)frame_exclude ::= NO OTHERS */
     -2,  /* (366)frame_exclude ::= CURRENT ROW */
     -1,  /* (367)frame_exclude ::= GROUP */
     -1,  /* (368)frame_exclude ::= TIES */
     -2,  /* (369)window_clause ::= WINDOW windowdefn_list */
     -2,  /* (370)filter_over ::= filter_clause over_clause */
     -1,  /* (371)filter_over ::= over_clause */
     -1,  /* (372)filter_over ::= filter_clause */
     -4,  /* (373)over_clause ::= OVER LP window RP */
     -2,  /* (374)over_clause ::= OVER nm */
     -5,  /* (375)filter_clause ::= FILTER LP WHERE expr RP */
     -1,  /* (376)input ::= cmdlist */
     -2,  /* (377)cmdlist ::= cmdlist ecmd */
     -1,  /* (378)cmdlist ::= ecmd */
     -1,  /* (379)ecmd ::= SEMI */
     -2,  /* (380)ecmd ::= cmdx SEMI */
     -3,  /* (381)ecmd ::= explain cmdx SEMI */
     -1,  /* (382)savepoint_opt ::= SAVEPOINT */
      0,  /* (383)savepoint_opt ::= */
     -1,  /* (384)createkw ::= CREATE */
     -1,  /* (385)table_option_set ::= table_option */
     -1,  /* (386)signed ::= plus_num */
     -1,  /* (387)signed ::= minus_num */
      0,  /* (388)tconscomma ::= */
     -1,  /* (389)resolvetype ::= raisetype */
     -2,  /* (390)sclp ::= selcollist COMMA */
     -1,  /* (391)expr ::= term */
     -1,  /* (392)nmnum ::= plus_num */
     -1,  /* (393)trnm ::= nm */
      0,  /* (394)tridxby ::= */
     -1,  /* (395)database_kw_opt ::= DATABASE */
      0,  /* (396)database_kw_opt ::= */
      0,  /* (397)kwcolumn_opt ::= */
     -1,  /* (398)kwcolumn_opt ::= COLUMNKW */
     -1,  /* (399)vtabarglist ::= vtabarg */
     -3,  /* (400)vtabarglist ::= vtabarglist COMMA vtabarg */
     -2,  /* (401)vtabarg ::= vtabarg vtabargtoken */
      0,  /* (402)anylist ::= */
     -4,  /* (403)anylist ::= anylist LP anylist RP */
     -2,  /* (404)anylist ::= anylist ANY */
];

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
**
** The yyLookahead and yyLookaheadToken parameters provide reduce actions
** access to the lookahead token (if any).  The yyLookahead will be YYNOCODE
** if the lookahead token has already been consumed.  As this procedure is
** only called from one place, optimizing compilers will in-line it, which
** means that the extra parameters have no performance impact.
*/
impl yyParser<'_> {
    fn yy_reduce(
        &mut self,
        yyruleno: YYACTIONTYPE,    /* Number of the rule by which to reduce */
        yy_look_ahead: YYCODETYPE, /* Lookahead token, or YYNOCODE if none */
        yy_lookahead_token: &sqlite3ParserTOKENTYPE, /* Value of the lookahead token */
    ) -> Result<YYACTIONTYPE, sqlite3ParserError> {
        let _ = yy_look_ahead;
        let _ = yy_lookahead_token;

        let yylhsminor: YYMINORTYPE;
        match yyruleno {
  /* Beginning here are the reduction cases.  A typical example
  ** follows:
  **   case 0:
  **  #line <lineno> <grammarfile>
  **     { ... }           // User supplied code
  **  #line <lineno> <thisfile>
  **     break;
  */
/********** Begin reduce actions **********************************************/
      0 /* explain ::= EXPLAIN */
     => {
//line 79 "src/parser/parse.y"
{ self.ctx.explain = Some(ExplainKind::Explain); }
        }
      1 /* explain ::= EXPLAIN QUERY PLAN */
     => {
//line 80 "src/parser/parse.y"
{ self.ctx.explain = Some(ExplainKind::QueryPlan); }
        }
      2 /* cmdx ::= cmd */
     => {
//line 82 "src/parser/parse.y"
{ self.ctx.sqlite3_finish_coding(); }
        }
      3 /* cmd ::= BEGIN transtype trans_opt */
     => {
//line 87 "src/parser/parse.y"
{self.ctx.stmt = Some(Stmt::Begin(self.yy_move(-1).yy276(), self.yy_move(0).yy329()));}
        }
      4 /* trans_opt ::= */
     | 266 /* collate ::= */
     => {
//line 89 "src/parser/parse.y"
{self[1] .minor= YYMINORTYPE::yy329( None);}
        }
      5 /* trans_opt ::= TRANSACTION */
     => {
//line 90 "src/parser/parse.y"
{self[0] .minor= YYMINORTYPE::yy329( None);}
        }
      6 /* trans_opt ::= TRANSACTION nm */
     => {
//line 91 "src/parser/parse.y"
{self[-1] .minor= YYMINORTYPE::yy329( Some(self.yy_move(0).yy222()));}
        }
      7 /* transtype ::= */
     => {
//line 93 "src/parser/parse.y"
{self[1] .minor= YYMINORTYPE::yy276( None);}
        }
      8 /* transtype ::= DEFERRED */
     => {
//line 94 "src/parser/parse.y"
{self[0] .minor= YYMINORTYPE::yy276( Some(TransactionType::Deferred));}
        }
      9 /* transtype ::= IMMEDIATE */
     => {
//line 95 "src/parser/parse.y"
{self[0] .minor= YYMINORTYPE::yy276( Some(TransactionType::Immediate));}
        }
      10 /* transtype ::= EXCLUSIVE */
     => {
//line 96 "src/parser/parse.y"
{self[0] .minor= YYMINORTYPE::yy276( Some(TransactionType::Exclusive));}
        }
      11 /* cmd ::= COMMIT|END trans_opt */
     => {
//line 97 "src/parser/parse.y"
{self.ctx.stmt = Some(Stmt::Commit(self.yy_move(0).yy329()));}
        }
      12 /* cmd ::= ROLLBACK trans_opt */
     => {
//line 98 "src/parser/parse.y"
{self.ctx.stmt = Some(Stmt::Rollback{tx_name: self.yy_move(0).yy329(), savepoint_name: None});}
        }
      13 /* cmd ::= SAVEPOINT nm */
     => {
//line 102 "src/parser/parse.y"
{
  self.ctx.stmt = Some(Stmt::Savepoint(self.yy_move(0).yy222()));
}
        }
      14 /* cmd ::= RELEASE savepoint_opt nm */
     => {
//line 105 "src/parser/parse.y"
{
  self.ctx.stmt = Some(Stmt::Release(self.yy_move(0).yy222()));
}
        }
      15 /* cmd ::= ROLLBACK trans_opt TO savepoint_opt nm */
     => {
//line 108 "src/parser/parse.y"
{
  self.ctx.stmt = Some(Stmt::Rollback{tx_name: self.yy_move(-3).yy329(), savepoint_name: Some(self.yy_move(0).yy222())});
}
        }
      16 /* cmd ::= createkw temp TABLE ifnotexists fullname create_table_args */
     => {
//line 114 "src/parser/parse.y"
{
  self.ctx.stmt = Some(Stmt::CreateTable{ temporary: self.yy_move(-4).yy173(), if_not_exists: self.yy_move(-2).yy173(), tbl_name: self.yy_move(-1).yy474(), body: self.yy_move(0).yy203() });
}
        }
      17 /* ifnotexists ::= */
     | 20 /* temp ::= */
     | 58 /* autoinc ::= */
     | 96 /* ifexists ::= */
     | 261 /* uniqueflag ::= */
     => {
//line 120 "src/parser/parse.y"
{self[1] .minor= YYMINORTYPE::yy173( false);}
        }
      18 /* ifnotexists ::= IF NOT EXISTS */
     => {
//line 121 "src/parser/parse.y"
{self[-2] .minor= YYMINORTYPE::yy173( true);}
        }
      19 /* temp ::= TEMP */
     | 59 /* autoinc ::= AUTOINCR */
     | 260 /* uniqueflag ::= UNIQUE */
     => {
//line 124 "src/parser/parse.y"
{self[0] .minor= YYMINORTYPE::yy173( true);}
        }
      21 /* create_table_args ::= LP columnlist conslist_opt RP table_option_set */
     => {
//line 129 "src/parser/parse.y"
{
  self[-4] .minor= YYMINORTYPE::yy203( CreateTableBody::columns_and_constraints(self.yy_move(-3).yy285(), self.yy_move(-2).yy182(), self.yy_move(0).yy201())?);
}
        }
      22 /* create_table_args ::= AS select */
     => {
//line 132 "src/parser/parse.y"
{
  self[-1] .minor= YYMINORTYPE::yy203( CreateTableBody::AsSelect(self.yy_move(0).yy213()));
}
        }
      23 /* table_option_set ::= */
     => {
//line 137 "src/parser/parse.y"
{self[1] .minor= YYMINORTYPE::yy201( TableOptions::NONE);}
        }
      24 /* table_option_set ::= table_option_set COMMA table_option */
     => {
//line 139 "src/parser/parse.y"
{yylhsminor = YYMINORTYPE::yy201( self.yy_move(-2).yy201()|self.yy_move(0).yy201());}
  self[-2].minor = yylhsminor;
        }
      25 /* table_option ::= WITHOUT nm */
     => {
//line 140 "src/parser/parse.y"
{
  let option = self.yy_move(0).yy222();
  if option == "rowid" {
    self[-1] .minor= YYMINORTYPE::yy201( TableOptions::WITHOUT_ROWID);
  }else{
    return Err(custom_err!("unknown table option: {}", option));
  }
}
        }
      26 /* table_option ::= nm */
     => {
//line 148 "src/parser/parse.y"
{
  let option = self.yy_move(0).yy222();
  if option == "strict" {
    yylhsminor = YYMINORTYPE::yy201( TableOptions::STRICT);
  }else{
    return Err(custom_err!("unknown table option: {}", option));
  }
}
  self[0].minor = yylhsminor;
        }
      27 /* columnlist ::= columnlist COMMA columnname carglist */
     => {
//line 157 "src/parser/parse.y"
{
  let col = self.yy_move(-1).yy444();
  let cd = ColumnDefinition{ col_name: col.0, col_type: col.1, constraints: self.yy_move(0).yy305() };
  ColumnDefinition::add_column(self[-3].yy285_ref(), cd)?;
}
        }
      28 /* columnlist ::= columnname carglist */
     => {
//line 162 "src/parser/parse.y"
{
  let col = self.yy_move(-1).yy444();
  let cd = ColumnDefinition{ col_name: col.0, col_type: col.1, constraints: self.yy_move(0).yy305() };
  let mut map = IndexMap::new();
  ColumnDefinition::add_column(&mut map, cd)?;
  yylhsminor = YYMINORTYPE::yy285( map);
}
  self[-1].minor = yylhsminor;
        }
      29 /* columnname ::= nm typetoken */
     => {
//line 170 "src/parser/parse.y"
{yylhsminor = YYMINORTYPE::yy444( (self.yy_move(-1).yy222(), self.yy_move(0).yy362()));}
  self[-1].minor = yylhsminor;
        }
      30 /* nm ::= ID|INDEXED|JOIN_KW */
     | 31 /* nm ::= STRING */
     => {
//line 253 "src/parser/parse.y"
{ yylhsminor = YYMINORTYPE::yy222( Name::from_token(self[0].major, self.yy_move(0).yy0())); }
  self[0].minor = yylhsminor;
        }
      32 /* typetoken ::= */
     => {
//line 261 "src/parser/parse.y"
{self[1] .minor= YYMINORTYPE::yy362( None);}
        }
      33 /* typetoken ::= typename */
     => {
//line 262 "src/parser/parse.y"
{yylhsminor = YYMINORTYPE::yy362( Some(Type{ name: self.yy_move(0).yy220(), size: None }));}
  self[0].minor = yylhsminor;
        }
      34 /* typetoken ::= typename LP signed RP */
     => {
//line 263 "src/parser/parse.y"
{
  yylhsminor = YYMINORTYPE::yy362( Some(Type{ name: self.yy_move(-3).yy220(), size: Some(TypeSize::MaxSize(Box::new(self.yy_move(-1).yy480()))) }));
}
  self[-3].minor = yylhsminor;
        }
      35 /* typetoken ::= typename LP signed COMMA signed RP */
     => {
//line 266 "src/parser/parse.y"
{
  yylhsminor = YYMINORTYPE::yy362( Some(Type{ name: self.yy_move(-5).yy220(), size: Some(TypeSize::TypeSize(Box::new(self.yy_move(-3).yy480()), Box::new(self.yy_move(-1).yy480()))) }));
}
  self[-5].minor = yylhsminor;
        }
      36 /* typename ::= ID|STRING */
     => {
//line 270 "src/parser/parse.y"
{yylhsminor= YYMINORTYPE::yy220(from_token(self[0].major, self.yy_move(0).yy0()));}
  self[0].minor = yylhsminor;
        }
      37 /* typename ::= typename ID|STRING */
     => {
//line 271 "src/parser/parse.y"
{let ids=from_token(self[0].major, self.yy_move(0).yy0()); self[-1].yy220_ref().push(' '); self[-1].yy220_ref().push_str(&ids);}
        }
      38 /* carglist ::= carglist ccons */
     => {
//line 294 "src/parser/parse.y"
{if self.ctx.no_constraint_name() { let cc = self.yy_move(0).yy277(); self[-1].yy305_ref().push(cc); }}
        }
      39 /* carglist ::= */
     => {
//line 295 "src/parser/parse.y"
{self[1] .minor= YYMINORTYPE::yy305( vec![]);}
        }
      40 /* ccons ::= CONSTRAINT nm */
     => {
//line 297 "src/parser/parse.y"
{ self.ctx.constraint_name = Some(self.yy_move(0).yy222());}
        }
      41 /* ccons ::= DEFAULT term */
     => {
//line 298 "src/parser/parse.y"
{
  let name = self.ctx.constraint_name();
  let constraint = ColumnConstraint::Default(self.yy_move(0).yy480());
  self[-1] .minor= YYMINORTYPE::yy277( NamedColumnConstraint{ name, constraint });
}
        }
      42 /* ccons ::= DEFAULT LP expr RP */
     => {
//line 303 "src/parser/parse.y"
{
  let name = self.ctx.constraint_name();
  let constraint = ColumnConstraint::Default(Expr::parenthesized(self.yy_move(-1).yy480()));
  self[-3] .minor= YYMINORTYPE::yy277( NamedColumnConstraint{ name, constraint });
}
        }
      43 /* ccons ::= DEFAULT PLUS term */
     => {
//line 308 "src/parser/parse.y"
{
  let name = self.ctx.constraint_name();
  let constraint = ColumnConstraint::Default(Expr::Unary(UnaryOperator::Positive, Box::new(self.yy_move(0).yy480())));
  self[-2] .minor= YYMINORTYPE::yy277( NamedColumnConstraint{ name, constraint });
}
        }
      44 /* ccons ::= DEFAULT MINUS term */
     => {
//line 313 "src/parser/parse.y"
{
  let name = self.ctx.constraint_name();
  let constraint = ColumnConstraint::Default(Expr::Unary(UnaryOperator::Negative, Box::new(self.yy_move(0).yy480())));
  self[-2] .minor= YYMINORTYPE::yy277( NamedColumnConstraint{ name, constraint });
}
        }
      45 /* ccons ::= DEFAULT ID|INDEXED */
     => {
//line 318 "src/parser/parse.y"
{
  let name = self.ctx.constraint_name();
  let constraint = ColumnConstraint::Default(Expr::id(self[0].major, self.yy_move(0).yy0()));
  self[-1] .minor= YYMINORTYPE::yy277( NamedColumnConstraint{ name, constraint });
}
        }
      46 /* ccons ::= NULL onconf */
     => {
//line 327 "src/parser/parse.y"
{
  let name = self.ctx.constraint_name();
  let constraint = ColumnConstraint::NotNull{ nullable: true, conflict_clause: self.yy_move(0).yy254()};
  self[-1] .minor= YYMINORTYPE::yy277( NamedColumnConstraint{ name, constraint });
}
        }
      47 /* ccons ::= NOT NULL onconf */
     => {
//line 332 "src/parser/parse.y"
{
  let name = self.ctx.constraint_name();
  let constraint = ColumnConstraint::NotNull{ nullable: false, conflict_clause: self.yy_move(0).yy254()};
  self[-2] .minor= YYMINORTYPE::yy277( NamedColumnConstraint{ name, constraint });
}
        }
      48 /* ccons ::= PRIMARY KEY sortorder onconf autoinc */
     => {
//line 337 "src/parser/parse.y"
{
  let name = self.ctx.constraint_name();
  let constraint = ColumnConstraint::PrimaryKey{ order: self.yy_move(-2).yy296(), conflict_clause: self.yy_move(-1).yy254(), auto_increment: self.yy_move(0).yy173() };
  self[-4] .minor= YYMINORTYPE::yy277( NamedColumnConstraint{ name, constraint });
}
        }
      49 /* ccons ::= UNIQUE onconf */
     => {
//line 342 "src/parser/parse.y"
{
  let name = self.ctx.constraint_name();
  let constraint = ColumnConstraint::Unique(self.yy_move(0).yy254());
  self[-1] .minor= YYMINORTYPE::yy277( NamedColumnConstraint{ name, constraint });
}
        }
      50 /* ccons ::= CHECK LP expr RP */
     => {
//line 347 "src/parser/parse.y"
{
  let name = self.ctx.constraint_name();
  let constraint = ColumnConstraint::Check(self.yy_move(-1).yy480());
  self[-3] .minor= YYMINORTYPE::yy277( NamedColumnConstraint{ name, constraint });
}
        }
      51 /* ccons ::= REFERENCES nm eidlist_opt refargs */
     => {
//line 352 "src/parser/parse.y"
{
  let name = self.ctx.constraint_name();
  let clause = ForeignKeyClause{ tbl_name: self.yy_move(-2).yy222(), columns: self.yy_move(-1).yy143(), args: self.yy_move(0).yy404() };
  let constraint = ColumnConstraint::ForeignKey{ clause, deref_clause: None }; // FIXME deref_clause
  self[-3] .minor= YYMINORTYPE::yy277( NamedColumnConstraint{ name, constraint });
}
        }
      52 /* ccons ::= defer_subclause */
     => {
//line 358 "src/parser/parse.y"
{
  let constraint = ColumnConstraint::Defer(self.yy_move(0).yy394());
  yylhsminor = YYMINORTYPE::yy277( NamedColumnConstraint{ name: None, constraint });
}
  self[0].minor = yylhsminor;
        }
      53 /* ccons ::= COLLATE ID|STRING */
     => {
//line 362 "src/parser/parse.y"
{
  let name = self.ctx.constraint_name();
  let constraint = ColumnConstraint::Collate{ collation_name: Name::from_token(self[0].major, self.yy_move(0).yy0()) };
  self[-1] .minor= YYMINORTYPE::yy277( NamedColumnConstraint{ name, constraint });
}
        }
      54 /* ccons ::= GENERATED ALWAYS AS generated */
     => {
//line 367 "src/parser/parse.y"
{
  let name = self.ctx.constraint_name();
  let constraint = self.yy_move(0).yy84();
  self[-3] .minor= YYMINORTYPE::yy277( NamedColumnConstraint{ name, constraint });
}
        }
      55 /* ccons ::= AS generated */
     => {
//line 372 "src/parser/parse.y"
{
  let name = self.ctx.constraint_name();
  let constraint = self.yy_move(0).yy84();
  self[-1] .minor= YYMINORTYPE::yy277( NamedColumnConstraint{ name, constraint });
}
        }
      56 /* generated ::= LP expr RP */
     => {
//line 378 "src/parser/parse.y"
{
  self[-2] .minor= YYMINORTYPE::yy84( ColumnConstraint::Generated{ expr: self.yy_move(-1).yy480(), typ: None });
}
        }
      57 /* generated ::= LP expr RP ID */
     => {
//line 381 "src/parser/parse.y"
{
  self[-3] .minor= YYMINORTYPE::yy84( ColumnConstraint::Generated{ expr: self.yy_move(-2).yy480(), typ: Some(Id::from_token(self[0].major, self.yy_move(0).yy0())) });
}
        }
      60 /* refargs ::= */
     => {
//line 396 "src/parser/parse.y"
{ self[1] .minor= YYMINORTYPE::yy404( vec![]); /* EV: R-19803-45884 */}
        }
      61 /* refargs ::= refargs refarg */
     => {
//line 397 "src/parser/parse.y"
{ let ra = self.yy_move(0).yy432(); self[-1].yy404_ref().push(ra); }
        }
      62 /* refarg ::= MATCH nm */
     => {
//line 399 "src/parser/parse.y"
{ self[-1] .minor= YYMINORTYPE::yy432( RefArg::Match(self.yy_move(0).yy222())); }
        }
      63 /* refarg ::= ON INSERT refact */
     => {
//line 400 "src/parser/parse.y"
{ self[-2] .minor= YYMINORTYPE::yy432( RefArg::OnInsert(self.yy_move(0).yy238())); }
        }
      64 /* refarg ::= ON DELETE refact */
     => {
//line 401 "src/parser/parse.y"
{ self[-2] .minor= YYMINORTYPE::yy432( RefArg::OnDelete(self.yy_move(0).yy238())); }
        }
      65 /* refarg ::= ON UPDATE refact */
     => {
//line 402 "src/parser/parse.y"
{ self[-2] .minor= YYMINORTYPE::yy432( RefArg::OnUpdate(self.yy_move(0).yy238())); }
        }
      66 /* refact ::= SET NULL */
     => {
//line 404 "src/parser/parse.y"
{ self[-1] .minor= YYMINORTYPE::yy238( RefAct::SetNull);  /* EV: R-33326-45252 */}
        }
      67 /* refact ::= SET DEFAULT */
     => {
//line 405 "src/parser/parse.y"
{ self[-1] .minor= YYMINORTYPE::yy238( RefAct::SetDefault);  /* EV: R-33326-45252 */}
        }
      68 /* refact ::= CASCADE */
     => {
//line 406 "src/parser/parse.y"
{ self[0] .minor= YYMINORTYPE::yy238( RefAct::Cascade);  /* EV: R-33326-45252 */}
        }
      69 /* refact ::= RESTRICT */
     => {
//line 407 "src/parser/parse.y"
{ self[0] .minor= YYMINORTYPE::yy238( RefAct::Restrict); /* EV: R-33326-45252 */}
        }
      70 /* refact ::= NO ACTION */
     => {
//line 408 "src/parser/parse.y"
{ self[-1] .minor= YYMINORTYPE::yy238( RefAct::NoAction);     /* EV: R-33326-45252 */}
        }
      71 /* defer_subclause ::= NOT DEFERRABLE init_deferred_pred_opt */
     => {
//line 410 "src/parser/parse.y"
{self[-2] .minor= YYMINORTYPE::yy394( DeferSubclause{ deferrable: false, init_deferred: self.yy_move(0).yy300() });}
        }
      72 /* defer_subclause ::= DEFERRABLE init_deferred_pred_opt */
     => {
//line 411 "src/parser/parse.y"
{self[-1] .minor= YYMINORTYPE::yy394( DeferSubclause{ deferrable: true, init_deferred: self.yy_move(0).yy300() });}
        }
      73 /* init_deferred_pred_opt ::= */
     => {
//line 413 "src/parser/parse.y"
{self[1] .minor= YYMINORTYPE::yy300( None);}
        }
      74 /* init_deferred_pred_opt ::= INITIALLY DEFERRED */
     => {
//line 414 "src/parser/parse.y"
{self[-1] .minor= YYMINORTYPE::yy300( Some(InitDeferredPred::InitiallyDeferred));}
        }
      75 /* init_deferred_pred_opt ::= INITIALLY IMMEDIATE */
     => {
//line 415 "src/parser/parse.y"
{self[-1] .minor= YYMINORTYPE::yy300( Some(InitDeferredPred::InitiallyImmediate));}
        }
      76 /* conslist_opt ::= */
     => {
//line 418 "src/parser/parse.y"
{self[1] .minor= YYMINORTYPE::yy182( None);}
        }
      77 /* conslist_opt ::= COMMA conslist */
     => {
//line 419 "src/parser/parse.y"
{self[-1] .minor= YYMINORTYPE::yy182( Some(self.yy_move(0).yy559()));}
        }
      78 /* conslist ::= conslist tconscomma tcons */
     => {
//line 421 "src/parser/parse.y"
{if self.ctx.no_constraint_name() { let tc = self.yy_move(0).yy439(); self[-2].yy559_ref().push(tc); }}
        }
      79 /* conslist ::= tcons */
     => {
//line 422 "src/parser/parse.y"
{if self.ctx.no_constraint_name() { let tc = self.yy_move(0).yy439(); yylhsminor = YYMINORTYPE::yy559( vec![tc]); } else { yylhsminor = YYMINORTYPE::yy559( vec![]); }}
  self[0].minor = yylhsminor;
        }
      80 /* tconscomma ::= COMMA */
     => {
//line 423 "src/parser/parse.y"
{ self.ctx.constraint_name = None;}
        }
      81 /* tcons ::= CONSTRAINT nm */
     => {
//line 426 "src/parser/parse.y"
{ self.ctx.constraint_name = Some(self.yy_move(0).yy222())}
        }
      82 /* tcons ::= PRIMARY KEY LP sortlist autoinc RP onconf */
     => {
//line 427 "src/parser/parse.y"
{
  let name = self.ctx.constraint_name();
  let constraint = TableConstraint::PrimaryKey{ columns: self.yy_move(-3).yy536(), auto_increment: self.yy_move(-2).yy173(), conflict_clause: self.yy_move(0).yy254() };
  self[-6] .minor= YYMINORTYPE::yy439( NamedTableConstraint{ name, constraint });
}
        }
      83 /* tcons ::= UNIQUE LP sortlist RP onconf */
     => {
//line 432 "src/parser/parse.y"
{
  let name = self.ctx.constraint_name();
  let constraint = TableConstraint::Unique{ columns: self.yy_move(-2).yy536(), conflict_clause: self.yy_move(0).yy254() };
  self[-4] .minor= YYMINORTYPE::yy439( NamedTableConstraint{ name, constraint });
}
        }
      84 /* tcons ::= CHECK LP expr RP onconf */
     => {
//line 437 "src/parser/parse.y"
{
  let name = self.ctx.constraint_name();
  let constraint = TableConstraint::Check(self.yy_move(-2).yy480());
  self[-4] .minor= YYMINORTYPE::yy439( NamedTableConstraint{ name, constraint });
}
        }
      85 /* tcons ::= FOREIGN KEY LP eidlist RP REFERENCES nm eidlist_opt refargs defer_subclause_opt */
     => {
//line 443 "src/parser/parse.y"
{
  let name = self.ctx.constraint_name();
  let clause = ForeignKeyClause{ tbl_name: self.yy_move(-3).yy222(), columns: self.yy_move(-2).yy143(), args: self.yy_move(-1).yy404() };
  let constraint = TableConstraint::ForeignKey{ columns: self.yy_move(-6).yy360(), clause, deref_clause: self.yy_move(0).yy85() };
  self[-9] .minor= YYMINORTYPE::yy439( NamedTableConstraint{ name, constraint });
}
        }
      86 /* defer_subclause_opt ::= */
     => {
//line 450 "src/parser/parse.y"
{self[1] .minor= YYMINORTYPE::yy85( None);}
        }
      87 /* defer_subclause_opt ::= defer_subclause */
     => {
//line 451 "src/parser/parse.y"
{yylhsminor = YYMINORTYPE::yy85( Some(self.yy_move(0).yy394()));}
  self[0].minor = yylhsminor;
        }
      88 /* onconf ::= */
     | 90 /* orconf ::= */
     => {
//line 459 "src/parser/parse.y"
{self[1] .minor= YYMINORTYPE::yy254( None);}
        }
      89 /* onconf ::= ON CONFLICT resolvetype */
     => {
//line 460 "src/parser/parse.y"
{self[-2] .minor= YYMINORTYPE::yy254( Some(self.yy_move(0).yy207()));}
        }
      91 /* orconf ::= OR resolvetype */
     => {
//line 462 "src/parser/parse.y"
{self[-1] .minor= YYMINORTYPE::yy254( Some(self.yy_move(0).yy207()));}
        }
      92 /* resolvetype ::= IGNORE */
     => {
//line 464 "src/parser/parse.y"
{self[0] .minor= YYMINORTYPE::yy207( ResolveType::Ignore);}
        }
      93 /* resolvetype ::= REPLACE */
     => {
//line 465 "src/parser/parse.y"
{self[0] .minor= YYMINORTYPE::yy207( ResolveType::Replace);}
        }
      94 /* cmd ::= DROP TABLE ifexists fullname */
     => {
//line 469 "src/parser/parse.y"
{
  self.ctx.stmt = Some(Stmt::DropTable{ if_exists: self.yy_move(-1).yy173(), tbl_name: self.yy_move(0).yy474()});
}
        }
      95 /* ifexists ::= IF EXISTS */
     | 237 /* between_op ::= NOT BETWEEN */
     | 240 /* in_op ::= NOT IN */
     => {
//line 473 "src/parser/parse.y"
{self[-1] .minor= YYMINORTYPE::yy173( true);}
        }
      97 /* cmd ::= createkw temp VIEW ifnotexists fullname eidlist_opt AS select */
     => {
//line 480 "src/parser/parse.y"
{
  self.ctx.stmt = Some(Stmt::CreateView{ temporary: self.yy_move(-6).yy173(), if_not_exists: self.yy_move(-4).yy173(), view_name: self.yy_move(-3).yy474(), columns: self.yy_move(-2).yy143(),
                                         select: self.yy_move(0).yy213() });
}
        }
      98 /* cmd ::= DROP VIEW ifexists fullname */
     => {
//line 484 "src/parser/parse.y"
{
  self.ctx.stmt = Some(Stmt::DropView{ if_exists: self.yy_move(-1).yy173(), view_name: self.yy_move(0).yy474() });
}
        }
      99 /* cmd ::= select */
     => {
//line 491 "src/parser/parse.y"
{
  self.ctx.stmt = Some(Stmt::Select(self.yy_move(0).yy213()));
}
        }
      100 /* select ::= WITH wqlist selectnowith orderby_opt limit_opt */
     => {
//line 503 "src/parser/parse.y"
{
  self[-4] .minor= YYMINORTYPE::yy213( Select{ with: Some(With { recursive: false, ctes: self.yy_move(-3).yy97() }), body: self.yy_move(-2).yy503(), order_by: self.yy_move(-1).yy19(), limit: self.yy_move(0).yy331() });
}
        }
      101 /* select ::= WITH RECURSIVE wqlist selectnowith orderby_opt limit_opt */
     => {
//line 506 "src/parser/parse.y"
{
  self[-5] .minor= YYMINORTYPE::yy213( Select{ with: Some(With { recursive: true, ctes: self.yy_move(-3).yy97() }), body: self.yy_move(-2).yy503(), order_by: self.yy_move(-1).yy19(), limit: self.yy_move(0).yy331() });
}
        }
      102 /* select ::= selectnowith orderby_opt limit_opt */
     => {
//line 510 "src/parser/parse.y"
{
  self[-2] .minor= YYMINORTYPE::yy213( Select{ with: None, body: self.yy_move(-2).yy503(), order_by: self.yy_move(-1).yy19(), limit: self.yy_move(0).yy331() }); /*A-overwrites-X*/
}
        }
      103 /* selectnowith ::= oneselect */
     => {
//line 514 "src/parser/parse.y"
{
  yylhsminor = YYMINORTYPE::yy503( SelectBody{ select: self.yy_move(0).yy463(), compounds: None });
}
  self[0].minor = yylhsminor;
        }
      104 /* selectnowith ::= selectnowith multiselect_op oneselect */
     => {
//line 518 "src/parser/parse.y"
{
  let cs = CompoundSelect{ operator: self.yy_move(-1).yy166(), select: self.yy_move(0).yy463() };
  self[-2].yy503_ref().push(cs)?;
}
        }
      105 /* multiselect_op ::= UNION */
     => {
//line 523 "src/parser/parse.y"
{self[0] .minor= YYMINORTYPE::yy166( CompoundOperator::Union);}
        }
      106 /* multiselect_op ::= UNION ALL */
     => {
//line 524 "src/parser/parse.y"
{self[-1] .minor= YYMINORTYPE::yy166( CompoundOperator::UnionAll);}
        }
      107 /* multiselect_op ::= EXCEPT */
     => {
//line 525 "src/parser/parse.y"
{self[0] .minor= YYMINORTYPE::yy166( CompoundOperator::Except);}
        }
      108 /* multiselect_op ::= INTERSECT */
     => {
//line 526 "src/parser/parse.y"
{self[0] .minor= YYMINORTYPE::yy166( CompoundOperator::Intersect);}
        }
      109 /* oneselect ::= SELECT distinct selcollist from where_opt groupby_opt */
     => {
//line 530 "src/parser/parse.y"
{
  self[-5] .minor= YYMINORTYPE::yy463( OneSelect::Select{ distinctness: self.yy_move(-4).yy415(), columns: self.yy_move(-3).yy106(), from: self.yy_move(-2).yy485(), where_clause: self.yy_move(-1).yy479(),
                         group_by: self.yy_move(0).yy68(), window_clause: None });
    }
        }
      110 /* oneselect ::= SELECT distinct selcollist from where_opt groupby_opt window_clause */
     => {
//line 536 "src/parser/parse.y"
{
  self[-6] .minor= YYMINORTYPE::yy463( OneSelect::Select{ distinctness: self.yy_move(-5).yy415(), columns: self.yy_move(-4).yy106(), from: self.yy_move(-3).yy485(), where_clause: self.yy_move(-2).yy479(),
                         group_by: self.yy_move(-1).yy68(), window_clause: Some(self.yy_move(0).yy472()) });
}
        }
      111 /* oneselect ::= values */
     => {
//line 543 "src/parser/parse.y"
{ yylhsminor = YYMINORTYPE::yy463( OneSelect::Values(self.yy_move(0).yy468())); }
  self[0].minor = yylhsminor;
        }
      112 /* values ::= VALUES LP nexprlist RP */
     => {
//line 546 "src/parser/parse.y"
{
  self[-3] .minor= YYMINORTYPE::yy468( vec![self.yy_move(-1).yy312()]);
}
        }
      113 /* values ::= values COMMA LP nexprlist RP */
     => {
//line 549 "src/parser/parse.y"
{
  let exprs = self.yy_move(-1).yy312();
  OneSelect::push(self[-4].yy468_ref(), exprs)?;
}
        }
      114 /* distinct ::= DISTINCT */
     => {
//line 558 "src/parser/parse.y"
{self[0] .minor= YYMINORTYPE::yy415( Some(Distinctness::Distinct));}
        }
      115 /* distinct ::= ALL */
     => {
//line 559 "src/parser/parse.y"
{self[0] .minor= YYMINORTYPE::yy415( Some(Distinctness::All));}
        }
      116 /* distinct ::= */
     => {
//line 560 "src/parser/parse.y"
{self[1] .minor= YYMINORTYPE::yy415( None);}
        }
      117 /* sclp ::= */
     => {
//line 570 "src/parser/parse.y"
{self[1] .minor= YYMINORTYPE::yy106( Vec::<ResultColumn>::new());}
        }
      118 /* selcollist ::= sclp expr as */
     => {
//line 571 "src/parser/parse.y"
{
  let rc = ResultColumn::Expr(self.yy_move(-1).yy480(), self.yy_move(0).yy364());
  self[-2].yy106_ref().push(rc);
}
        }
      119 /* selcollist ::= sclp STAR */
     => {
//line 575 "src/parser/parse.y"
{
  let rc = ResultColumn::Star;
  self[-1].yy106_ref().push(rc);
}
        }
      120 /* selcollist ::= sclp nm DOT STAR */
     => {
//line 579 "src/parser/parse.y"
{
  let rc = ResultColumn::TableStar(self.yy_move(-2).yy222());
  self[-3].yy106_ref().push(rc);
}
        }
      121 /* as ::= AS nm */
     => {
//line 588 "src/parser/parse.y"
{self[-1] .minor= YYMINORTYPE::yy364( Some(As::As(self.yy_move(0).yy222())));}
        }
      122 /* as ::= ID|STRING */
     => {
//line 589 "src/parser/parse.y"
{yylhsminor = YYMINORTYPE::yy364( Some(As::Elided(Name::from_token(self[0].major, self.yy_move(0).yy0()))));}
  self[0].minor = yylhsminor;
        }
      123 /* as ::= */
     => {
//line 590 "src/parser/parse.y"
{self[1] .minor= YYMINORTYPE::yy364( None);}
        }
      124 /* from ::= */
     => {
//line 599 "src/parser/parse.y"
{self[1] .minor= YYMINORTYPE::yy485( None);}
        }
      125 /* from ::= FROM seltablist */
     => {
//line 600 "src/parser/parse.y"
{
  self[-1] .minor= YYMINORTYPE::yy485( Some(self.yy_move(0).yy314()));
}
        }
      126 /* stl_prefix ::= seltablist joinop */
     => {
//line 607 "src/parser/parse.y"
{
   let op = self.yy_move(0).yy577();
   self[-1].yy314_ref().push_op(op);
}
        }
      127 /* stl_prefix ::= */
     => {
//line 611 "src/parser/parse.y"
{self[1] .minor= YYMINORTYPE::yy314( FromClause::empty());}
        }
      128 /* seltablist ::= stl_prefix fullname as indexed_opt on_using */
     => {
//line 613 "src/parser/parse.y"
{
    let st = SelectTable::Table(self.yy_move(-3).yy474(), self.yy_move(-2).yy364(), self.yy_move(-1).yy181());
    let jc = self.yy_move(0).yy578();
    self[-4].yy314_ref().push(st, jc)?;
}
        }
      129 /* seltablist ::= stl_prefix fullname LP exprlist RP as on_using */
     => {
//line 619 "src/parser/parse.y"
{
    let st = SelectTable::TableCall(self.yy_move(-5).yy474(), self.yy_move(-3).yy419(), self.yy_move(-1).yy364());
    let jc = self.yy_move(0).yy578();
    self[-6].yy314_ref().push(st, jc)?;
}
        }
      130 /* seltablist ::= stl_prefix LP select RP as on_using */
     => {
//line 626 "src/parser/parse.y"
{
    let st = SelectTable::Select(self.yy_move(-3).yy213(), self.yy_move(-1).yy364());
    let jc = self.yy_move(0).yy578();
    self[-5].yy314_ref().push(st, jc)?;
  }
        }
      131 /* seltablist ::= stl_prefix LP seltablist RP as on_using */
     => {
//line 632 "src/parser/parse.y"
{
    let st = SelectTable::Sub(self.yy_move(-3).yy314(), self.yy_move(-1).yy364());
    let jc = self.yy_move(0).yy578();
    self[-5].yy314_ref().push(st, jc)?;
  }
        }
      132 /* fullname ::= nm */
     => {
//line 640 "src/parser/parse.y"
{
  yylhsminor = YYMINORTYPE::yy474( QualifiedName::single(self.yy_move(0).yy222()));
}
  self[0].minor = yylhsminor;
        }
      133 /* fullname ::= nm DOT nm */
     => {
//line 643 "src/parser/parse.y"
{
  yylhsminor = YYMINORTYPE::yy474( QualifiedName::fullname(self.yy_move(-2).yy222(), self.yy_move(0).yy222()));
}
  self[-2].minor = yylhsminor;
        }
      134 /* xfullname ::= nm */
     => {
//line 649 "src/parser/parse.y"
{self[0] .minor= YYMINORTYPE::yy474( QualifiedName::single(self.yy_move(0).yy222())); /*A-overwrites-X*/}
        }
      135 /* xfullname ::= nm DOT nm */
     => {
//line 651 "src/parser/parse.y"
{self[-2] .minor= YYMINORTYPE::yy474( QualifiedName::fullname(self.yy_move(-2).yy222(), self.yy_move(0).yy222())); /*A-overwrites-X*/}
        }
      136 /* xfullname ::= nm DOT nm AS nm */
     => {
//line 652 "src/parser/parse.y"
{
   self[-4] .minor= YYMINORTYPE::yy474( QualifiedName::xfullname(self.yy_move(-4).yy222(), self.yy_move(-2).yy222(), self.yy_move(0).yy222())); /*A-overwrites-X*/
}
        }
      137 /* xfullname ::= nm AS nm */
     => {
//line 655 "src/parser/parse.y"
{
   self[-2] .minor= YYMINORTYPE::yy474( QualifiedName::alias(self.yy_move(-2).yy222(), self.yy_move(0).yy222())); /*A-overwrites-X*/
}
        }
      138 /* joinop ::= COMMA */
     => {
//line 660 "src/parser/parse.y"
{ self[0] .minor= YYMINORTYPE::yy577( JoinOperator::Comma); }
        }
      139 /* joinop ::= JOIN */
     => {
//line 661 "src/parser/parse.y"
{ self[0] .minor= YYMINORTYPE::yy577( JoinOperator::TypedJoin(None)); }
        }
      140 /* joinop ::= JOIN_KW JOIN */
     => {
//line 663 "src/parser/parse.y"
{self[-1] .minor= YYMINORTYPE::yy577( JoinOperator::from(self.yy_move(-1).yy0(), None, None)?);  /*X-overwrites-A*/}
        }
      141 /* joinop ::= JOIN_KW nm JOIN */
     => {
//line 665 "src/parser/parse.y"
{self[-2] .minor= YYMINORTYPE::yy577( JoinOperator::from(self.yy_move(-2).yy0(), Some(self.yy_move(-1).yy222()), None)?); /*X-overwrites-A*/}
        }
      142 /* joinop ::= JOIN_KW nm nm JOIN */
     => {
//line 667 "src/parser/parse.y"
{self[-3] .minor= YYMINORTYPE::yy577( JoinOperator::from(self.yy_move(-3).yy0(), Some(self.yy_move(-2).yy222()), Some(self.yy_move(-1).yy222()))?);/*X-overwrites-A*/}
        }
      143 /* on_using ::= ON expr */
     => {
//line 687 "src/parser/parse.y"
{self[-1] .minor= YYMINORTYPE::yy578( Some(JoinConstraint::On(self.yy_move(0).yy480())));}
        }
      144 /* on_using ::= USING LP idlist RP */
     => {
//line 688 "src/parser/parse.y"
{self[-3] .minor= YYMINORTYPE::yy578( Some(JoinConstraint::Using(self.yy_move(-1).yy279())));}
        }
      145 /* on_using ::= */
     => {
//line 689 "src/parser/parse.y"
{self[1] .minor= YYMINORTYPE::yy578( None);}
        }
      146 /* indexed_opt ::= */
     => {
//line 702 "src/parser/parse.y"
{self[1] .minor= YYMINORTYPE::yy181( None);}
        }
      147 /* indexed_opt ::= INDEXED BY nm */
     => {
//line 703 "src/parser/parse.y"
{self[-2] .minor= YYMINORTYPE::yy181( Some(Indexed::IndexedBy(self.yy_move(0).yy222())));}
        }
      148 /* indexed_opt ::= NOT INDEXED */
     => {
//line 704 "src/parser/parse.y"
{self[-1] .minor= YYMINORTYPE::yy181( Some(Indexed::NotIndexed));}
        }
      149 /* orderby_opt ::= */
     => {
//line 714 "src/parser/parse.y"
{self[1] .minor= YYMINORTYPE::yy19( None);}
        }
      150 /* orderby_opt ::= ORDER BY sortlist */
     => {
//line 715 "src/parser/parse.y"
{self[-2] .minor= YYMINORTYPE::yy19( Some(self.yy_move(0).yy536()));}
        }
      151 /* sortlist ::= sortlist COMMA expr sortorder nulls */
     => {
//line 716 "src/parser/parse.y"
{
  let sc = SortedColumn { expr: self.yy_move(-2).yy480(), order: self.yy_move(-1).yy296(), nulls: self.yy_move(0).yy322() };
  self[-4].yy536_ref().push(sc);
}
        }
      152 /* sortlist ::= expr sortorder nulls */
     => {
//line 720 "src/parser/parse.y"
{
  self[-2] .minor= YYMINORTYPE::yy536( vec![SortedColumn { expr: self.yy_move(-2).yy480(), order: self.yy_move(-1).yy296(), nulls: self.yy_move(0).yy322() }]); /*A-overwrites-Y*/
}
        }
      153 /* sortorder ::= ASC */
     => {
//line 726 "src/parser/parse.y"
{self[0] .minor= YYMINORTYPE::yy296( Some(SortOrder::Asc));}
        }
      154 /* sortorder ::= DESC */
     => {
//line 727 "src/parser/parse.y"
{self[0] .minor= YYMINORTYPE::yy296( Some(SortOrder::Desc));}
        }
      155 /* sortorder ::= */
     => {
//line 728 "src/parser/parse.y"
{self[1] .minor= YYMINORTYPE::yy296( None);}
        }
      156 /* nulls ::= NULLS FIRST */
     => {
//line 731 "src/parser/parse.y"
{self[-1] .minor= YYMINORTYPE::yy322( Some(NullsOrder::First));}
        }
      157 /* nulls ::= NULLS LAST */
     => {
//line 732 "src/parser/parse.y"
{self[-1] .minor= YYMINORTYPE::yy322( Some(NullsOrder::Last));}
        }
      158 /* nulls ::= */
     => {
//line 733 "src/parser/parse.y"
{self[1] .minor= YYMINORTYPE::yy322( None);}
        }
      159 /* groupby_opt ::= */
     => {
//line 736 "src/parser/parse.y"
{self[1] .minor= YYMINORTYPE::yy68( None);}
        }
      160 /* groupby_opt ::= GROUP BY nexprlist having_opt */
     => {
//line 737 "src/parser/parse.y"
{self[-3] .minor= YYMINORTYPE::yy68( Some(GroupBy{ exprs: self.yy_move(-1).yy312(), having: self.yy_move(0).yy479() }));}
        }
      161 /* having_opt ::= */
     | 168 /* where_opt ::= */
     | 250 /* case_else ::= */
     | 252 /* case_operand ::= */
     | 272 /* vinto ::= */
     => {
//line 740 "src/parser/parse.y"
{self[1] .minor= YYMINORTYPE::yy479( None);}
        }
      162 /* having_opt ::= HAVING expr */
     | 169 /* where_opt ::= WHERE expr */
     | 249 /* case_else ::= ELSE expr */
     | 271 /* vinto ::= INTO expr */
     => {
//line 741 "src/parser/parse.y"
{self[-1] .minor= YYMINORTYPE::yy479( Some(self.yy_move(0).yy480()));}
        }
      163 /* limit_opt ::= */
     => {
//line 753 "src/parser/parse.y"
{self[1] .minor= YYMINORTYPE::yy331( None);}
        }
      164 /* limit_opt ::= LIMIT expr */
     => {
//line 755 "src/parser/parse.y"
{self[-1] .minor= YYMINORTYPE::yy331( Some(Limit{ expr: self.yy_move(0).yy480(), offset: None }));}
        }
      165 /* limit_opt ::= LIMIT expr OFFSET expr */
     | 166 /* limit_opt ::= LIMIT expr COMMA expr */
     => {
//line 757 "src/parser/parse.y"
{self[-3] .minor= YYMINORTYPE::yy331( Some(Limit{ expr: self.yy_move(-2).yy480(), offset: Some(self.yy_move(0).yy480()) }));}
        }
      167 /* cmd ::= with DELETE FROM xfullname indexed_opt where_opt_ret orderby_opt limit_opt */
     => {
//line 765 "src/parser/parse.y"
{
  let (where_clause, returning) = self.yy_move(-2).yy496();
  self.ctx.stmt = Some(Stmt::Delete{ with: self.yy_move(-7).yy280(), tbl_name: self.yy_move(-4).yy474(), indexed: self.yy_move(-3).yy181(), where_clause, returning,
                                     order_by: self.yy_move(-1).yy19(), limit: self.yy_move(0).yy331() });
}
        }
      170 /* where_opt_ret ::= */
     => {
//line 783 "src/parser/parse.y"
{self[1] .minor= YYMINORTYPE::yy496( (None, None));}
        }
      171 /* where_opt_ret ::= WHERE expr */
     => {
//line 784 "src/parser/parse.y"
{self[-1] .minor= YYMINORTYPE::yy496( (Some(self.yy_move(0).yy480()), None));}
        }
      172 /* where_opt_ret ::= RETURNING selcollist */
     => {
//line 786 "src/parser/parse.y"
{self[-1] .minor= YYMINORTYPE::yy496( (None, Some(self.yy_move(0).yy106())));}
        }
      173 /* where_opt_ret ::= WHERE expr RETURNING selcollist */
     => {
//line 788 "src/parser/parse.y"
{self[-3] .minor= YYMINORTYPE::yy496( (Some(self.yy_move(-2).yy480()), Some(self.yy_move(0).yy106())));}
        }
      174 /* cmd ::= with UPDATE orconf xfullname indexed_opt SET setlist from where_opt_ret orderby_opt limit_opt */
     => {
//line 794 "src/parser/parse.y"
{
  let (where_clause, returning) = self.yy_move(-2).yy496();
  self.ctx.stmt = Some(Stmt::Update { with: self.yy_move(-10).yy280(), or_conflict: self.yy_move(-8).yy254(), tbl_name: self.yy_move(-7).yy474(), indexed: self.yy_move(-6).yy181(), sets: self.yy_move(-4).yy517(), from: self.yy_move(-3).yy485(),
                                      where_clause, returning, order_by: self.yy_move(-1).yy19(), limit: self.yy_move(0).yy331() });
}
        }
      175 /* setlist ::= setlist COMMA nm EQ expr */
     => {
//line 812 "src/parser/parse.y"
{
  let s = Set{ col_names: DistinctNames::single(self.yy_move(-2).yy222()), expr: self.yy_move(0).yy480() };
  self[-4].yy517_ref().push(s);
}
        }
      176 /* setlist ::= setlist COMMA LP idlist RP EQ expr */
     => {
//line 816 "src/parser/parse.y"
{
  let s = Set{ col_names: self.yy_move(-3).yy279(), expr: self.yy_move(0).yy480() };
  self[-6].yy517_ref().push(s);
}
        }
      177 /* setlist ::= nm EQ expr */
     => {
//line 820 "src/parser/parse.y"
{
  yylhsminor = YYMINORTYPE::yy517( vec![Set{ col_names: DistinctNames::single(self.yy_move(-2).yy222()), expr: self.yy_move(0).yy480() }]);
}
  self[-2].minor = yylhsminor;
        }
      178 /* setlist ::= LP idlist RP EQ expr */
     => {
//line 823 "src/parser/parse.y"
{
  self[-4] .minor= YYMINORTYPE::yy517( vec![Set{ col_names: self.yy_move(-3).yy279(), expr: self.yy_move(0).yy480() }]);
}
        }
      179 /* cmd ::= with insert_cmd INTO xfullname idlist_opt select upsert */
     => {
//line 830 "src/parser/parse.y"
{
  let (upsert, returning) = self.yy_move(0).yy504();
  let body = InsertBody::Select(self.yy_move(-1).yy213(), upsert);
  self.ctx.stmt = Some(Stmt::Insert{ with: self.yy_move(-6).yy280(), or_conflict: self.yy_move(-5).yy254(), tbl_name: self.yy_move(-3).yy474(), columns: self.yy_move(-2).yy18(),
                                     body, returning });
}
        }
      180 /* cmd ::= with insert_cmd INTO xfullname idlist_opt DEFAULT VALUES returning */
     => {
//line 837 "src/parser/parse.y"
{
  let body = InsertBody::DefaultValues;
  self.ctx.stmt = Some(Stmt::Insert{ with: self.yy_move(-7).yy280(), or_conflict: self.yy_move(-6).yy254(), tbl_name: self.yy_move(-4).yy474(), columns: self.yy_move(-3).yy18(),
                                     body, returning: self.yy_move(0).yy265() });
}
        }
      181 /* upsert ::= */
     => {
//line 850 "src/parser/parse.y"
{ self[1] .minor= YYMINORTYPE::yy504( (None, None)); }
        }
      182 /* upsert ::= RETURNING selcollist */
     => {
//line 851 "src/parser/parse.y"
{ self[-1] .minor= YYMINORTYPE::yy504( (None, Some(self.yy_move(0).yy106()))); }
        }
      183 /* upsert ::= ON CONFLICT LP sortlist RP where_opt DO UPDATE SET setlist where_opt upsert */
     => {
//line 854 "src/parser/parse.y"
{ let index = UpsertIndex{ targets: self.yy_move(-8).yy536(), where_clause: self.yy_move(-6).yy479() };
                let do_clause = UpsertDo::Set{ sets: self.yy_move(-2).yy517(), where_clause: self.yy_move(-1).yy479() };
                let (next, returning) = self.yy_move(0).yy504();
                self[-11] .minor= YYMINORTYPE::yy504( (Some(Upsert{ index: Some(index), do_clause, next: next.map(Box::new) }), returning));}
        }
      184 /* upsert ::= ON CONFLICT LP sortlist RP where_opt DO NOTHING upsert */
     => {
//line 859 "src/parser/parse.y"
{ let index = UpsertIndex{ targets: self.yy_move(-5).yy536(), where_clause: self.yy_move(-3).yy479() };
                let (next, returning) = self.yy_move(0).yy504();
                self[-8] .minor= YYMINORTYPE::yy504( (Some(Upsert{ index: Some(index), do_clause: UpsertDo::Nothing, next: next.map(Box::new) }), returning)); }
        }
      185 /* upsert ::= ON CONFLICT DO NOTHING returning */
     => {
//line 863 "src/parser/parse.y"
{ self[-4] .minor= YYMINORTYPE::yy504( (Some(Upsert{ index: None, do_clause: UpsertDo::Nothing, next: None }), self.yy_move(0).yy265())); }
        }
      186 /* upsert ::= ON CONFLICT DO UPDATE SET setlist where_opt returning */
     => {
//line 865 "src/parser/parse.y"
{ let do_clause = UpsertDo::Set{ sets: self.yy_move(-2).yy517(), where_clause: self.yy_move(-1).yy479() };
                self[-7] .minor= YYMINORTYPE::yy504( (Some(Upsert{ index: None, do_clause, next: None }), self.yy_move(0).yy265()));}
        }
      187 /* returning ::= RETURNING selcollist */
     => {
//line 869 "src/parser/parse.y"
{self[-1] .minor= YYMINORTYPE::yy265( Some(self.yy_move(0).yy106()));}
        }
      188 /* returning ::= */
     => {
//line 870 "src/parser/parse.y"
{self[1] .minor= YYMINORTYPE::yy265( None);}
        }
      189 /* insert_cmd ::= INSERT orconf */
     => {
//line 873 "src/parser/parse.y"
{self[-1] .minor= YYMINORTYPE::yy254( self.yy_move(0).yy254());}
        }
      190 /* insert_cmd ::= REPLACE */
     => {
//line 874 "src/parser/parse.y"
{self[0] .minor= YYMINORTYPE::yy254( Some(ResolveType::Replace));}
        }
      191 /* idlist_opt ::= */
     => {
//line 878 "src/parser/parse.y"
{self[1] .minor= YYMINORTYPE::yy18( None);}
        }
      192 /* idlist_opt ::= LP idlist RP */
     => {
//line 879 "src/parser/parse.y"
{self[-2] .minor= YYMINORTYPE::yy18( Some(self.yy_move(-1).yy279()));}
        }
      193 /* idlist ::= idlist COMMA nm */
     => {
//line 881 "src/parser/parse.y"
{let id = self.yy_move(0).yy222(); self[-2].yy279_ref().insert(id)?;}
        }
      194 /* idlist ::= nm */
     => {
//line 883 "src/parser/parse.y"
{ self[0] .minor= YYMINORTYPE::yy279( DistinctNames::new(self.yy_move(0).yy222())); /*A-overwrites-Y*/}
        }
      195 /* expr ::= LP expr RP */
     => {
//line 895 "src/parser/parse.y"
{self[-2] .minor= YYMINORTYPE::yy480( Expr::parenthesized(self.yy_move(-1).yy480()));}
        }
      196 /* expr ::= ID|INDEXED|JOIN_KW */
     => {
//line 896 "src/parser/parse.y"
{self[0].minor= YYMINORTYPE::yy480( Expr::id(self[0].major, self.yy_move(0).yy0())); /*A-overwrites-X*/}
        }
      197 /* expr ::= nm DOT nm */
     => {
//line 897 "src/parser/parse.y"
{
  self[-2] .minor= YYMINORTYPE::yy480( Expr::Qualified(self.yy_move(-2).yy222(), self.yy_move(0).yy222())); /*A-overwrites-X*/
}
        }
      198 /* expr ::= nm DOT nm DOT nm */
     => {
//line 900 "src/parser/parse.y"
{
  self[-4] .minor= YYMINORTYPE::yy480( Expr::DoublyQualified(self.yy_move(-4).yy222(), self.yy_move(-2).yy222(), self.yy_move(0).yy222())); /*A-overwrites-X*/
}
        }
      199 /* term ::= NULL */
     => {
//line 903 "src/parser/parse.y"
{self[0].minor= YYMINORTYPE::yy480(Expr::Literal(Literal::Null));}
        }
      200 /* term ::= BLOB */
     => {
//line 904 "src/parser/parse.y"
{self[0].minor= YYMINORTYPE::yy480(Expr::Literal(Literal::Blob(self.yy_move(0).yy0().unwrap()))); /*A-overwrites-X*/}
        }
      201 /* term ::= STRING */
     => {
//line 905 "src/parser/parse.y"
{self[0].minor= YYMINORTYPE::yy480(Expr::Literal(Literal::String(self.yy_move(0).yy0().unwrap()))); /*A-overwrites-X*/}
        }
      202 /* term ::= FLOAT|INTEGER */
     => {
//line 906 "src/parser/parse.y"
{
  self[0] .minor= YYMINORTYPE::yy480( Expr::Literal(Literal::Numeric(self.yy_move(0).yy0().unwrap()))); /*A-overwrites-X*/
}
        }
      203 /* expr ::= VARIABLE */
     => {
//line 909 "src/parser/parse.y"
{
  self[0] .minor= YYMINORTYPE::yy480( Expr::Variable(self.yy_move(0).yy0().unwrap())); /*A-overwrites-X*/
}
        }
      204 /* expr ::= expr COLLATE ID|STRING */
     => {
//line 912 "src/parser/parse.y"
{
  self[-2] .minor= YYMINORTYPE::yy480( Expr::collate(self.yy_move(-2).yy480(), self[0].major, self.yy_move(0).yy0())); /*A-overwrites-X*/
}
        }
      205 /* expr ::= CAST LP expr AS typetoken RP */
     => {
//line 916 "src/parser/parse.y"
{
  self[-5] .minor= YYMINORTYPE::yy480( Expr::cast(self.yy_move(-3).yy480(), self.yy_move(-1).yy362()));
}
        }
      206 /* expr ::= ID|INDEXED|JOIN_KW LP distinct exprlist RP */
     => {
//line 921 "src/parser/parse.y"
{
  self[-4] .minor= YYMINORTYPE::yy480( Expr::FunctionCall{ name: Id::from_token(self[-4].major, self.yy_move(-4).yy0()), distinctness: self.yy_move(-2).yy415(), args: self.yy_move(-1).yy419(), order_by: None, filter_over: None }); /*A-overwrites-X*/
}
        }
      207 /* expr ::= ID|INDEXED|JOIN_KW LP distinct exprlist ORDER BY sortlist RP */
     => {
//line 924 "src/parser/parse.y"
{
  self[-7] .minor= YYMINORTYPE::yy480( Expr::FunctionCall{ name: Id::from_token(self[-7].major, self.yy_move(-7).yy0()), distinctness: self.yy_move(-5).yy415(), args: self.yy_move(-4).yy419(), order_by: Some(self.yy_move(-1).yy536()), filter_over: None }); /*A-overwrites-X*/
}
        }
      208 /* expr ::= ID|INDEXED|JOIN_KW LP STAR RP */
     => {
//line 927 "src/parser/parse.y"
{
  self[-3] .minor= YYMINORTYPE::yy480( Expr::FunctionCallStar{ name: Id::from_token(self[-3].major, self.yy_move(-3).yy0()), filter_over: None }); /*A-overwrites-X*/
}
        }
      209 /* expr ::= ID|INDEXED|JOIN_KW LP distinct exprlist RP filter_over */
     => {
//line 932 "src/parser/parse.y"
{
  self[-5] .minor= YYMINORTYPE::yy480( Expr::FunctionCall{ name: Id::from_token(self[-5].major, self.yy_move(-5).yy0()), distinctness: self.yy_move(-3).yy415(), args: self.yy_move(-2).yy419(), order_by: None, filter_over: Some(self.yy_move(0).yy353()) }); /*A-overwrites-X*/
}
        }
      210 /* expr ::= ID|INDEXED|JOIN_KW LP distinct exprlist ORDER BY sortlist RP filter_over */
     => {
//line 935 "src/parser/parse.y"
{
  self[-8] .minor= YYMINORTYPE::yy480( Expr::FunctionCall{ name: Id::from_token(self[-8].major, self.yy_move(-8).yy0()), distinctness: self.yy_move(-6).yy415(), args: self.yy_move(-5).yy419(), order_by: Some(self.yy_move(-2).yy536()), filter_over: Some(self.yy_move(0).yy353()) }); /*A-overwrites-X*/
}
        }
      211 /* expr ::= ID|INDEXED|JOIN_KW LP STAR RP filter_over */
     => {
//line 938 "src/parser/parse.y"
{
  self[-4] .minor= YYMINORTYPE::yy480( Expr::FunctionCallStar{ name: Id::from_token(self[-4].major, self.yy_move(-4).yy0()), filter_over: Some(self.yy_move(0).yy353()) }); /*A-overwrites-X*/
}
        }
      212 /* term ::= CTIME_KW */
     => {
//line 943 "src/parser/parse.y"
{
  yylhsminor = YYMINORTYPE::yy480( Expr::Literal(Literal::from_ctime_kw(self.yy_move(0).yy0())));
}
  self[0].minor = yylhsminor;
        }
      213 /* expr ::= LP nexprlist COMMA expr RP */
     => {
//line 947 "src/parser/parse.y"
{
  let mut x = self.yy_move(-3).yy312();
  x.push(self.yy_move(-1).yy480());
  self[-4] .minor= YYMINORTYPE::yy480( Expr::Parenthesized(x));
}
        }
      214 /* expr ::= expr AND expr */
     | 215 /* expr ::= expr OR expr */
     | 216 /* expr ::= expr LT|GT|GE|LE expr */
     | 217 /* expr ::= expr EQ|NE expr */
     | 218 /* expr ::= expr BITAND|BITOR|LSHIFT|RSHIFT expr */
     | 219 /* expr ::= expr PLUS|MINUS expr */
     | 220 /* expr ::= expr STAR|SLASH|REM expr */
     | 221 /* expr ::= expr CONCAT expr */
     => {
//line 953 "src/parser/parse.y"
{self[-2].minor= YYMINORTYPE::yy480(Expr::binary(self.yy_move(-2).yy480(),self[-1].major,self.yy_move(0).yy480())); /*A-overwrites-X*/}
        }
      222 /* likeop ::= LIKE_KW|MATCH */
     => {
//line 966 "src/parser/parse.y"
{yylhsminor= YYMINORTYPE::yy343((false, LikeOperator::from_token(self[0].major, self.yy_move(0).yy0()))); /*yylhsminor.yy343_ref()-overwrite-self.yy_move(0).yy0()*/}
  self[0].minor = yylhsminor;
        }
      223 /* likeop ::= NOT LIKE_KW|MATCH */
     => {
//line 967 "src/parser/parse.y"
{self[-1].minor= YYMINORTYPE::yy343((true, LikeOperator::from_token(self[0].major, self.yy_move(0).yy0()))); /*self[-1].yy343_ref()-overwrite-self.yy_move(0).yy0()*/}
        }
      224 /* expr ::= expr likeop expr */
     => {
//line 968 "src/parser/parse.y"
{
  let op = self.yy_move(-1).yy343();
  self[-2].minor= YYMINORTYPE::yy480(Expr::like(self.yy_move(-2).yy480(),op.0,op.1,self.yy_move(0).yy480(),None)); /*A-overwrites-X*/
}
        }
      225 /* expr ::= expr likeop expr ESCAPE expr */
     => {
//line 972 "src/parser/parse.y"
{
  let op = self.yy_move(-3).yy343();
  self[-4].minor= YYMINORTYPE::yy480(Expr::like(self.yy_move(-4).yy480(),op.0,op.1,self.yy_move(-2).yy480(),Some(self.yy_move(0).yy480()))); /*A-overwrites-X*/
}
        }
      226 /* expr ::= expr ISNULL|NOTNULL */
     => {
//line 977 "src/parser/parse.y"
{self[-1] .minor= YYMINORTYPE::yy480( Expr::not_null(self.yy_move(-1).yy480(), self[0].major)); /*A-overwrites-X*/}
        }
      227 /* expr ::= expr NOT NULL */
     => {
//line 978 "src/parser/parse.y"
{self[-2] .minor= YYMINORTYPE::yy480( Expr::not_null(self.yy_move(-2).yy480(), TokenType::TK_NOTNULL as YYCODETYPE)); /*A-overwrites-X*/}
        }
      228 /* expr ::= expr IS expr */
     => {
//line 989 "src/parser/parse.y"
{
  self[-2] .minor= YYMINORTYPE::yy480( Expr::binary(self.yy_move(-2).yy480(), self[-1].major, self.yy_move(0).yy480())); /*A-overwrites-X*/
}
        }
      229 /* expr ::= expr IS NOT expr */
     => {
//line 992 "src/parser/parse.y"
{
  self[-3] .minor= YYMINORTYPE::yy480( Expr::binary(self.yy_move(-3).yy480(), TokenType::TK_NOT as YYCODETYPE, self.yy_move(0).yy480())); /*A-overwrites-X*/
}
        }
      230 /* expr ::= expr IS NOT DISTINCT FROM expr */
     => {
//line 995 "src/parser/parse.y"
{
  self[-5] .minor= YYMINORTYPE::yy480( Expr::binary(self.yy_move(-5).yy480(), TokenType::TK_IS as YYCODETYPE, self.yy_move(0).yy480())); /*A-overwrites-X*/
}
        }
      231 /* expr ::= expr IS DISTINCT FROM expr */
     => {
//line 998 "src/parser/parse.y"
{
  self[-4] .minor= YYMINORTYPE::yy480( Expr::binary(self.yy_move(-4).yy480(), TokenType::TK_NOT as YYCODETYPE, self.yy_move(0).yy480())); /*A-overwrites-X*/
}
        }
      232 /* expr ::= NOT expr */
     | 233 /* expr ::= BITNOT expr */
     => {
//line 1003 "src/parser/parse.y"
{self[-1] .minor= YYMINORTYPE::yy480( Expr::unary(UnaryOperator::from(self[-1].major), self.yy_move(0).yy480()));/*A-overwrites-B*/}
        }
      234 /* expr ::= PLUS|MINUS expr */
     => {
//line 1006 "src/parser/parse.y"
{
  self[-1] .minor= YYMINORTYPE::yy480( Expr::unary(UnaryOperator::from(self[-1].major), self.yy_move(0).yy480()));/*A-overwrites-B*/
}
        }
      235 /* expr ::= expr PTR expr */
     => {
//line 1010 "src/parser/parse.y"
{
  yylhsminor = YYMINORTYPE::yy480( Expr::ptr(self.yy_move(-2).yy480(), self.yy_move(-1).yy0(), self.yy_move(0).yy480()));
}
  self[-2].minor = yylhsminor;
        }
      236 /* between_op ::= BETWEEN */
     | 239 /* in_op ::= IN */
     => {
//line 1015 "src/parser/parse.y"
{self[0] .minor= YYMINORTYPE::yy173( false);}
        }
      238 /* expr ::= expr between_op expr AND expr */
     => {
//line 1017 "src/parser/parse.y"
{
  self[-4] .minor= YYMINORTYPE::yy480( Expr::between(self.yy_move(-4).yy480(), self.yy_move(-3).yy173(), self.yy_move(-2).yy480(), self.yy_move(0).yy480()));/*A-overwrites-B*/
}
        }
      241 /* expr ::= expr in_op LP exprlist RP */
     => {
//line 1024 "src/parser/parse.y"
{
    self[-4] .minor= YYMINORTYPE::yy480( Expr::in_list(self.yy_move(-4).yy480(), self.yy_move(-3).yy173(), self.yy_move(-1).yy419()));/*A-overwrites-X*/
  }
        }
      242 /* expr ::= LP select RP */
     => {
//line 1027 "src/parser/parse.y"
{
    self[-2] .minor= YYMINORTYPE::yy480( Expr::sub_query(self.yy_move(-1).yy213()));
  }
        }
      243 /* expr ::= expr in_op LP select RP */
     => {
//line 1030 "src/parser/parse.y"
{
    self[-4] .minor= YYMINORTYPE::yy480( Expr::in_select(self.yy_move(-4).yy480(), self.yy_move(-3).yy173(), self.yy_move(-1).yy213()));/*A-overwrites-X*/
  }
        }
      244 /* expr ::= expr in_op fullname paren_exprlist */
     => {
//line 1033 "src/parser/parse.y"
{
    self[-3] .minor= YYMINORTYPE::yy480( Expr::in_table(self.yy_move(-3).yy480(), self.yy_move(-2).yy173(), self.yy_move(-1).yy474(), self.yy_move(0).yy419()));/*A-overwrites-X*/
  }
        }
      245 /* expr ::= EXISTS LP select RP */
     => {
//line 1036 "src/parser/parse.y"
{
    self[-3] .minor= YYMINORTYPE::yy480( Expr::Exists(Box::new(self.yy_move(-1).yy213())));
  }
        }
      246 /* expr ::= CASE case_operand case_exprlist case_else END */
     => {
//line 1042 "src/parser/parse.y"
{
  self[-4] .minor= YYMINORTYPE::yy480( Expr::Case{ base: self.yy_move(-3).yy479().map(Box::new), when_then_pairs: self.yy_move(-2).yy473(), else_expr: self.yy_move(-1).yy479().map(Box::new)});
}
        }
      247 /* case_exprlist ::= case_exprlist WHEN expr THEN expr */
     => {
//line 1046 "src/parser/parse.y"
{
  let pair = (self.yy_move(-2).yy480(), self.yy_move(0).yy480());
  self[-4].yy473_ref().push(pair);
}
        }
      248 /* case_exprlist ::= WHEN expr THEN expr */
     => {
//line 1050 "src/parser/parse.y"
{
  self[-3] .minor= YYMINORTYPE::yy473( vec![(self.yy_move(-2).yy480(), self.yy_move(0).yy480())]);
}
        }
      251 /* case_operand ::= expr */
     => {
//line 1057 "src/parser/parse.y"
{self[0] .minor= YYMINORTYPE::yy479( Some(self.yy_move(0).yy480())); /*A-overwrites-X*/}
        }
      253 /* exprlist ::= nexprlist */
     => {
//line 1063 "src/parser/parse.y"
{yylhsminor = YYMINORTYPE::yy419( Some(self.yy_move(0).yy312()));}
  self[0].minor = yylhsminor;
        }
      254 /* exprlist ::= */
     | 257 /* paren_exprlist ::= */
     => {
//line 1064 "src/parser/parse.y"
{self[1] .minor= YYMINORTYPE::yy419( None);}
        }
      255 /* nexprlist ::= nexprlist COMMA expr */
     => {
//line 1066 "src/parser/parse.y"
{ let expr = self.yy_move(0).yy480(); self[-2].yy312_ref().push(expr);}
        }
      256 /* nexprlist ::= expr */
     => {
//line 1068 "src/parser/parse.y"
{self[0] .minor= YYMINORTYPE::yy312( vec![self.yy_move(0).yy480()]); /*A-overwrites-Y*/}
        }
      258 /* paren_exprlist ::= LP exprlist RP */
     => {
//line 1075 "src/parser/parse.y"
{self[-2] .minor= YYMINORTYPE::yy419( self.yy_move(-1).yy419());}
        }
      259 /* cmd ::= createkw uniqueflag INDEX ifnotexists fullname ON nm LP sortlist RP where_opt */
     => {
//line 1082 "src/parser/parse.y"
{
  self.ctx.stmt = Some(Stmt::CreateIndex { unique: self.yy_move(-9).yy173(), if_not_exists: self.yy_move(-7).yy173(), idx_name: self.yy_move(-6).yy474(),
                                            tbl_name: self.yy_move(-4).yy222(), columns: self.yy_move(-2).yy536(), where_clause: self.yy_move(0).yy479() });
}
        }
      262 /* eidlist_opt ::= */
     => {
//line 1113 "src/parser/parse.y"
{self[1] .minor= YYMINORTYPE::yy143( None);}
        }
      263 /* eidlist_opt ::= LP eidlist RP */
     => {
//line 1114 "src/parser/parse.y"
{self[-2] .minor= YYMINORTYPE::yy143( Some(self.yy_move(-1).yy360()));}
        }
      264 /* eidlist ::= eidlist COMMA nm collate sortorder */
     => {
//line 1115 "src/parser/parse.y"
{
  let ic = IndexedColumn{ col_name: self.yy_move(-2).yy222(), collation_name: self.yy_move(-1).yy329(), order: self.yy_move(0).yy296() };
  self[-4].yy360_ref().push(ic);
}
        }
      265 /* eidlist ::= nm collate sortorder */
     => {
//line 1119 "src/parser/parse.y"
{
  self[-2] .minor= YYMINORTYPE::yy360( vec![IndexedColumn{ col_name: self.yy_move(-2).yy222(), collation_name: self.yy_move(-1).yy329(), order: self.yy_move(0).yy296() }]); /*A-overwrites-Y*/
}
        }
      267 /* collate ::= COLLATE ID|STRING */
     => {
//line 1125 "src/parser/parse.y"
{self[-1] .minor= YYMINORTYPE::yy329( Some(Name::from_token(self[0].major, self.yy_move(0).yy0())));}
        }
      268 /* cmd ::= DROP INDEX ifexists fullname */
     => {
//line 1130 "src/parser/parse.y"
{self.ctx.stmt = Some(Stmt::DropIndex{if_exists: self.yy_move(-1).yy173(), idx_name: self.yy_move(0).yy474()});}
        }
      269 /* cmd ::= VACUUM vinto */
     => {
//line 1136 "src/parser/parse.y"
{self.ctx.stmt = Some(Stmt::Vacuum(None, self.yy_move(0).yy479()));}
        }
      270 /* cmd ::= VACUUM nm vinto */
     => {
//line 1137 "src/parser/parse.y"
{self.ctx.stmt = Some(Stmt::Vacuum(Some(self.yy_move(-1).yy222()), self.yy_move(0).yy479()));}
        }
      273 /* cmd ::= PRAGMA fullname */
     => {
//line 1145 "src/parser/parse.y"
{self.ctx.stmt = Some(Stmt::Pragma(self.yy_move(0).yy474(), None));}
        }
      274 /* cmd ::= PRAGMA fullname EQ nmnum */
     | 276 /* cmd ::= PRAGMA fullname EQ minus_num */
     => {
//line 1146 "src/parser/parse.y"
{self.ctx.stmt = Some(Stmt::Pragma(self.yy_move(-2).yy474(), Some(PragmaBody::Equals(self.yy_move(0).yy480()))));}
        }
      275 /* cmd ::= PRAGMA fullname LP nmnum RP */
     | 277 /* cmd ::= PRAGMA fullname LP minus_num RP */
     => {
//line 1147 "src/parser/parse.y"
{self.ctx.stmt = Some(Stmt::Pragma(self.yy_move(-3).yy474(), Some(PragmaBody::Call(self.yy_move(-1).yy480()))));}
        }
      278 /* nmnum ::= nm */
     => {
//line 1155 "src/parser/parse.y"
{yylhsminor = YYMINORTYPE::yy480( Expr::Name(self.yy_move(0).yy222()));}
  self[0].minor = yylhsminor;
        }
      279 /* nmnum ::= ON */
     | 280 /* nmnum ::= DELETE */
     | 281 /* nmnum ::= DEFAULT */
     => {
//line 1156 "src/parser/parse.y"
{yylhsminor = YYMINORTYPE::yy480( Expr::Literal(Literal::Keyword(from_token(self[0].major, self.yy_move(0).yy0()))));}
  self[0].minor = yylhsminor;
        }
      282 /* plus_num ::= PLUS INTEGER|FLOAT */
     => {
//line 1162 "src/parser/parse.y"
{self[-1] .minor= YYMINORTYPE::yy480( Expr::unary(UnaryOperator::Positive, Expr::Literal(Literal::Numeric(self.yy_move(0).yy0().unwrap()))));}
        }
      283 /* plus_num ::= INTEGER|FLOAT */
     => {
//line 1163 "src/parser/parse.y"
{yylhsminor = YYMINORTYPE::yy480( Expr::Literal(Literal::Numeric(self.yy_move(0).yy0().unwrap())));}
  self[0].minor = yylhsminor;
        }
      284 /* minus_num ::= MINUS INTEGER|FLOAT */
     => {
//line 1165 "src/parser/parse.y"
{self[-1] .minor= YYMINORTYPE::yy480( Expr::unary(UnaryOperator::Negative, Expr::Literal(Literal::Numeric(self.yy_move(0).yy0().unwrap()))));}
        }
      285 /* cmd ::= createkw temp TRIGGER ifnotexists fullname trigger_time trigger_event ON fullname foreach_clause when_clause BEGIN trigger_cmd_list END */
     => {
//line 1171 "src/parser/parse.y"
{
  self.ctx.stmt = Some(Stmt::CreateTrigger{
    temporary: self.yy_move(-12).yy173(), if_not_exists: self.yy_move(-10).yy173(), trigger_name: self.yy_move(-9).yy474(), time: self.yy_move(-8).yy59(), event: self.yy_move(-7).yy47(), tbl_name: self.yy_move(-5).yy474(),
    for_each_row: self.yy_move(-4).yy173(), when_clause: self.yy_move(-3).yy479(), commands: self.yy_move(-1).yy33()
  });
}
        }
      286 /* trigger_time ::= BEFORE */
     => {
//line 1179 "src/parser/parse.y"
{ self[0] .minor= YYMINORTYPE::yy59( Some(TriggerTime::Before)); }
        }
      287 /* trigger_time ::= AFTER */
     => {
//line 1180 "src/parser/parse.y"
{ self[0] .minor= YYMINORTYPE::yy59( Some(TriggerTime::After)); }
        }
      288 /* trigger_time ::= INSTEAD OF */
     => {
//line 1181 "src/parser/parse.y"
{ self[-1] .minor= YYMINORTYPE::yy59( Some(TriggerTime::InsteadOf));}
        }
      289 /* trigger_time ::= */
     => {
//line 1182 "src/parser/parse.y"
{ self[1] .minor= YYMINORTYPE::yy59( None); }
        }
      290 /* trigger_event ::= DELETE */
     => {
//line 1185 "src/parser/parse.y"
{self[0] .minor= YYMINORTYPE::yy47( TriggerEvent::Delete);}
        }
      291 /* trigger_event ::= INSERT */
     => {
//line 1186 "src/parser/parse.y"
{self[0] .minor= YYMINORTYPE::yy47( TriggerEvent::Insert);}
        }
      292 /* trigger_event ::= UPDATE */
     => {
//line 1187 "src/parser/parse.y"
{self[0] .minor= YYMINORTYPE::yy47( TriggerEvent::Update);}
        }
      293 /* trigger_event ::= UPDATE OF idlist */
     => {
//line 1188 "src/parser/parse.y"
{self[-2] .minor= YYMINORTYPE::yy47( TriggerEvent::UpdateOf(self.yy_move(0).yy279()));}
        }
      294 /* foreach_clause ::= */
     => {
//line 1191 "src/parser/parse.y"
{ self[1] .minor= YYMINORTYPE::yy173( false); }
        }
      295 /* foreach_clause ::= FOR EACH ROW */
     => {
//line 1192 "src/parser/parse.y"
{ self[-2] .minor= YYMINORTYPE::yy173( true);  }
        }
      296 /* when_clause ::= */
     | 315 /* key_opt ::= */
     => {
//line 1195 "src/parser/parse.y"
{ self[1] .minor= YYMINORTYPE::yy479( None); }
        }
      297 /* when_clause ::= WHEN expr */
     | 316 /* key_opt ::= KEY expr */
     => {
//line 1196 "src/parser/parse.y"
{ self[-1] .minor= YYMINORTYPE::yy479( Some(self.yy_move(0).yy480())); }
        }
      298 /* trigger_cmd_list ::= trigger_cmd_list trigger_cmd SEMI */
     => {
//line 1199 "src/parser/parse.y"
{
  let tc = self.yy_move(-1).yy569();
  self[-2].yy33_ref().push(tc);
}
        }
      299 /* trigger_cmd_list ::= trigger_cmd SEMI */
     => {
//line 1203 "src/parser/parse.y"
{
  yylhsminor = YYMINORTYPE::yy33( vec![self.yy_move(-1).yy569()]);
}
  self[-1].minor = yylhsminor;
        }
      300 /* trnm ::= nm DOT nm */
     => {
//line 1213 "src/parser/parse.y"
{
  self[-2] .minor= YYMINORTYPE::yy222( self.yy_move(0).yy222());
  return Err(custom_err!("qualified table names are not allowed on INSERT, UPDATE, and DELETE \
         statements within triggers"));
}
        }
      301 /* tridxby ::= INDEXED BY nm */
     => {
//line 1224 "src/parser/parse.y"
{
  return Err(custom_err!(
        "the INDEXED BY clause is not allowed on UPDATE or DELETE statements \
         within triggers"));
}
        }
      302 /* tridxby ::= NOT INDEXED */
     => {
//line 1229 "src/parser/parse.y"
{
  return Err(custom_err!(
        "the NOT INDEXED clause is not allowed on UPDATE or DELETE statements \
         within triggers"));
}
        }
      303 /* trigger_cmd ::= UPDATE orconf trnm tridxby SET setlist from where_opt */
     => {
//line 1241 "src/parser/parse.y"
{self[-7] .minor= YYMINORTYPE::yy569( TriggerCmd::Update{ or_conflict: self.yy_move(-6).yy254(), tbl_name: self.yy_move(-5).yy222(), sets: self.yy_move(-2).yy517(), from: self.yy_move(-1).yy485(), where_clause: self.yy_move(0).yy479() });}
        }
      304 /* trigger_cmd ::= insert_cmd INTO trnm idlist_opt select upsert */
     => {
//line 1245 "src/parser/parse.y"
{
  let (upsert, returning) = self.yy_move(0).yy504();
   self[-5] .minor= YYMINORTYPE::yy569( TriggerCmd::Insert{ or_conflict: self.yy_move(-5).yy254(), tbl_name: self.yy_move(-3).yy222(), col_names: self.yy_move(-2).yy18(), select: self.yy_move(-1).yy213(), upsert, returning });/*A-overwrites-R*/
}
        }
      305 /* trigger_cmd ::= DELETE FROM trnm tridxby where_opt */
     => {
//line 1251 "src/parser/parse.y"
{self[-4] .minor= YYMINORTYPE::yy569( TriggerCmd::Delete{ tbl_name: self.yy_move(-2).yy222(), where_clause: self.yy_move(0).yy479() });}
        }
      306 /* trigger_cmd ::= select */
     => {
//line 1255 "src/parser/parse.y"
{self[0] .minor= YYMINORTYPE::yy569( TriggerCmd::Select(self.yy_move(0).yy213())); /*A-overwrites-X*/}
        }
      307 /* expr ::= RAISE LP IGNORE RP */
     => {
//line 1258 "src/parser/parse.y"
{
  self[-3] .minor= YYMINORTYPE::yy480( Expr::Raise(ResolveType::Ignore, None));
}
        }
      308 /* expr ::= RAISE LP raisetype COMMA expr RP */
     => {
//line 1261 "src/parser/parse.y"
{
  self[-5] .minor= YYMINORTYPE::yy480( Expr::Raise(self.yy_move(-3).yy207(), Some(Box::new(self.yy_move(-1).yy480()))));
}
        }
      309 /* raisetype ::= ROLLBACK */
     => {
//line 1267 "src/parser/parse.y"
{self[0] .minor= YYMINORTYPE::yy207( ResolveType::Rollback);}
        }
      310 /* raisetype ::= ABORT */
     => {
//line 1268 "src/parser/parse.y"
{self[0] .minor= YYMINORTYPE::yy207( ResolveType::Abort);}
        }
      311 /* raisetype ::= FAIL */
     => {
//line 1269 "src/parser/parse.y"
{self[0] .minor= YYMINORTYPE::yy207( ResolveType::Fail);}
        }
      312 /* cmd ::= DROP TRIGGER ifexists fullname */
     => {
//line 1274 "src/parser/parse.y"
{
  self.ctx.stmt = Some(Stmt::DropTrigger{ if_exists: self.yy_move(-1).yy173(), trigger_name: self.yy_move(0).yy474()});
}
        }
      313 /* cmd ::= ATTACH database_kw_opt expr AS expr key_opt */
     => {
//line 1281 "src/parser/parse.y"
{
  self.ctx.stmt = Some(Stmt::Attach{ expr: self.yy_move(-3).yy480(), db_name: self.yy_move(-1).yy480(), key: self.yy_move(0).yy479() });
}
        }
      314 /* cmd ::= DETACH database_kw_opt expr */
     => {
//line 1284 "src/parser/parse.y"
{
  self.ctx.stmt = Some(Stmt::Detach(self.yy_move(0).yy480()));
}
        }
      317 /* cmd ::= REINDEX */
     => {
//line 1298 "src/parser/parse.y"
{self.ctx.stmt = Some(Stmt::Reindex { obj_name: None });}
        }
      318 /* cmd ::= REINDEX fullname */
     => {
//line 1299 "src/parser/parse.y"
{self.ctx.stmt = Some(Stmt::Reindex { obj_name: Some(self.yy_move(0).yy474()) });}
        }
      319 /* cmd ::= ANALYZE */
     => {
//line 1304 "src/parser/parse.y"
{self.ctx.stmt = Some(Stmt::Analyze(None));}
        }
      320 /* cmd ::= ANALYZE fullname */
     => {
//line 1305 "src/parser/parse.y"
{self.ctx.stmt = Some(Stmt::Analyze(Some(self.yy_move(0).yy474())));}
        }
      321 /* cmd ::= ALTER TABLE fullname RENAME TO nm */
     => {
//line 1310 "src/parser/parse.y"
{
  self.ctx.stmt = Some(Stmt::AlterTable(self.yy_move(-3).yy474(), AlterTableBody::RenameTo(self.yy_move(0).yy222())));
}
        }
      322 /* cmd ::= ALTER TABLE fullname ADD kwcolumn_opt columnname carglist */
     => {
//line 1314 "src/parser/parse.y"
{
  let (col_name, col_type) = self.yy_move(-1).yy444();
  let cd = ColumnDefinition{ col_name, col_type, constraints: self.yy_move(0).yy305() };
  self.ctx.stmt = Some(Stmt::AlterTable(self.yy_move(-4).yy474(), AlterTableBody::AddColumn(cd)));
}
        }
      323 /* cmd ::= ALTER TABLE fullname RENAME kwcolumn_opt nm TO nm */
     => {
//line 1319 "src/parser/parse.y"
{
  self.ctx.stmt = Some(Stmt::AlterTable(self.yy_move(-5).yy474(), AlterTableBody::RenameColumn{ old: self.yy_move(-2).yy222(), new: self.yy_move(0).yy222() }));
}
        }
      324 /* cmd ::= ALTER TABLE fullname DROP kwcolumn_opt nm */
     => {
//line 1322 "src/parser/parse.y"
{
  self.ctx.stmt = Some(Stmt::AlterTable(self.yy_move(-3).yy474(), AlterTableBody::DropColumn(self.yy_move(0).yy222())));
}
        }
      325 /* cmd ::= create_vtab */
     => {
//line 1332 "src/parser/parse.y"
{self.ctx.stmt = Some(self.yy_move(0).yy77());}
        }
      326 /* cmd ::= create_vtab LP vtabarglist RP */
     => {
//line 1333 "src/parser/parse.y"
{
  let mut stmt = self.yy_move(-3).yy77();
  if let Stmt::CreateVirtualTable{ ref mut args, .. } = stmt {
    *args = self.ctx.module_args();
  }
  self.ctx.stmt = Some(stmt);
}
        }
      327 /* create_vtab ::= createkw VIRTUAL TABLE ifnotexists fullname USING nm */
     => {
//line 1342 "src/parser/parse.y"
{
    self[-6] .minor= YYMINORTYPE::yy77( Stmt::CreateVirtualTable{ if_not_exists: self.yy_move(-3).yy173(), tbl_name: self.yy_move(-2).yy474(), module_name: self.yy_move(0).yy222(), args: None });
}
        }
      328 /* vtabarg ::= */
     => {
//line 1347 "src/parser/parse.y"
{self.ctx.vtab_arg_init();}
        }
      329 /* vtabargtoken ::= ANY */
     => {
//line 1349 "src/parser/parse.y"
{ let x = self.yy_move(0).yy0(); self.ctx.vtab_arg_extend(x);}
        }
      330 /* vtabargtoken ::= lp anylist RP */
     | 331 /* lp ::= LP */
     => {
//line 1350 "src/parser/parse.y"
{let x = self.yy_move(0).yy0(); self.ctx.vtab_arg_extend(x);}
        }
      332 /* with ::= */
     => {
//line 1364 "src/parser/parse.y"
{ self[1] .minor= YYMINORTYPE::yy280( None); }
        }
      333 /* with ::= WITH wqlist */
     => {
//line 1366 "src/parser/parse.y"
{ self[-1] .minor= YYMINORTYPE::yy280( Some(With{ recursive: false, ctes: self.yy_move(0).yy97() })); }
        }
      334 /* with ::= WITH RECURSIVE wqlist */
     => {
//line 1367 "src/parser/parse.y"
{ self[-2] .minor= YYMINORTYPE::yy280( Some(With{ recursive: true, ctes: self.yy_move(0).yy97() })); }
        }
      335 /* wqas ::= AS */
     => {
//line 1370 "src/parser/parse.y"
{self[0] .minor= YYMINORTYPE::yy520( Materialized::Any);}
        }
      336 /* wqas ::= AS MATERIALIZED */
     => {
//line 1371 "src/parser/parse.y"
{self[-1] .minor= YYMINORTYPE::yy520( Materialized::Yes);}
        }
      337 /* wqas ::= AS NOT MATERIALIZED */
     => {
//line 1372 "src/parser/parse.y"
{self[-2] .minor= YYMINORTYPE::yy520( Materialized::No);}
        }
      338 /* wqitem ::= nm eidlist_opt wqas LP select RP */
     => {
//line 1373 "src/parser/parse.y"
{
  self[-5] .minor= YYMINORTYPE::yy557( CommonTableExpr{ tbl_name: self.yy_move(-5).yy222(), columns: self.yy_move(-4).yy143(), materialized: self.yy_move(-3).yy520(), select: self.yy_move(-1).yy213() }); /*A-overwrites-X*/
}
        }
      339 /* wqlist ::= wqitem */
     => {
//line 1376 "src/parser/parse.y"
{
  self[0] .minor= YYMINORTYPE::yy97( vec![self.yy_move(0).yy557()]); /*A-overwrites-X*/
}
        }
      340 /* wqlist ::= wqlist COMMA wqitem */
     => {
//line 1379 "src/parser/parse.y"
{
  let cte = self.yy_move(0).yy557();
  CommonTableExpr::add_cte(self[-2].yy97_ref(), cte)?;
}
        }
      341 /* windowdefn_list ::= windowdefn */
     => {
//line 1393 "src/parser/parse.y"
{ yylhsminor = YYMINORTYPE::yy472( vec![self.yy_move(0).yy256()]); }
  self[0].minor = yylhsminor;
        }
      342 /* windowdefn_list ::= windowdefn_list COMMA windowdefn */
     => {
//line 1394 "src/parser/parse.y"
{
  let w = self.yy_move(0).yy256();
  self[-2].yy472_ref().push(w);
}
        }
      343 /* windowdefn ::= nm AS LP window RP */
     => {
//line 1400 "src/parser/parse.y"
{
  yylhsminor = YYMINORTYPE::yy256( WindowDef { name: self.yy_move(-4).yy222(), window: self.yy_move(-1).yy13()});
}
  self[-4].minor = yylhsminor;
        }
      344 /* window ::= PARTITION BY nexprlist orderby_opt frame_opt */
     => {
//line 1420 "src/parser/parse.y"
{
  self[-4] .minor= YYMINORTYPE::yy13( Window{ base: None,  partition_by: Some(self.yy_move(-2).yy312()), order_by: self.yy_move(-1).yy19(), frame_clause: self.yy_move(0).yy4()});
}
        }
      345 /* window ::= nm PARTITION BY nexprlist orderby_opt frame_opt */
     => {
//line 1423 "src/parser/parse.y"
{
  yylhsminor = YYMINORTYPE::yy13( Window{ base: Some(self.yy_move(-5).yy222()),  partition_by: Some(self.yy_move(-2).yy312()), order_by: self.yy_move(-1).yy19(), frame_clause: self.yy_move(0).yy4()});
}
  self[-5].minor = yylhsminor;
        }
      346 /* window ::= ORDER BY sortlist frame_opt */
     => {
//line 1426 "src/parser/parse.y"
{
  self[-3] .minor= YYMINORTYPE::yy13( Window{ base: None,  partition_by: None, order_by: Some(self.yy_move(-1).yy536()), frame_clause: self.yy_move(0).yy4()});
}
        }
      347 /* window ::= nm ORDER BY sortlist frame_opt */
     => {
//line 1429 "src/parser/parse.y"
{
  yylhsminor = YYMINORTYPE::yy13( Window{ base: Some(self.yy_move(-4).yy222()),  partition_by: None, order_by: Some(self.yy_move(-1).yy536()), frame_clause: self.yy_move(0).yy4()});
}
  self[-4].minor = yylhsminor;
        }
      348 /* window ::= frame_opt */
     => {
//line 1432 "src/parser/parse.y"
{
  yylhsminor = YYMINORTYPE::yy13( Window{ base: None,  partition_by: None, order_by: None, frame_clause: self.yy_move(0).yy4()});
}
  self[0].minor = yylhsminor;
        }
      349 /* window ::= nm frame_opt */
     => {
//line 1435 "src/parser/parse.y"
{
  yylhsminor = YYMINORTYPE::yy13( Window{ base: Some(self.yy_move(-1).yy222()),  partition_by: None, order_by: None, frame_clause: self.yy_move(0).yy4()});
}
  self[-1].minor = yylhsminor;
        }
      350 /* frame_opt ::= */
     => {
//line 1439 "src/parser/parse.y"
{
  self[1] .minor= YYMINORTYPE::yy4( None);
}
        }
      351 /* frame_opt ::= range_or_rows frame_bound_s frame_exclude_opt */
     => {
//line 1442 "src/parser/parse.y"
{
  yylhsminor = YYMINORTYPE::yy4( Some(FrameClause{ mode: self.yy_move(-2).yy221(), start: self.yy_move(-1).yy216(), end: None, exclude: self.yy_move(0).yy105() }));
}
  self[-2].minor = yylhsminor;
        }
      352 /* frame_opt ::= range_or_rows BETWEEN frame_bound_s AND frame_bound_e frame_exclude_opt */
     => {
//line 1446 "src/parser/parse.y"
{
  yylhsminor = YYMINORTYPE::yy4( Some(FrameClause{ mode: self.yy_move(-5).yy221(), start: self.yy_move(-3).yy216(), end: Some(self.yy_move(-1).yy216()), exclude: self.yy_move(0).yy105() }));
}
  self[-5].minor = yylhsminor;
        }
      353 /* range_or_rows ::= RANGE */
     => {
//line 1450 "src/parser/parse.y"
{ self[0] .minor= YYMINORTYPE::yy221( FrameMode::Range); }
        }
      354 /* range_or_rows ::= ROWS */
     => {
//line 1451 "src/parser/parse.y"
{ self[0] .minor= YYMINORTYPE::yy221( FrameMode::Rows); }
        }
      355 /* range_or_rows ::= GROUPS */
     => {
//line 1452 "src/parser/parse.y"
{ self[0] .minor= YYMINORTYPE::yy221( FrameMode::Groups); }
        }
      356 /* frame_bound_s ::= frame_bound */
     | 358 /* frame_bound_e ::= frame_bound */
     => {
//line 1455 "src/parser/parse.y"
{yylhsminor = YYMINORTYPE::yy216( self.yy_move(0).yy216());}
  self[0].minor = yylhsminor;
        }
      357 /* frame_bound_s ::= UNBOUNDED PRECEDING */
     => {
//line 1456 "src/parser/parse.y"
{self[-1] .minor= YYMINORTYPE::yy216( FrameBound::UnboundedPreceding);}
        }
      359 /* frame_bound_e ::= UNBOUNDED FOLLOWING */
     => {
//line 1458 "src/parser/parse.y"
{self[-1] .minor= YYMINORTYPE::yy216( FrameBound::UnboundedFollowing);}
        }
      360 /* frame_bound ::= expr PRECEDING */
     => {
//line 1460 "src/parser/parse.y"
{ yylhsminor = YYMINORTYPE::yy216( FrameBound::Preceding(self.yy_move(-1).yy480())); }
  self[-1].minor = yylhsminor;
        }
      361 /* frame_bound ::= CURRENT ROW */
     => {
//line 1461 "src/parser/parse.y"
{ self[-1] .minor= YYMINORTYPE::yy216( FrameBound::CurrentRow); }
        }
      362 /* frame_bound ::= expr FOLLOWING */
     => {
//line 1462 "src/parser/parse.y"
{ yylhsminor = YYMINORTYPE::yy216( FrameBound::Following(self.yy_move(-1).yy480())); }
  self[-1].minor = yylhsminor;
        }
      363 /* frame_exclude_opt ::= */
     => {
//line 1465 "src/parser/parse.y"
{self[1] .minor= YYMINORTYPE::yy105( None);}
        }
      364 /* frame_exclude_opt ::= EXCLUDE frame_exclude */
     => {
//line 1466 "src/parser/parse.y"
{self[-1] .minor= YYMINORTYPE::yy105( Some(self.yy_move(0).yy214()));}
        }
      365 /* frame_exclude ::= NO OTHERS */
     => {
//line 1469 "src/parser/parse.y"
{ self[-1] .minor= YYMINORTYPE::yy214( FrameExclude::NoOthers); }
        }
      366 /* frame_exclude ::= CURRENT ROW */
     => {
//line 1470 "src/parser/parse.y"
{ self[-1] .minor= YYMINORTYPE::yy214( FrameExclude::CurrentRow); }
        }
      367 /* frame_exclude ::= GROUP */
     => {
//line 1471 "src/parser/parse.y"
{ self[0] .minor= YYMINORTYPE::yy214( FrameExclude::Group); }
        }
      368 /* frame_exclude ::= TIES */
     => {
//line 1472 "src/parser/parse.y"
{ self[0] .minor= YYMINORTYPE::yy214( FrameExclude::Ties); }
        }
      369 /* window_clause ::= WINDOW windowdefn_list */
     => {
//line 1475 "src/parser/parse.y"
{ self[-1] .minor= YYMINORTYPE::yy472( self.yy_move(0).yy472()); }
        }
      370 /* filter_over ::= filter_clause over_clause */
     => {
//line 1477 "src/parser/parse.y"
{
  yylhsminor = YYMINORTYPE::yy353( FunctionTail{ filter_clause: Some(Box::new(self.yy_move(-1).yy480())), over_clause: Some(Box::new(self.yy_move(0).yy113())) });
}
  self[-1].minor = yylhsminor;
        }
      371 /* filter_over ::= over_clause */
     => {
//line 1480 "src/parser/parse.y"
{
  yylhsminor = YYMINORTYPE::yy353( FunctionTail{ filter_clause: None, over_clause: Some(Box::new(self.yy_move(0).yy113())) });
}
  self[0].minor = yylhsminor;
        }
      372 /* filter_over ::= filter_clause */
     => {
//line 1483 "src/parser/parse.y"
{
  yylhsminor = YYMINORTYPE::yy353( FunctionTail{ filter_clause: Some(Box::new(self.yy_move(0).yy480())), over_clause: None });
}
  self[0].minor = yylhsminor;
        }
      373 /* over_clause ::= OVER LP window RP */
     => {
//line 1487 "src/parser/parse.y"
{
  self[-3] .minor= YYMINORTYPE::yy113( Over::Window(self.yy_move(-1).yy13()));
}
        }
      374 /* over_clause ::= OVER nm */
     => {
//line 1490 "src/parser/parse.y"
{
  self[-1] .minor= YYMINORTYPE::yy113( Over::Name(self.yy_move(0).yy222()));
}
        }
      375 /* filter_clause ::= FILTER LP WHERE expr RP */
     => {
//line 1494 "src/parser/parse.y"
{ self[-4] .minor= YYMINORTYPE::yy480( self.yy_move(-1).yy480()); }
        }
      _ => {
      /* (376) input ::= cmdlist * debug_assert_eq!(yyruleno, 376); */
      /* (377) cmdlist ::= cmdlist ecmd * debug_assert_eq!(yyruleno, 377); */
      /* (378) cmdlist ::= ecmd (OPTIMIZED OUT) */ debug_assert_ne!(yyruleno, 378);
      /* (379) ecmd ::= SEMI * debug_assert_eq!(yyruleno, 379); */
      /* (380) ecmd ::= cmdx SEMI * debug_assert_eq!(yyruleno, 380); */
      /* (381) ecmd ::= explain cmdx SEMI (NEVER REDUCES) * debug_assert_ne!(yyruleno, 381); FIXME */
      /* (382) savepoint_opt ::= SAVEPOINT * debug_assert_eq!(yyruleno, 382); */
      /* (383) savepoint_opt ::= * debug_assert_eq!(yyruleno, 383); */
      /* (384) createkw ::= CREATE * debug_assert_eq!(yyruleno, 384); */
      /* (385) table_option_set ::= table_option (OPTIMIZED OUT) */ debug_assert_ne!(yyruleno, 385);
      /* (386) signed ::= plus_num (OPTIMIZED OUT) */ debug_assert_ne!(yyruleno, 386);
      /* (387) signed ::= minus_num (OPTIMIZED OUT) */ debug_assert_ne!(yyruleno, 387);
      /* (388) tconscomma ::= * debug_assert_eq!(yyruleno, 388); */
      /* (389) resolvetype ::= raisetype (OPTIMIZED OUT) */ debug_assert_ne!(yyruleno, 389);
      /* (390) sclp ::= selcollist COMMA * debug_assert_eq!(yyruleno, 390); */
      /* (391) expr ::= term (OPTIMIZED OUT) */ debug_assert_ne!(yyruleno, 391);
      /* (392) nmnum ::= plus_num (OPTIMIZED OUT) */ debug_assert_ne!(yyruleno, 392);
      /* (393) trnm ::= nm * debug_assert_eq!(yyruleno, 393); */
      /* (394) tridxby ::= * debug_assert_eq!(yyruleno, 394); */
      /* (395) database_kw_opt ::= DATABASE * debug_assert_eq!(yyruleno, 395); */
      /* (396) database_kw_opt ::= * debug_assert_eq!(yyruleno, 396); */
      /* (397) kwcolumn_opt ::= * debug_assert_eq!(yyruleno, 397); */
      /* (398) kwcolumn_opt ::= COLUMNKW * debug_assert_eq!(yyruleno, 398); */
      /* (399) vtabarglist ::= vtabarg * debug_assert_eq!(yyruleno, 399); */
      /* (400) vtabarglist ::= vtabarglist COMMA vtabarg * debug_assert_eq!(yyruleno, 400); */
      /* (401) vtabarg ::= vtabarg vtabargtoken * debug_assert_eq!(yyruleno, 401); */
      /* (402) anylist ::= * debug_assert_eq!(yyruleno, 402); */
      /* (403) anylist ::= anylist LP anylist RP * debug_assert_eq!(yyruleno, 403); */
      /* (404) anylist ::= anylist ANY * debug_assert_eq!(yyruleno, 404); */
        }
/********** End reduce actions ************************************************/
        };
        let yygoto: YYCODETYPE = yyRuleInfoLhs[yyruleno as usize]; /* The next state */
        let yysize: i8 = yyRuleInfoNRhs[yyruleno as usize];  /* Amount to pop the stack */
        let yyact: YYACTIONTYPE = yy_find_reduce_action(self[yysize].stateno, yygoto); /* The next action */

        /* There are no SHIFTREDUCE actions on nonterminals because the table
         ** generator has simplified them to pure REDUCE actions. */
        assert!(!(yyact > YY_MAX_SHIFT && yyact <= YY_MAX_SHIFTREDUCE));

        /* It is not possible for a REDUCE to be followed by an error */
        assert_ne!(yyact, YY_ERROR_ACTION);

        self.yyidx_shift(yysize + 1);
        {
            let yymsp = &mut self[0];
            yymsp.stateno = yyact;
            yymsp.major = yygoto;
        }
        self.yyTraceShift(yyact, "... then shift");
        Ok(yyact)
    }
}

/*
** The following code executes when the parse fails
*/
impl yyParser<'_> {
    #[cfg(not(feature = "YYNOERRORRECOVERY"))]
    fn yy_parse_failed(&mut self) {
        #[cfg(not(feature = "NDEBUG"))]
        {
            error!(target: TARGET, "Fail!");
        }
        while self.yyidx > 0 {
            self.yy_pop_parser_stack();
        }
        /* Here code is inserted which will be executed whenever the
         ** parser fails */
        /************ Begin %parse_failure code ***************************************/
        /************ End %parse_failure code *****************************************/
    }
    #[cfg(feature = "YYNOERRORRECOVERY")]
    fn yy_parse_failed(&mut self) {}
}

/*
** The following code executes when a syntax error first occurs.
*/
impl yyParser<'_> {
    fn yy_syntax_error(
        &mut self,
        yymajor: YYCODETYPE,              /* The major type of the error token */
        yyminor: &sqlite3ParserTOKENTYPE, /* The minor type of the error token */
    ) {
        /************ Begin %syntax_error code ****************************************/
//line 39 "src/parser/parse.y"

  if TokenType::TK_EOF as YYCODETYPE == yymajor {
    error!(target: TARGET, "incomplete input");
    self.ctx.error = Some(ParserError::UnexpectedEof);
  } else {
    error!(target: TARGET, "near {}, \"{:?}\": syntax error", yyTokenName[yymajor as usize], yyminor);
    self.ctx.error = Some(ParserError::SyntaxError {
        token_type: yyTokenName[yymajor as usize],
        found: yyminor.1.clone(),
    });
  }
        /************ End %syntax_error code ******************************************/
    }
}

/*
** The following is executed when the parser accepts
*/
impl yyParser<'_> {
    fn yy_accept(&mut self) {
        #[cfg(not(feature = "NDEBUG"))]
        {
            debug!(target: TARGET, "Accept!");
        }
        if cfg!(not(feature = "YYNOERRORRECOVERY")) {
            self.yyerrcnt = -1;
        }
        assert_eq!(self.yyidx, 0);
        /* Here code is inserted which will be executed whenever the
         ** parser accepts */
        /*********** Begin %parse_accept code *****************************************/
        /*********** End %parse_accept code *******************************************/
    }
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "sqlite3ParserAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
impl yyParser<'_> {
    #[allow(non_snake_case)]
    pub fn sqlite3Parser(
        &mut self,
        yymajor: TokenType,                  /* The major token code number */
        mut yyminor: sqlite3ParserTOKENTYPE, /* The value for the token */
    ) -> Result<(), sqlite3ParserError> {
        let mut yymajor = yymajor as YYCODETYPE;
        //#[cfg(all(not(feature = "YYERRORSYMBOL"), not(feature = "YYNOERRORRECOVERY")))]
        let mut yyendofinput: bool = false; /* True if we are at the end of input */
        //#[cfg(feature = "YYERRORSYMBOL")]
        let mut yyerrorhit: bool = false; /* True if yymajor has invoked an error */

        //assert_ne!( self[0], null );
        if YYERRORSYMBOL == 0 && cfg!(not(feature = "YYNOERRORRECOVERY")) {
            yyendofinput = yymajor == 0;
        }

        let mut yyact: YYACTIONTYPE = self[0].stateno; /* The parser action. */
        #[cfg(not(feature = "NDEBUG"))]
        {
            if yyact < YY_MIN_REDUCE {
                debug!(
                    target: TARGET,
                    "Input '{}' in state {}", yyTokenName[yymajor as usize], yyact
                );
            } else {
                debug!(
                    target: TARGET,
                    "Input '{}' with pending reduce {}",
                    yyTokenName[yymajor as usize],
                    yyact - YY_MIN_REDUCE
                );
            }
        }

        loop {
            assert_eq!(yyact, self[0].stateno);
            yyact = yy_find_shift_action(yymajor, yyact);
            if yyact >= YY_MIN_REDUCE {
                let yyruleno = yyact - YY_MIN_REDUCE; /* Reduce by this rule */
                #[cfg(not(feature = "NDEBUG"))]
                    {
                        assert!((yyruleno as usize) < yyRuleName.len());
                        let yysize = yyRuleInfoNRhs[yyruleno as usize];
                        let action = if yyruleno < YYNRULE_WITH_ACTION {
                            ""
                        } else {
                            " without external action"
                        };
                        if yysize != 0 {
                            debug!(
                                target: TARGET,
                                "Reduce {} [{}]{}, pop back to state {}.",
                                yyruleno,
                                yyRuleName[yyruleno as usize],
                                action,
                                self[yysize].stateno
                            );
                        } else {
                            debug!(
                                target: TARGET,
                                "Reduce {} [{}]{}.", yyruleno, yyRuleName[yyruleno as usize], action
                            );
                        }
                    }
                /* Check that the stack is large enough to grow by a single entry
                 ** if the RHS of the rule is empty.  This ensures that there is room
                 ** enough on the stack to push the LHS value */
                if yyRuleInfoNRhs[yyruleno as usize] == 0 {
                    self.yyhwm_incr();
                    if self.yy_grow_stack_for_push() {
                        break;
                    }
                }
                yyact = self.yy_reduce(yyruleno, yymajor, &yyminor)?;
            } else if yyact <= YY_MAX_SHIFTREDUCE {
                self.yy_shift(yyact, yymajor, yyminor.take());
                if cfg!(not(feature = "YYNOERRORRECOVERY")) {
                    self.yyerrcnt -= 1;
                }
                break;
            } else if yyact == YY_ACCEPT_ACTION {
                self.yyidx_shift(-1);
                self.yy_accept();
                return Ok(());
            } else {
                assert_eq!(yyact, YY_ERROR_ACTION);
                #[cfg(not(feature = "NDEBUG"))]
                {
                    debug!(target: TARGET, "Syntax Error!");
                }
                if YYERRORSYMBOL > 0 {
                    /* A syntax error has occurred.
                     ** The response to an error depends upon whether or not the
                     ** grammar defines an error token "ERROR".
                     **
                     ** This is what we do if the grammar does define ERROR:
                     **
                     **  * Call the %syntax_error function.
                     **
                     **  * Begin popping the stack until we enter a state where
                     **    it is legal to shift the error symbol, then shift
                     **    the error symbol.
                     **
                     **  * Set the error count to three.
                     **
                     **  * Begin accepting and shifting new tokens.  No new error
                     **    processing will occur until three tokens have been
                     **    shifted successfully.
                     **
                     */
                    if self.yyerrcnt < 0 {
                        self.yy_syntax_error(yymajor, &yyminor);
                    }
                    let yymx = self[0].major;
                    if yymx == YYERRORSYMBOL || yyerrorhit {
                        #[cfg(not(feature = "NDEBUG"))]
                        {
                            debug!(
                                target: TARGET,
                                "Discard input token {}", yyTokenName[yymajor as usize]
                            );
                        }
                        yymajor = YYNOCODE;
                    } else {
                        while self.yyidx > 0 {
                            yyact = yy_find_reduce_action(self[0].stateno, YYERRORSYMBOL);
                            if yyact <= YY_MAX_SHIFTREDUCE {
                                break;
                            }
                            self.yy_pop_parser_stack();
                        }
                        if self.yyidx <= 0 || yymajor == 0 {
                            self.yy_parse_failed();
                            if cfg!(not(feature = "YYNOERRORRECOVERY")) {
                                self.yyerrcnt = -1;
                            }
                            yymajor = YYNOCODE;
                        } else if yymx != YYERRORSYMBOL {
                            self.yy_shift(yyact, YYERRORSYMBOL, yyminor.take());
                        }
                    }
                    self.yyerrcnt = 3;
                    yyerrorhit = true;
                    if yymajor == YYNOCODE {
                        break;
                    }
                    yyact = self[0].stateno;
                } else if cfg!(feature = "YYNOERRORRECOVERY") {
                    /* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
                     ** do any kind of error recovery.  Instead, simply invoke the syntax
                     ** error routine and continue going as if nothing had happened.
                     **
                     ** Applications can set this macro (for example inside %include) if
                     ** they intend to abandon the parse upon the first syntax error seen.
                     */
                    self.yy_syntax_error(yymajor, &yyminor);
                    break;
                } else {
                    /* YYERRORSYMBOL is not defined */
                    /* This is what we do if the grammar does not define ERROR:
                     **
                     **  * Report an error message, and throw away the input token.
                     **
                     **  * If the input token is $, then fail the parse.
                     **
                     ** As before, subsequent error messages are suppressed until
                     ** three input tokens have been successfully shifted.
                     */
                    if self.yyerrcnt <= 0 {
                        self.yy_syntax_error(yymajor, &yyminor);
                    }
                    self.yyerrcnt = 3;
                    if yyendofinput {
                        self.yy_parse_failed();
                        if cfg!(not(feature = "YYNOERRORRECOVERY")) {
                            self.yyerrcnt = -1;
                        }
                    }
                    break;
                }
            }
            if self.yyidx <= 0 {
                break;
            }
        }
        #[cfg(not(feature = "NDEBUG"))]
        {
            if log_enabled!(target: TARGET, Debug) {
                let msg = self.yystack[1..=self.yyidx]
                    .iter()
                    .map(|entry| yyTokenName[entry.major as usize])
                    .collect::<Vec<&str>>()
                    .join(" ");
                debug!(target: TARGET, "Return. Stack=[{}]", msg);
            }
        }
        return Ok(());
    }

    /*
     ** Return the fallback token corresponding to canonical token iToken, or
     ** 0 if iToken has no fallback.
     */
    pub fn parse_fallback(i_token: YYCODETYPE) -> YYCODETYPE {
        if YYFALLBACK {
            return yyFallback[i_token as usize];
        }
        0
    }
}
